!function(t){var e={};function n(l){if(e[l])return e[l].exports;var c=e[l]={i:l,l:!1,exports:{}};return t[l].call(c.exports,c,c.exports,n),c.l=!0,c.exports}n.m=t,n.c=e,n.d=function(t,e,l){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:l})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var l=Object.create(null);if(n.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var c in t)n.d(l,c,function(e){return t[e]}.bind(null,c));return l},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=86)}([function(module,exports,__webpack_require__){eval("var DataFactory = __webpack_require__(80)\n\nmodule.exports = DataFactory\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvaW5kZXguanM/OWI5MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsbUJBQU8sQ0FBQyxFQUFvQjs7QUFFOUMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBEYXRhRmFjdG9yeSA9IHJlcXVpcmUoJy4vbGliL2RhdGEtZmFjdG9yeScpXG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YUZhY3RvcnlcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar isRegExp = __webpack_require__(55);\nvar anObject = __webpack_require__(3);\nvar speciesConstructor = __webpack_require__(56);\nvar advanceStringIndex = __webpack_require__(27);\nvar toLength = __webpack_require__(24);\nvar callRegExpExec = __webpack_require__(28);\nvar regexpExec = __webpack_require__(29);\nvar fails = __webpack_require__(10);\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\nvar MAX_UINT32 = 0xffffffff;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\n__webpack_require__(31)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval("var store = __webpack_require__(19)('wks');\nvar uid = __webpack_require__(17);\nvar Symbol = __webpack_require__(4).Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanM/MmI0YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLG1CQUFPLENBQUMsRUFBVztBQUMvQixVQUFVLG1CQUFPLENBQUMsRUFBUTtBQUMxQixhQUFhLG1CQUFPLENBQUMsQ0FBVztBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(13);\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanM/Y2I3YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsRUFBYztBQUNyQztBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n")},function(module,exports){eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanM/NzcyNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){eval("__webpack_require__(46)('asyncIterator');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanM/YWM0ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQkFBTyxDQUFDLEVBQWUiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// ECMAScript 6 symbols shim\nvar global = __webpack_require__(4);\nvar has = __webpack_require__(12);\nvar DESCRIPTORS = __webpack_require__(8);\nvar $export = __webpack_require__(32);\nvar redefine = __webpack_require__(14);\nvar META = __webpack_require__(75).KEY;\nvar $fails = __webpack_require__(10);\nvar shared = __webpack_require__(19);\nvar setToStringTag = __webpack_require__(38);\nvar uid = __webpack_require__(17);\nvar wks = __webpack_require__(2);\nvar wksExt = __webpack_require__(47);\nvar wksDefine = __webpack_require__(46);\nvar enumKeys = __webpack_require__(76);\nvar isArray = __webpack_require__(77);\nvar anObject = __webpack_require__(3);\nvar isObject = __webpack_require__(13);\nvar toObject = __webpack_require__(39);\nvar toIObject = __webpack_require__(15);\nvar toPrimitive = __webpack_require__(33);\nvar createDesc = __webpack_require__(25);\nvar _create = __webpack_require__(44);\nvar gOPNExt = __webpack_require__(78);\nvar $GOPD = __webpack_require__(79);\nvar $GOPS = __webpack_require__(48);\nvar $DP = __webpack_require__(11);\nvar $keys = __webpack_require__(26);\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  __webpack_require__(49).f = gOPNExt.f = $getOwnPropertyNames;\n  __webpack_require__(40).f = $propertyIsEnumerable;\n  $GOPS.f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !__webpack_require__(21)) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\nvar FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });\n\n$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return $GOPS.f(toObject(it));\n  }\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(7)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval("var dP = __webpack_require__(11);\nvar createDesc = __webpack_require__(25);\nmodule.exports = __webpack_require__(8) ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzPzMyZTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxtQkFBTyxDQUFDLEVBQWM7QUFDL0IsaUJBQWlCLG1CQUFPLENBQUMsRUFBa0I7QUFDM0MsaUJBQWlCLG1CQUFPLENBQUMsQ0FBZ0I7QUFDekM7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(10)(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcz85ZTFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsRUFBVTtBQUNwQyxpQ0FBaUMsUUFBUSxtQkFBbUIsVUFBVSxFQUFFLEVBQUU7QUFDMUUsQ0FBQyIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval('!function(t,e){ true?module.exports=e():undefined}(window,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=205)}([function(t,e,r){t.exports=r(28)},function(t,e){function r(t,e,r,n,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void r(t)}s.done?e(u):Promise.resolve(u).then(n,i)}t.exports=function(t){return function(){var e=this,n=arguments;return new Promise((function(i,o){var a=t.apply(e,n);function s(t){r(a,i,o,s,u,"next",t)}function u(t){r(a,i,o,s,u,"throw",t)}s(void 0)}))}}},function(t,e,r){var n=r(4),i=r(22).f,o=r(14),a=r(17),s=r(62),u=r(101),c=r(68);t.exports=function(t,e){var r,f,l,h,p,d=t.target,v=t.global,g=t.stat;if(r=v?n:g?n[d]||s(d,{}):(n[d]||{}).prototype)for(f in e){if(h=e[f],l=t.noTargetGet?(p=i(r,f))&&p.value:r[f],!c(v?f:d+(g?".":"#")+f,t.forced)&&void 0!==l){if(typeof h==typeof l)continue;u(h,l)}(t.sham||l&&l.sham)&&o(h,"sham",!0),a(r,f,h,t)}}},function(t,e,r){var n=r(4),i=r(64),o=r(13),a=r(65),s=r(69),u=r(107),c=i("wks"),f=n.Symbol,l=u?f:f&&f.withoutSetter||a;t.exports=function(t){return o(c,t)||(s&&o(f,t)?c[t]=f[t]:c[t]=l("Symbol."+t)),c[t]}},function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||Function("return this")()}).call(this,r(21))},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){"use strict";var n="http://www.w3.org/1999/02/22-rdf-syntax-ns#",i="http://www.w3.org/2001/XMLSchema#",o="http://www.w3.org/2000/10/swap/";e.a={xsd:{decimal:i+"decimal",boolean:i+"boolean",double:i+"double",integer:i+"integer",string:i+"string"},rdf:{type:n+"type",nil:n+"nil",first:n+"first",rest:n+"rest",langString:n+"langString"},owl:{sameAs:"http://www.w3.org/2002/07/owl#sameAs"},r:{forSome:o+"reify#forSome",forAll:o+"reify#forAll"},log:{implies:o+"log#implies"}}},function(t,e,r){var n=r(5);t.exports=!n((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(10);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,r){var n=r(169),i=r(170),o=r(171);t.exports=function(t){return n(t)||i(t)||o()}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(7),i=r(99),o=r(8),a=r(43),s=Object.defineProperty;e.f=n?s:function(t,e,r){if(o(t),e=a(e,!0),o(r),i)try{return s(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(60),i=r(20);t.exports=function(t){return n(i(t))}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(7),i=r(11),o=r(31);t.exports=n?function(t,e,r){return i.f(t,e,o(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(32),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e){function r(e){return t.exports=r=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},r(e)}t.exports=r},function(t,e,r){var n=r(4),i=r(14),o=r(13),a=r(62),s=r(63),u=r(24),c=u.get,f=u.enforce,l=String(String).split("String");(t.exports=function(t,e,r,s){var u=!!s&&!!s.unsafe,c=!!s&&!!s.enumerable,h=!!s&&!!s.noTargetGet;"function"==typeof r&&("string"!=typeof e||o(r,"name")||i(r,"name",e),f(r).source=l.join("string"==typeof e?e:"")),t!==n?(u?!h&&t[e]&&(c=!0):delete t[e],c?t[e]=r:i(t,e,r)):c?t[e]=r:a(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||s(this)}))},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can\'t call method on "+t);return t}},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(7),i=r(59),o=r(31),a=r(12),s=r(43),u=r(13),c=r(99),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=a(t),e=s(e,!0),c)try{return f(t,e)}catch(t){}if(u(t,e))return o(!i.f.call(t,e),t[e])}},function(t,e,r){"use strict";var n=r(55),i=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=l;var o=r(39);o.inherits=r(29);var a=r(138),s=r(95);o.inherits(l,a);for(var u=i(s.prototype),c=0;c<u.length;c++){var f=u[c];l.prototype[f]||(l.prototype[f]=s.prototype[f])}function l(t){if(!(this instanceof l))return new l(t);a.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||n.nextTick(p,this)}function p(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),l.prototype._destroy=function(t,e){this.push(null),this.end(),n.nextTick(e,t)}},function(t,e,r){var n,i,o,a=r(147),s=r(4),u=r(10),c=r(14),f=r(13),l=r(44),h=r(45),p=s.WeakMap;if(a){var d=new p,v=d.get,g=d.has,y=d.set;n=function(t,e){return y.call(d,t,e),e},i=function(t){return v.call(d,t)||{}},o=function(t){return g.call(d,t)}}else{var b=l("state");h[b]=!0,n=function(t,e){return c(t,b,e),e},i=function(t){return f(t,b)?t[b]:{}},o=function(t){return f(t,b)}}t.exports={set:n,get:i,has:o,enforce:function(t){return o(t)?i(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!u(e)||(r=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},function(t,e){t.exports=!1},function(t,e,r){var n=r(103),i=r(4),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(n[t])||o(i[t]):n[t]&&n[t][e]||i[t]&&i[t][e]}},function(t,e,r){var n=r(20);t.exports=function(t){return Object(n(t))}},function(t,e,r){var n=function(t){"use strict";var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},i=n.iterator||"@@iterator",o=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function s(t,e,r,n){var i=e&&e.prototype instanceof f?e:f,o=Object.create(i.prototype),a=new x(n||[]);return o._invoke=function(t,e,r){var n="suspendedStart";return function(i,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===i)throw o;return E()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var s=_(a,r);if(s){if(s===c)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var f=u(t,e,r);if("normal"===f.type){if(n=r.done?"completed":"suspendedYield",f.arg===c)continue;return{value:f.arg,done:r.done}}"throw"===f.type&&(n="completed",r.method="throw",r.arg=f.arg)}}}(t,r,a),o}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var c={};function f(){}function l(){}function h(){}var p={};p[i]=function(){return this};var d=Object.getPrototypeOf,v=d&&d(d(k([])));v&&v!==e&&r.call(v,i)&&(p=v);var g=h.prototype=f.prototype=Object.create(p);function y(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function b(t){var e;this._invoke=function(n,i){function o(){return new Promise((function(e,o){!function e(n,i,o,a){var s=u(t[n],t,i);if("throw"!==s.type){var c=s.arg,f=c.value;return f&&"object"==typeof f&&r.call(f,"__await")?Promise.resolve(f.__await).then((function(t){e("next",t,o,a)}),(function(t){e("throw",t,o,a)})):Promise.resolve(f).then((function(t){c.value=t,o(c)}),(function(t){return e("throw",t,o,a)}))}a(s.arg)}(n,i,e,o)}))}return e=e?e.then(o,o):o()}}function _(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,_(t,e),"throw"===e.method))return c;e.method="throw",e.arg=new TypeError("The iterator does not provide a \'throw\' method")}return c}var n=u(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,c;var i=n.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,c):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,c)}function m(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function w(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(m,this),this.reset(!0)}function k(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:E}}function E(){return{value:void 0,done:!0}}return l.prototype=g.constructor=h,h.constructor=l,h[a]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},y(b.prototype),b.prototype[o]=function(){return this},t.AsyncIterator=b,t.async=function(e,r,n,i){var o=new b(s(e,r,n,i));return t.isGeneratorFunction(r)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},y(g),g[a]="Generator",g[i]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=k,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var s=r.call(o,"catchLoc"),u=r.call(o,"finallyLoc");if(s&&u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,c):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),c},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),w(r),c}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;w(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:k(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),c}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e){function r(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n=r(71),i=r(60),o=r(27),a=r(15),s=r(112),u=[].push,c=function(t){var e=1==t,r=2==t,c=3==t,f=4==t,l=6==t,h=5==t||l;return function(p,d,v,g){for(var y,b,_=o(p),m=i(_),w=n(d,v,3),x=a(m.length),k=0,E=g||s,S=e?E(p,x):r?E(p,0):void 0;x>k;k++)if((h||k in m)&&(b=w(y=m[k],k,_),t))if(e)S[k]=b;else if(b)switch(t){case 3:return!0;case 5:return y;case 6:return k;case 2:u.call(S,y)}else if(f)return!1;return l?-1:c||f?f:S}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6)}},function(t,e){t.exports={}},function(t,e,r){"use strict";var n=r(2),i=r(53);n({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},function(t,e,r){"use strict";var n=r(5);t.exports=function(t,e){var r=[][t];return!r||!n((function(){r.call(null,e||function(){throw 1},1)}))}},function(t,e,r){"use strict";var n=r(2),i=r(33).map,o=r(5),a=r(54)("map"),s=a&&!o((function(){[].map.call({length:-1,0:1},(function(t){throw t}))}));n({target:"Array",proto:!0,forced:!a||!s},{map:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e){var r,n,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(r===setTimeout)return setTimeout(t,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(t){r=o}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(t){n=a}}();var u,c=[],f=!1,l=-1;function h(){f&&u&&(f=!1,u.length?c=u.concat(c):l=-1,c.length&&p())}function p(){if(!f){var t=s(h);f=!0;for(var e=c.length;e;){for(u=c,c=[];++l<e;)u&&u[l].run();l=-1,e=c.length}u=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new d(t,e)),1!==c.length||f||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){(function(t){function r(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===r(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===r(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===r(t)},e.isError=function(t){return"[object Error]"===r(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,r(92).Buffer)},function(t,e,r){var n=r(96),i=r(155);t.exports=function(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?i(t):e}},function(t,e,r){var n=r(80);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&n(t,e)}},function(t,e,r){var n=r(166),i=r(167),o=r(168);t.exports=function(t,e){return n(t)||i(t,e)||o()}},function(t,e,r){var n=r(10);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can\'t convert object to primitive value")}},function(t,e,r){var n=r(64),i=r(65),o=n("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},function(t,e){t.exports={}},function(t,e,r){var n=r(104),i=r(67).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){var n=r(19);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(104),i=r(67);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e,r){var n=r(11).f,i=r(13),o=r(3)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,r){"use strict";var n=r(12),i=r(113),o=r(34),a=r(24),s=r(114),u=a.set,c=a.getterFor("Array Iterator");t.exports=s(Array,"Array",(function(t,e){u(this,{type:"Array Iterator",target:n(t),index:0,kind:e})}),(function(){var t=c(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(t,e,r){var n=r(72),i=r(17),o=r(154);n||i(Object.prototype,"toString",o,{unsafe:!0})},function(t,e,r){"use strict";var n,i,o=r(73),a=r(119),s=RegExp.prototype.exec,u=String.prototype.replace,c=s,f=(n=/a/,i=/b*/g,s.call(n,"a"),s.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),l=a.UNSUPPORTED_Y||a.BROKEN_CARET,h=void 0!==/()??/.exec("")[1];(f||h||l)&&(c=function(t){var e,r,n,i,a=this,c=l&&a.sticky,p=o.call(a),d=a.source,v=0,g=t;return c&&(-1===(p=p.replace("y","")).indexOf("g")&&(p+="g"),g=String(t).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\\n"!==t[a.lastIndex-1])&&(d="(?: "+d+")",g=" "+g,v++),r=new RegExp("^(?:"+d+")",p)),h&&(r=new RegExp("^"+d+"$(?!\\\\s)",p)),f&&(e=a.lastIndex),n=s.call(c?r:a,g),c?n?(n.input=n.input.slice(v),n[0]=n[0].slice(v),n.index=a.lastIndex,a.lastIndex+=n[0].length):a.lastIndex=0:f&&n&&(a.lastIndex=a.global?n.index+n[0].length:e),h&&n&&n.length>1&&u.call(n[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)})),n}),t.exports=c},function(t,e,r){var n=r(5),i=r(3),o=r(83),a=i("species");t.exports=function(t){return o>=51||!n((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,r){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,r,n,i){if("function"!=typeof t)throw new TypeError(\'"callback" argument must be a function\');var o,a,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,r)}));case 3:return e.nextTick((function(){t.call(null,r,n)}));case 4:return e.nextTick((function(){t.call(null,r,n,i)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick((function(){t.apply(null,o)}))}}}:t.exports=e}).call(this,r(38))},function(t,e,r){var n=r(92),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function a(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(o(n,e),e.Buffer=a),o(i,a),a.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},a.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},function(t,e,r){var n=r(156);function i(e,r,o){return"undefined"!=typeof Reflect&&Reflect.get?t.exports=i=Reflect.get:t.exports=i=function(t,e,r){var i=n(t,e);if(i){var o=Object.getOwnPropertyDescriptor(i,e);return o.get?o.get.call(r):o.value}},i(e,r,o||e)}t.exports=i},function(t,e,r){(function(n){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(n++,"%c"===t&&(i=n))}),e.splice(i,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=r(172)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,r(38))},function(t,e,r){"use strict";var n={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!n.call({1:2},1);e.f=o?function(t){var e=i(this,t);return!!e&&e.enumerable}:n},function(t,e,r){var n=r(5),i=r(19),o="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},function(t,e,r){var n=r(4),i=r(10),o=n.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},function(t,e,r){var n=r(4),i=r(14);t.exports=function(t,e){try{i(n,t,e)}catch(r){n[t]=e}return e}},function(t,e,r){var n=r(100),i=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return i.call(t)}),t.exports=n.inspectSource},function(t,e,r){var n=r(25),i=r(100);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.1",mode:n?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+n).toString(36)}},function(t,e,r){var n=r(12),i=r(15),o=r(105),a=function(t){return function(e,r,a){var s,u=n(e),c=i(u.length),f=o(a,c);if(t&&r!=r){for(;c>f;)if((s=u[f++])!=s)return!0}else for(;c>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,r){var n=r(5),i=/#|\\.prototype\\./,o=function(t,e){var r=s[a(t)];return r==c||r!=u&&("function"==typeof e?n(e):!!e)},a=o.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=o.data={},u=o.NATIVE="N",c=o.POLYFILL="P";t.exports=o},function(t,e,r){var n=r(5);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(t,e,r){var n,i=r(8),o=r(108),a=r(67),s=r(45),u=r(109),c=r(61),f=r(44),l=f("IE_PROTO"),h=function(){},p=function(t){return"<script>"+t+"<\\/script>"},d=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;d=n?function(t){t.write(p("")),t.close();var e=t.parentWindow.Object;return t=null,e}(n):((e=c("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F);for(var r=a.length;r--;)delete d.prototype[a[r]];return d()};s[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(h.prototype=i(t),r=new h,h.prototype=null,r[l]=t):r=d(),void 0===e?r:o(r,e)}},function(t,e,r){var n=r(50);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e,r){var n={};n[r(3)("toStringTag")]="z",t.exports="[object z]"===String(n)},function(t,e,r){"use strict";var n=r(8);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){"use strict";var n=r(120).charAt,i=r(24),o=r(114),a=i.set,s=i.getterFor("String Iterator");o(String,"String",(function(t){a(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=s(this),r=e.string,i=e.index;return i>=r.length?{value:void 0,done:!0}:(t=n(r,i),e.index+=t.length,{value:t,done:!1})}))},function(t,e,r){"use strict";var n=r(76),i=r(8),o=r(15),a=r(20),s=r(77),u=r(78);n("match",1,(function(t,e,r){return[function(e){var r=a(this),n=null==e?void 0:e[t];return void 0!==n?n.call(e,r):new RegExp(e)[t](String(r))},function(t){var n=r(e,t,this);if(n.done)return n.value;var a=i(t),c=String(this);if(!a.global)return u(a,c);var f=a.unicode;a.lastIndex=0;for(var l,h=[],p=0;null!==(l=u(a,c));){var d=String(l[0]);h[p]=d,""===d&&(a.lastIndex=s(c,o(a.lastIndex),f)),p++}return 0===p?null:h}]}))},function(t,e,r){"use strict";var n=r(17),i=r(5),o=r(3),a=r(53),s=r(14),u=o("species"),c=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f="$0"==="a".replace(/./,"$0"),l=!i((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));t.exports=function(t,e,r,h){var p=o(t),d=!i((function(){var e={};return e[p]=function(){return 7},7!=""[t](e)})),v=d&&!i((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[u]=function(){return r},r.flags="",r[p]=/./[p]),r.exec=function(){return e=!0,null},r[p](""),!e}));if(!d||!v||"replace"===t&&(!c||!f)||"split"===t&&!l){var g=/./[p],y=r(p,""[t],(function(t,e,r,n,i){return e.exec===a?d&&!i?{done:!0,value:g.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),{REPLACE_KEEPS_$0:f}),b=y[0],_=y[1];n(String.prototype,t,b),n(RegExp.prototype,p,2==e?function(t,e){return _.call(t,this,e)}:function(t){return _.call(t,this)})}h&&s(RegExp.prototype[p],"sham",!0)}},function(t,e,r){"use strict";var n=r(120).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n=r(19),i=r(53);t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var o=r.call(t,e);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==n(t))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,r){var n=r(4),i=r(121),o=r(51),a=r(14),s=r(3),u=s("iterator"),c=s("toStringTag"),f=o.values;for(var l in i){var h=n[l],p=h&&h.prototype;if(p){if(p[u]!==f)try{a(p,u,f)}catch(t){p[u]=f}if(p[c]||a(p,c,l),i[l])for(var d in o)if(p[d]!==o[d])try{a(p,d,o[d])}catch(t){p[d]=o[d]}}}},function(t,e){function r(e,n){return t.exports=r=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},r(e,n)}t.exports=r},function(t,e,r){"use strict";var n=r(2),i=r(5),o=r(47),a=r(10),s=r(27),u=r(15),c=r(82),f=r(112),l=r(54),h=r(3),p=r(83),d=h("isConcatSpreadable"),v=p>=51||!i((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),g=l("concat"),y=function(t){if(!a(t))return!1;var e=t[d];return void 0!==e?!!e:o(t)};n({target:"Array",proto:!0,forced:!v||!g},{concat:function(t){var e,r,n,i,o,a=s(this),l=f(a,0),h=0;for(e=-1,n=arguments.length;e<n;e++)if(o=-1===e?a:arguments[e],y(o)){if(h+(i=u(o.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(r=0;r<i;r++,h++)r in o&&c(l,h,o[r])}else{if(h>=9007199254740991)throw TypeError("Maximum allowed index exceeded");c(l,h++,o)}return l.length=h,l}})},function(t,e,r){"use strict";var n=r(43),i=r(11),o=r(31);t.exports=function(t,e,r){var a=n(e);a in t?i.f(t,a,o(0,r)):t[a]=r}},function(t,e,r){var n,i,o=r(4),a=r(122),s=o.process,u=s&&s.versions,c=u&&u.v8;c?i=(n=c.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\\/(\\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\\/(\\d+)/))&&(i=n[1]),t.exports=i&&+i},function(t,e,r){"use strict";var n=r(2),i=r(33).filter,o=r(5),a=r(54)("filter"),s=a&&!o((function(){[].filter.call({length:-1,0:1},(function(t){throw t}))}));n({target:"Array",proto:!0,forced:!a||!s},{filter:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(2),i=r(123);n({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(t,e,r){"use strict";var n=r(2),i=r(66).includes,o=r(113);n({target:"Array",proto:!0},{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o("includes")},function(t,e,r){var n=r(7),i=r(11).f,o=Function.prototype,a=o.toString,s=/^\\s*function ([^ (]*)/;n&&!("name"in o)&&i(o,"name",{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return""}}})},function(t,e,r){var n=r(10),i=r(19),o=r(3)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e,r){"use strict";var n=r(76),i=r(8),o=r(27),a=r(15),s=r(32),u=r(20),c=r(77),f=r(78),l=Math.max,h=Math.min,p=Math.floor,d=/\\$([$&\'`]|\\d\\d?|<[^>]*>)/g,v=/\\$([$&\'`]|\\d\\d?)/g;n("replace",2,(function(t,e,r,n){return[function(r,n){var i=u(this),o=null==r?void 0:r[t];return void 0!==o?o.call(r,i,n):e.call(String(i),r,n)},function(t,o){if(n.REPLACE_KEEPS_$0||"string"==typeof o&&-1===o.indexOf("$0")){var u=r(e,t,this,o);if(u.done)return u.value}var p=i(t),d=String(this),v="function"==typeof o;v||(o=String(o));var y=p.global;if(y){var b=p.unicode;p.lastIndex=0}for(var _=[];;){var m=f(p,d);if(null===m)break;if(_.push(m),!y)break;""===String(m[0])&&(p.lastIndex=c(d,a(p.lastIndex),b))}for(var w,x="",k=0,E=0;E<_.length;E++){m=_[E];for(var S=String(m[0]),j=l(h(s(m.index),d.length),0),R=[],C=1;C<m.length;C++)R.push(void 0===(w=m[C])?w:String(w));var I=m.groups;if(v){var O=[S].concat(R,j,d);void 0!==I&&O.push(I);var T=String(o.apply(void 0,O))}else T=g(S,d,j,R,I,o);j>=k&&(x+=d.slice(k,j)+T,k=j+S.length)}return x+d.slice(k)}];function g(t,r,n,i,a,s){var u=n+t.length,c=i.length,f=v;return void 0!==a&&(a=o(a),f=d),e.call(s,f,(function(e,o){var s;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return r.slice(0,n);case"\'":return r.slice(u);case"<":s=a[o.slice(1,-1)];break;default:var f=+o;if(0===f)return e;if(f>c){var l=p(f/10);return 0===l?e:l<=c?void 0===i[l-1]?o.charAt(1):i[l-1]+o.charAt(1):e}s=i[f-1]}return void 0===s?"":s}))}}))},function(t,e,r){var n=r(4),i=r(121),o=r(123),a=r(14);for(var s in i){var u=n[s],c=u&&u.prototype;if(c&&c.forEach!==o)try{a(c,"forEach",o)}catch(t){c.forEach=o}}},function(t,e,r){"use strict";var n,i,o,a,s=r(2),u=r(25),c=r(4),f=r(26),l=r(177),h=r(17),p=r(178),d=r(49),v=r(125),g=r(10),y=r(50),b=r(179),_=r(19),m=r(63),w=r(180),x=r(184),k=r(132),E=r(133).set,S=r(185),j=r(186),R=r(187),C=r(135),I=r(188),O=r(24),T=r(68),P=r(3),A=r(83),L=P("species"),F="Promise",M=O.get,N=O.set,B=O.getterFor(F),D=l,U=c.TypeError,q=c.document,G=c.process,W=f("fetch"),z=C.f,Y=z,Q="process"==_(G),$=!!(q&&q.createEvent&&c.dispatchEvent),H=T(F,(function(){if(!(m(D)!==String(D))){if(66===A)return!0;if(!Q&&"function"!=typeof PromiseRejectionEvent)return!0}if(u&&!D.prototype.finally)return!0;if(A>=51&&/native code/.test(D))return!1;var t=D.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[L]=e,!(t.then((function(){}))instanceof e)})),K=H||!x((function(t){D.all(t).catch((function(){}))})),V=function(t){var e;return!(!g(t)||"function"!=typeof(e=t.then))&&e},Z=function(t,e,r){if(!e.notified){e.notified=!0;var n=e.reactions;S((function(){for(var i=e.value,o=1==e.state,a=0;n.length>a;){var s,u,c,f=n[a++],l=o?f.ok:f.fail,h=f.resolve,p=f.reject,d=f.domain;try{l?(o||(2===e.rejection&&et(t,e),e.rejection=1),!0===l?s=i:(d&&d.enter(),s=l(i),d&&(d.exit(),c=!0)),s===f.promise?p(U("Promise-chain cycle")):(u=V(s))?u.call(s,h,p):h(s)):p(i)}catch(t){d&&!c&&d.exit(),p(t)}}e.reactions=[],e.notified=!1,r&&!e.rejection&&X(t,e)}))}},J=function(t,e,r){var n,i;$?((n=q.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),c.dispatchEvent(n)):n={promise:e,reason:r},(i=c["on"+t])?i(n):"unhandledrejection"===t&&R("Unhandled promise rejection",r)},X=function(t,e){E.call(c,(function(){var r,n=e.value;if(tt(e)&&(r=I((function(){Q?G.emit("unhandledRejection",n,t):J("unhandledrejection",t,n)})),e.rejection=Q||tt(e)?2:1,r.error))throw r.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){E.call(c,(function(){Q?G.emit("rejectionHandled",t):J("rejectionhandled",t,e.value)}))},rt=function(t,e,r,n){return function(i){t(e,r,i,n)}},nt=function(t,e,r,n){e.done||(e.done=!0,n&&(e=n),e.value=r,e.state=2,Z(t,e,!0))},it=function(t,e,r,n){if(!e.done){e.done=!0,n&&(e=n);try{if(t===r)throw U("Promise can\'t be resolved itself");var i=V(r);i?S((function(){var n={done:!1};try{i.call(r,rt(it,t,n,e),rt(nt,t,n,e))}catch(r){nt(t,n,r,e)}})):(e.value=r,e.state=1,Z(t,e,!1))}catch(r){nt(t,{done:!1},r,e)}}};H&&(D=function(t){b(this,D,F),y(t),n.call(this);var e=M(this);try{t(rt(it,this,e),rt(nt,this,e))}catch(t){nt(this,e,t)}},(n=function(t){N(this,{type:F,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(D.prototype,{then:function(t,e){var r=B(this),n=z(k(this,D));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=Q?G.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&Z(this,r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new n,e=M(t);this.promise=t,this.resolve=rt(it,t,e),this.reject=rt(nt,t,e)},C.f=z=function(t){return t===D||t===o?new i(t):Y(t)},u||"function"!=typeof l||(a=l.prototype.then,h(l.prototype,"then",(function(t,e){var r=this;return new D((function(t,e){a.call(r,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof W&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return j(D,W.apply(c,arguments))}}))),s({global:!0,wrap:!0,forced:H},{Promise:D}),d(D,F,!1,!0),v(F),o=f(F),s({target:F,stat:!0,forced:H},{reject:function(t){var e=z(this);return e.reject.call(void 0,t),e.promise}}),s({target:F,stat:!0,forced:u||H},{resolve:function(t){return j(u&&this===o?D:this,t)}}),s({target:F,stat:!0,forced:K},{all:function(t){var e=this,r=z(e),n=r.resolve,i=r.reject,o=I((function(){var r=y(e.resolve),o=[],a=0,s=1;w(t,(function(t){var u=a++,c=!1;o.push(void 0),s++,r.call(e,t).then((function(t){c||(c=!0,o[u]=t,--s||n(o))}),i)})),--s||n(o)}));return o.error&&i(o.value),r.promise},race:function(t){var e=this,r=z(e),n=r.reject,i=I((function(){var i=y(e.resolve);w(t,(function(t){i.call(e,t).then(r.resolve,n)}))}));return i.error&&n(i.value),r.promise}})},function(t,e,r){"use strict";(function(t){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\nvar n=r(190),i=r(191),o=r(137);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError(\'"value" argument must not be a number\');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("\'offset\' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("\'length\' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=h(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError(\'"encoding" must be a valid string encoding\');var n=0|d(e,r),i=(t=s(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|p(e.length);return 0===(t=s(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?s(t,0):h(t,e);if("Buffer"===e.type&&o(e.data))return h(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError(\'"size" argument must be a number\');if(t<0)throw new RangeError(\'"size" argument must not be negative\')}function l(t,e){if(f(e),t=s(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function h(t,e){var r=e.length<0?0:0|p(e.length);t=s(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(t).length;default:if(n)return U(t).length;e=(""+e).toLowerCase(),n=!0}}function v(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return I(this,e,r);case"utf8":case"utf-8":return j(this,e,r);case"ascii":return R(this,e,r);case"latin1":case"binary":return C(this,e,r);case"base64":return S(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function g(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):b(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function b(t,e,r,n,i){var o,a=1,s=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,r/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var f=-1;for(o=r;o<s;o++)if(c(t,o)===c(e,-1===f?0:o-f)){if(-1===f&&(f=o),o-f+1===u)return f*a}else-1!==f&&(o-=o-f),f=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){for(var l=!0,h=0;h<u;h++)if(c(t,o+h)!==c(e,h)){l=!1;break}if(l)return o}return-1}function _(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[r+a]=s}return a}function m(t,e,r,n){return G(U(e,t.length-r),t,r,n)}function w(t,e,r,n){return G(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function x(t,e,r,n){return w(t,e,r,n)}function k(t,e,r,n){return G(q(e),t,r,n)}function E(t,e,r,n){return G(function(t,e){for(var r,n,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)r=t.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function S(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function j(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,a,s,u,c=t[i],f=null,l=c>239?4:c>223?3:c>191?2:1;if(i+l<=r)switch(l){case 1:c<128&&(f=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(f=u);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(u=(15&c)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(f=u);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(f=u)}null===f?(f=65533,l=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),i+=l}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,n){return f(e),e<=0?s(t,e):void 0!==r?"string"==typeof n?s(t,e).fill(r,n):s(t,e).fill(r):s(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return l(null,t)},u.allocUnsafeSlow=function(t){return l(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError(\'"list" argument must be an Array of Buffers\');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var a=t[r];if(!u.isBuffer(a))throw new TypeError(\'"list" argument must be an Array of Buffers\');a.copy(n,i),i+=a.length}return n},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?j(this,0,t):v.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,n,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(e>>>=0),s=Math.min(o,a),c=this.slice(n,i),f=t.slice(e,r),l=0;l<s;++l)if(c[l]!==f[l]){o=c[l],a=f[l];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return _(this,t,e,r);case"utf8":case"utf-8":return m(this,t,e,r);case"ascii":return w(this,t,e,r);case"latin1":case"binary":return x(this,t,e,r);case"base64":return k(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function C(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function I(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=D(t[o]);return i}function O(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function T(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function P(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError(\'"buffer" argument must be a Buffer instance\');if(e>i||e<o)throw new RangeError(\'"value" argument is out of bounds\');if(r+n>t.length)throw new RangeError("Index out of range")}function A(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function L(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function F(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function M(t,e,r,n,o){return o||F(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function N(t,e,r,n,o){return o||F(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;r=new u(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||T(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||T(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUInt8=function(t,e){return e||T(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||T(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||T(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||T(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||T(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||T(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||T(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||T(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||T(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||T(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||T(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||T(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||T(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||T(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||P(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||P(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):A(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):A(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);P(this,t,e,r,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<r&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);P(this,t,e,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):A(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):A(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||P(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return M(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return M(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return N(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return N(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,o=n-r;if(this===t&&r<e&&e<n)for(i=o-1;i>=0;--i)t[i+e]=this[i+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+o),e);return o},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var o;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(o=e;o<r;++o)this[o]=t;else{var a=u.isBuffer(t)?t:U(new u(t,n).toString()),s=a.length;for(o=0;o<r-e;++o)this[o+e]=a[o%s]}return this};var B=/[^+\\/0-9A-Za-z-_]/g;function D(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],a=0;a<n;++a){if((r=t.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function q(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\\s+|\\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function G(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(21))},function(t,e,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}t.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var u=10;function c(t){if("function"!=typeof t)throw new TypeError(\'The "listener" argument must be of type Function. Received type \'+typeof t)}function f(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function l(t,e,r,n){var i,o,a,s;if(c(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),a=o[e]),void 0===a)a=o[e]=r,++t._eventsCount;else if("function"==typeof a?a=o[e]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=f(t))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return t}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},i=h.bind(n);return i.listener=r,n.wrapFn=i,i}function d(t,e,r){var n=t._events;if(void 0===n)return[];var i=n[e];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(i):g(i,i.length)}function v(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function g(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError(\'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received \'+t+".");u=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError(\'The value of "n" is out of range. It must be a non-negative number. Received \'+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return f(this)},s.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var a;if(e.length>0&&(a=e[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var c=u.length,f=g(u,c);for(r=0;r<c;++r)o(f[r],this,e)}return!0},s.prototype.addListener=function(t,e){return l(this,t,e,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(t,e){return l(this,t,e,!0)},s.prototype.once=function(t,e){return c(e),this.on(t,p(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){return c(e),this.prependListener(t,p(this,t,e)),this},s.prototype.removeListener=function(t,e){var r,n,i,o,a;if(c(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,i),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,a||e)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},s.prototype.listeners=function(t){return d(this,t,!0)},s.prototype.rawListeners=function(t){return d(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):v.call(t,e)},s.prototype.listenerCount=v,s.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(t,e,r){(e=t.exports=r(138)).Stream=e,e.Readable=e,e.Writable=r(95),e.Duplex=r(23),e.Transform=r(142),e.PassThrough=r(196)},function(t,e,r){"use strict";(function(e,n,i){var o=r(55);function a(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;t.entry=null;for(;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=b;var s,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?n:o.nextTick;b.WritableState=y;var c=r(39);c.inherits=r(29);var f={deprecate:r(195)},l=r(139),h=r(56).Buffer,p=i.Uint8Array||function(){};var d,v=r(140);function g(){}function y(t,e){s=s||r(23),t=t||{};var n=e instanceof s;this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,c=t.writableHighWaterMark,f=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(c||0===c)?c:f,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var l=!1===t.decodeStrings;this.decodeStrings=!l,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,i=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,i){--e.pendingcb,r?(o.nextTick(i,n),o.nextTick(E,t,e),t._writableState.errorEmitted=!0,t.emit("error",n)):(i(n),t._writableState.errorEmitted=!0,t.emit("error",n),E(t,e))}(t,r,n,e,i);else{var a=x(r);a||r.corked||r.bufferProcessing||!r.bufferedRequest||w(t,r),n?u(m,t,r,a,i):m(t,r,a,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function b(t){if(s=s||r(23),!(d.call(b,this)||this instanceof s))return new b(t);this._writableState=new y(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),l.call(this)}function _(t,e,r,n,i,o,a){e.writelen=n,e.writecb=a,e.writing=!0,e.sync=!0,r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function m(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),E(t,e)}function w(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),o=e.corkedRequestsFree;o.entry=r;for(var s=0,u=!0;r;)i[s]=r,r.isBuf||(u=!1),r=r.next,s+=1;i.allBuffers=u,_(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new a(e),e.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,f=r.encoding,l=r.callback;if(_(t,e,!1,e.objectMode?1:c.length,c,f,l),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function x(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function k(t,e){t._final((function(r){e.pendingcb--,r&&t.emit("error",r),e.prefinished=!0,t.emit("prefinish"),E(t,e)}))}function E(t,e){var r=x(e);return r&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(k,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),r}c.inherits(b,l),y.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(y.prototype,"buffer",{get:f.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(d=Function.prototype[Symbol.hasInstance],Object.defineProperty(b,Symbol.hasInstance,{value:function(t){return!!d.call(this,t)||this===b&&(t&&t._writableState instanceof y)}})):d=function(t){return t instanceof this},b.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},b.prototype.write=function(t,e,r){var n,i=this._writableState,a=!1,s=!i.objectMode&&(n=t,h.isBuffer(n)||n instanceof p);return s&&!h.isBuffer(t)&&(t=function(t){return h.from(t)}(t)),"function"==typeof e&&(r=e,e=null),s?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof r&&(r=g),i.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),o.nextTick(e,r)}(this,r):(s||function(t,e,r,n){var i=!0,a=!1;return null===r?a=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(t.emit("error",a),o.nextTick(n,a),i=!1),i}(this,i,t,r))&&(i.pendingcb++,a=function(t,e,r,n,i,o){if(!r){var a=function(t,e,r){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=h.from(e,r));return e}(e,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=e.objectMode?1:n.length;e.length+=s;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else _(t,e,!1,s,n,i,o);return u}(this,i,s,t,e,r)),a},b.prototype.cork=function(){this._writableState.corked++},b.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||w(this,t))},b.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(b.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),b.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"))},b.prototype._writev=null,b.prototype.end=function(t,e,r){var n=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(t,e,r){e.ending=!0,E(t,e),r&&(e.finished?o.nextTick(r):t.once("finish",r));e.ended=!0,t.writable=!1}(this,n,r)},Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),b.prototype.destroy=v.destroy,b.prototype._undestroy=v.undestroy,b.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,r(38),r(136).setImmediate,r(21))},function(t,e){function r(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=r=function(t){return typeof t}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(e)}t.exports=r},function(t,e,r){var n=r(16),i=r(80),o=r(202),a=r(203);function s(e){var r="function"==typeof Map?new Map:void 0;return t.exports=s=function(t){if(null===t||!o(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,e)}function e(){return a(t,arguments,n(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),i(e,t)},s(e)}t.exports=s},function(t,e,r){"use strict";var n=r(2),i=r(4),o=r(26),a=r(25),s=r(7),u=r(69),c=r(107),f=r(5),l=r(13),h=r(47),p=r(10),d=r(8),v=r(27),g=r(12),y=r(43),b=r(31),_=r(70),m=r(48),w=r(46),x=r(148),k=r(106),E=r(22),S=r(11),j=r(59),R=r(14),C=r(17),I=r(64),O=r(44),T=r(45),P=r(65),A=r(3),L=r(110),F=r(111),M=r(49),N=r(24),B=r(33).forEach,D=O("hidden"),U=A("toPrimitive"),q=N.set,G=N.getterFor("Symbol"),W=Object.prototype,z=i.Symbol,Y=o("JSON","stringify"),Q=E.f,$=S.f,H=x.f,K=j.f,V=I("symbols"),Z=I("op-symbols"),J=I("string-to-symbol-registry"),X=I("symbol-to-string-registry"),tt=I("wks"),et=i.QObject,rt=!et||!et.prototype||!et.prototype.findChild,nt=s&&f((function(){return 7!=_($({},"a",{get:function(){return $(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=Q(W,e);n&&delete W[e],$(t,e,r),n&&t!==W&&$(W,e,n)}:$,it=function(t,e){var r=V[t]=_(z.prototype);return q(r,{type:"Symbol",tag:t,description:e}),s||(r.description=e),r},ot=c?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof z},at=function(t,e,r){t===W&&at(Z,e,r),d(t);var n=y(e,!0);return d(r),l(V,n)?(r.enumerable?(l(t,D)&&t[D][n]&&(t[D][n]=!1),r=_(r,{enumerable:b(0,!1)})):(l(t,D)||$(t,D,b(1,{})),t[D][n]=!0),nt(t,n,r)):$(t,n,r)},st=function(t,e){d(t);var r=g(e),n=m(r).concat(lt(r));return B(n,(function(e){s&&!ut.call(r,e)||at(t,e,r[e])})),t},ut=function(t){var e=y(t,!0),r=K.call(this,e);return!(this===W&&l(V,e)&&!l(Z,e))&&(!(r||!l(this,e)||!l(V,e)||l(this,D)&&this[D][e])||r)},ct=function(t,e){var r=g(t),n=y(e,!0);if(r!==W||!l(V,n)||l(Z,n)){var i=Q(r,n);return!i||!l(V,n)||l(r,D)&&r[D][n]||(i.enumerable=!0),i}},ft=function(t){var e=H(g(t)),r=[];return B(e,(function(t){l(V,t)||l(T,t)||r.push(t)})),r},lt=function(t){var e=t===W,r=H(e?Z:g(t)),n=[];return B(r,(function(t){!l(V,t)||e&&!l(W,t)||n.push(V[t])})),n};(u||(C((z=function(){if(this instanceof z)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=P(t),r=function(t){this===W&&r.call(Z,t),l(this,D)&&l(this[D],e)&&(this[D][e]=!1),nt(this,e,b(1,t))};return s&&rt&&nt(W,e,{configurable:!0,set:r}),it(e,t)}).prototype,"toString",(function(){return G(this).tag})),C(z,"withoutSetter",(function(t){return it(P(t),t)})),j.f=ut,S.f=at,E.f=ct,w.f=x.f=ft,k.f=lt,L.f=function(t){return it(A(t),t)},s&&($(z.prototype,"description",{configurable:!0,get:function(){return G(this).description}}),a||C(W,"propertyIsEnumerable",ut,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:z}),B(m(tt),(function(t){F(t)})),n({target:"Symbol",stat:!0,forced:!u},{for:function(t){var e=String(t);if(l(J,e))return J[e];var r=z(e);return J[e]=r,X[r]=e,r},keyFor:function(t){if(!ot(t))throw TypeError(t+" is not a symbol");if(l(X,t))return X[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!s},{create:function(t,e){return void 0===e?_(t):st(_(t),e)},defineProperty:at,defineProperties:st,getOwnPropertyDescriptor:ct}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:ft,getOwnPropertySymbols:lt}),n({target:"Object",stat:!0,forced:f((function(){k.f(1)}))},{getOwnPropertySymbols:function(t){return k.f(v(t))}}),Y)&&n({target:"JSON",stat:!0,forced:!u||f((function(){var t=z();return"[null]"!=Y([t])||"{}"!=Y({a:t})||"{}"!=Y(Object(t))}))},{stringify:function(t,e,r){for(var n,i=[t],o=1;arguments.length>o;)i.push(arguments[o++]);if(n=e,(p(e)||void 0!==t)&&!ot(t))return h(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!ot(e))return e}),i[1]=e,Y.apply(null,i)}});z.prototype[U]||R(z.prototype,U,z.prototype.valueOf),M(z,"Symbol"),T[D]=!0},function(t,e,r){var n=r(7),i=r(5),o=r(61);t.exports=!n&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(4),i=r(62),o=n["__core-js_shared__"]||i("__core-js_shared__",{});t.exports=o},function(t,e,r){var n=r(13),i=r(102),o=r(22),a=r(11);t.exports=function(t,e){for(var r=i(e),s=a.f,u=o.f,c=0;c<r.length;c++){var f=r[c];n(t,f)||s(t,f,u(e,f))}}},function(t,e,r){var n=r(26),i=r(46),o=r(106),a=r(8);t.exports=n("Reflect","ownKeys")||function(t){var e=i.f(a(t)),r=o.f;return r?e.concat(r(t)):e}},function(t,e,r){var n=r(4);t.exports=n},function(t,e,r){var n=r(13),i=r(12),o=r(66).indexOf,a=r(45);t.exports=function(t,e){var r,s=i(t),u=0,c=[];for(r in s)!n(a,r)&&n(s,r)&&c.push(r);for(;e.length>u;)n(s,r=e[u++])&&(~o(c,r)||c.push(r));return c}},function(t,e,r){var n=r(32),i=Math.max,o=Math.min;t.exports=function(t,e){var r=n(t);return r<0?i(r+e,0):o(r,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(69);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var n=r(7),i=r(11),o=r(8),a=r(48);t.exports=n?Object.defineProperties:function(t,e){o(t);for(var r,n=a(e),s=n.length,u=0;s>u;)i.f(t,r=n[u++],e[r]);return t}},function(t,e,r){var n=r(26);t.exports=n("document","documentElement")},function(t,e,r){var n=r(3);e.f=n},function(t,e,r){var n=r(103),i=r(13),o=r(110),a=r(11).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});i(e,t)||a(e,t,{value:o.f(t)})}},function(t,e,r){var n=r(10),i=r(47),o=r(3)("species");t.exports=function(t,e){var r;return i(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!i(r.prototype)?n(r)&&null===(r=r[o])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===e?0:e)}},function(t,e,r){var n=r(3),i=r(70),o=r(11),a=n("unscopables"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),t.exports=function(t){s[a][t]=!0}},function(t,e,r){"use strict";var n=r(2),i=r(151),o=r(116),a=r(117),s=r(49),u=r(14),c=r(17),f=r(3),l=r(25),h=r(34),p=r(115),d=p.IteratorPrototype,v=p.BUGGY_SAFARI_ITERATORS,g=f("iterator"),y=function(){return this};t.exports=function(t,e,r,f,p,b,_){i(r,e,f);var m,w,x,k=function(t){if(t===p&&C)return C;if(!v&&t in j)return j[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},E=e+" Iterator",S=!1,j=t.prototype,R=j[g]||j["@@iterator"]||p&&j[p],C=!v&&R||k(p),I="Array"==e&&j.entries||R;if(I&&(m=o(I.call(new t)),d!==Object.prototype&&m.next&&(l||o(m)===d||(a?a(m,d):"function"!=typeof m[g]&&u(m,g,y)),s(m,E,!0,!0),l&&(h[E]=y))),"values"==p&&R&&"values"!==R.name&&(S=!0,C=function(){return R.call(this)}),l&&!_||j[g]===C||u(j,g,C),h[e]=C,p)if(w={values:k("values"),keys:b?C:k("keys"),entries:k("entries")},_)for(x in w)(v||S||!(x in j))&&c(j,x,w[x]);else n({target:e,proto:!0,forced:v||S},w);return w}},function(t,e,r){"use strict";var n,i,o,a=r(116),s=r(14),u=r(13),c=r(3),f=r(25),l=c("iterator"),h=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(n=i):h=!0),null==n&&(n={}),f||u(n,l)||s(n,l,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:h}},function(t,e,r){var n=r(13),i=r(27),o=r(44),a=r(152),s=o("IE_PROTO"),u=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=i(t),n(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,r){var n=r(8),i=r(153);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,o){return n(r),i(o),e?t.call(r,o):r.__proto__=o,r}}():void 0)},function(t,e,r){var n=r(72),i=r(19),o=r(3)("toStringTag"),a="Arguments"==i(function(){return arguments}());t.exports=n?i:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?r:a?i(e):"Object"==(n=i(e))&&"function"==typeof e.callee?"Arguments":n}},function(t,e,r){"use strict";var n=r(5);function i(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=n((function(){var t=i("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=n((function(){var t=i("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,e,r){var n=r(32),i=r(20),o=function(t){return function(e,r){var o,a,s=String(i(e)),u=n(r),c=s.length;return u<0||u>=c?t?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):o:t?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}};t.exports={codeAt:o(!1),charAt:o(!0)}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,r){var n=r(26);t.exports=n("navigator","userAgent")||""},function(t,e,r){"use strict";var n=r(33).forEach,i=r(36);t.exports=i("forEach")?function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(t,e,r){var n=r(2),i=r(27),o=r(48);n({target:"Object",stat:!0,forced:r(5)((function(){o(1)}))},{keys:function(t){return o(i(t))}})},function(t,e,r){"use strict";var n=r(26),i=r(11),o=r(3),a=r(7),s=o("species");t.exports=function(t){var e=n(t),r=i.f;a&&e&&!e[s]&&r(e,s,{configurable:!0,get:function(){return this}})}},function(t,e,r){"use strict";var n,i=r(2),o=r(22).f,a=r(15),s=r(127),u=r(20),c=r(128),f=r(25),l="".endsWith,h=Math.min,p=c("endsWith");i({target:"String",proto:!0,forced:!!(f||p||(n=o(String.prototype,"endsWith"),!n||n.writable))&&!p},{endsWith:function(t){var e=String(u(this));s(t);var r=arguments.length>1?arguments[1]:void 0,n=a(e.length),i=void 0===r?n:h(a(r),n),o=String(t);return l?l.call(e,o,i):e.slice(i-o.length,i)===o}})},function(t,e,r){var n=r(88);t.exports=function(t){if(n(t))throw TypeError("The method doesn\'t accept regular expressions");return t}},function(t,e,r){var n=r(3)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},function(t,e,r){"use strict";var n=r(2),i=r(127),o=r(20);n({target:"String",proto:!0,forced:!r(128)("includes")},{includes:function(t){return!!~String(o(this)).indexOf(i(t),arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(2),i=r(175);n({target:"Array",proto:!0,forced:i!==[].lastIndexOf},{lastIndexOf:i})},function(t,e,r){"use strict";var n=r(2),i=r(10),o=r(47),a=r(105),s=r(15),u=r(12),c=r(82),f=r(54),l=r(3)("species"),h=[].slice,p=Math.max;n({target:"Array",proto:!0,forced:!f("slice")},{slice:function(t,e){var r,n,f,d=u(this),v=s(d.length),g=a(t,v),y=a(void 0===e?v:e,v);if(o(d)&&("function"!=typeof(r=d.constructor)||r!==Array&&!o(r.prototype)?i(r)&&null===(r=r[l])&&(r=void 0):r=void 0,r===Array||void 0===r))return h.call(d,g,y);for(n=new(void 0===r?Array:r)(p(y-g,0)),f=0;g<y;g++,f++)g in d&&c(n,f,d[g]);return n.length=f,n}})},function(t,e,r){var n=r(8),i=r(50),o=r(3)("species");t.exports=function(t,e){var r,a=n(t).constructor;return void 0===a||null==(r=n(a)[o])?e:i(r)}},function(t,e,r){var n,i,o,a=r(4),s=r(5),u=r(19),c=r(71),f=r(109),l=r(61),h=r(134),p=a.location,d=a.setImmediate,v=a.clearImmediate,g=a.process,y=a.MessageChannel,b=a.Dispatch,_=0,m={},w=function(t){if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},x=function(t){return function(){w(t)}},k=function(t){w(t.data)},E=function(t){a.postMessage(t+"",p.protocol+"//"+p.host)};d&&v||(d=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return m[++_]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(_),_},v=function(t){delete m[t]},"process"==u(g)?n=function(t){g.nextTick(x(t))}:b&&b.now?n=function(t){b.now(x(t))}:y&&!h?(o=(i=new y).port2,i.port1.onmessage=k,n=c(o.postMessage,o,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||s(E)?n="onreadystatechange"in l("script")?function(t){f.appendChild(l("script")).onreadystatechange=function(){f.removeChild(this),w(t)}}:function(t){setTimeout(x(t),0)}:(n=E,a.addEventListener("message",k,!1))),t.exports={set:d,clear:v}},function(t,e,r){var n=r(122);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(n)},function(t,e,r){"use strict";var n=r(50),i=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new i(t)}},function(t,e,r){(function(t){var n=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,n,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,n,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},r(189),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,r(21))},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";(function(e,n){var i=r(55);t.exports=_;var o,a=r(137);_.ReadableState=b;r(93).EventEmitter;var s=function(t,e){return t.listeners(e).length},u=r(139),c=r(56).Buffer,f=e.Uint8Array||function(){};var l=r(39);l.inherits=r(29);var h=r(192),p=void 0;p=h&&h.debuglog?h.debuglog("stream"):function(){};var d,v=r(193),g=r(140);l.inherits(_,u);var y=["error","close","destroy","pause","resume"];function b(t,e){t=t||{};var n=e instanceof(o=o||r(23));this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,a=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new v,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(d||(d=r(141).StringDecoder),this.decoder=new d(t.encoding),this.encoding=t.encoding)}function _(t){if(o=o||r(23),!(this instanceof _))return new _(t);this._readableState=new b(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function m(t,e,r,n,i){var o,a=t._readableState;null===e?(a.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,k(t)}(t,a)):(i||(o=function(t,e){var r;n=e,c.isBuffer(n)||n instanceof f||"string"==typeof e||void 0===e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var n;return r}(a,e)),o?t.emit("error",o):a.objectMode||e&&e.length>0?("string"==typeof e||a.objectMode||Object.getPrototypeOf(e)===c.prototype||(e=function(t){return c.from(t)}(e)),n?a.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):w(t,a,e,!0):a.ended?t.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!r?(e=a.decoder.write(e),a.objectMode||0!==e.length?w(t,a,e,!1):S(t,a)):w(t,a,e,!1))):n||(a.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(a)}function w(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&k(t)),S(t,e)}Object.defineProperty(_.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),_.prototype.destroy=g.destroy,_.prototype._undestroy=g.undestroy,_.prototype._destroy=function(t,e){this.push(null),e(t)},_.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=c.from(t,e),e=""),r=!0),m(this,t,e,!1,r)},_.prototype.unshift=function(t){return m(this,t,null,!0,!1)},_.prototype.isPaused=function(){return!1===this._readableState.flowing},_.prototype.setEncoding=function(t){return d||(d=r(141).StringDecoder),this._readableState.decoder=new d(t),this._readableState.encoding=t,this};function x(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=8388608?t=8388608:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function k(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(p("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(E,t):E(t))}function E(t){p("emit readable"),t.emit("readable"),I(t)}function S(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(j,t,e))}function j(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(p("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1}function R(t){p("readable nexttick read 0"),t.read(0)}function C(t,e){e.reading||(p("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),I(t),e.flowing&&!e.reading&&t.read(0)}function I(t){var e=t._readableState;for(p("flow",e.flowing);e.flowing&&null!==t.read(););}function O(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var n;t<e.head.data.length?(n=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):n=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,n=1,i=r.data;t-=i.length;for(;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0===(t-=a)){a===o.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(a));break}++n}return e.length-=n,i}(t,e):function(t,e){var r=c.allocUnsafe(t),n=e.head,i=1;n.data.copy(r),t-=n.data.length;for(;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(o.copy(r,r.length-t,0,a),0===(t-=a)){a===o.length?(++i,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(a));break}++i}return e.length-=i,r}(t,e);return n}(t,e.buffer,e.decoder),r);var r}function T(t){var e=t._readableState;if(e.length>0)throw new Error(\'"endReadable()" called on non-empty stream\');e.endEmitted||(e.ended=!0,i.nextTick(P,e,t))}function P(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function A(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}_.prototype.read=function(t){p("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return p("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?T(this):k(this),null;if(0===(t=x(t,e))&&e.ended)return 0===e.length&&T(this),null;var n,i=e.needReadable;return p("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&p("length less than watermark",i=!0),e.ended||e.reading?p("reading or ended",i=!1):i&&(p("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=x(r,e))),null===(n=t>0?O(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&T(this)),null!==n&&this.emit("data",n),n},_.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},_.prototype.pipe=function(t,e){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,p("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==n.stdout&&t!==n.stderr?f:_;function c(e,n){p("onunpipe"),e===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,p("cleanup"),t.removeListener("close",y),t.removeListener("finish",b),t.removeListener("drain",l),t.removeListener("error",g),t.removeListener("unpipe",c),r.removeListener("end",f),r.removeListener("end",_),r.removeListener("data",v),h=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||l())}function f(){p("onend"),t.end()}o.endEmitted?i.nextTick(u):r.once("end",u),t.on("unpipe",c);var l=function(t){return function(){var e=t._readableState;p("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,I(t))}}(r);t.on("drain",l);var h=!1;var d=!1;function v(e){p("ondata"),d=!1,!1!==t.write(e)||d||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==A(o.pipes,t))&&!h&&(p("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,d=!0),r.pause())}function g(e){p("onerror",e),_(),t.removeListener("error",g),0===s(t,"error")&&t.emit("error",e)}function y(){t.removeListener("finish",b),_()}function b(){p("onfinish"),t.removeListener("close",y),_()}function _(){p("unpipe"),r.unpipe(t)}return r.on("data",v),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?a(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",g),t.once("close",y),t.once("finish",b),t.emit("pipe",r),o.flowing||(p("pipe resume"),r.resume()),t},_.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var a=A(e.pipes,t);return-1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},_.prototype.on=function(t,e){var r=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&k(this):i.nextTick(R,this))}return r},_.prototype.addListener=_.prototype.on,_.prototype.resume=function(){var t=this._readableState;return t.flowing||(p("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(C,t,e))}(this,t)),this},_.prototype.pause=function(){return p("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(p("pause"),this._readableState.flowing=!1,this.emit("pause")),this},_.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(p("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){(p("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i)||(r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<y.length;o++)t.on(y[o],this.emit.bind(this,y[o]));return this._read=function(e){p("wrapped _read",e),n&&(n=!1,t.resume())},this},Object.defineProperty(_.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),_._fromList=O}).call(this,r(21),r(38))},function(t,e,r){t.exports=r(93).EventEmitter},function(t,e,r){"use strict";var n=r(55);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?(n.nextTick(i,r,t),r._writableState&&(r._writableState.errorEmitted=!0)):e&&e(t)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,r){"use strict";var n=r(56).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=f,this.end=l,e=3;break;default:return this.write=h,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function f(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function l(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function h(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=a(e[n]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=a(e[n]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=a(e[n]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,r){"use strict";t.exports=a;var n=r(23),i=r(39);function o(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function a(t){if(!(this instanceof a))return new a(t);n.call(this,t),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",s)}function s(){var t=this;"function"==typeof this._flush?this._flush((function(e,r){u(t,e,r)})):u(this,null,null)}function u(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=r(29),i.inherits(a,n),a.prototype.push=function(t,e){return this._transformState.needTransform=!1,n.prototype.push.call(this,t,e)},a.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},a.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},a.prototype._destroy=function(t,e){var r=this;n.prototype._destroy.call(this,t,(function(t){e(t),r.emit("close")}))}},function(t,e){t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},function(t,e){const r={acl:"http://www.w3.org/ns/auth/acl#",arg:"http://www.w3.org/ns/pim/arg#",cal:"http://www.w3.org/2002/12/cal/ical#",contact:"http://www.w3.org/2000/10/swap/pim/contact#",dc:"http://purl.org/dc/elements/1.1/",dct:"http://purl.org/dc/terms/",doap:"http://usefulinc.com/ns/doap#",foaf:"http://xmlns.com/foaf/0.1/",http:"http://www.w3.org/2007/ont/http#",httph:"http://www.w3.org/2007/ont/httph#",icalTZ:"http://www.w3.org/2002/12/cal/icaltzd#",ldp:"http://www.w3.org/ns/ldp#",link:"http://www.w3.org/2007/ont/link#",log:"http://www.w3.org/2000/10/swap/log#",meeting:"http://www.w3.org/ns/pim/meeting#",mo:"http://purl.org/ontology/mo/",owl:"http://www.w3.org/2002/07/owl#",pad:"http://www.w3.org/ns/pim/pad#",patch:"http://www.w3.org/ns/pim/patch#",qu:"http://www.w3.org/2000/10/swap/pim/qif#",trip:"http://www.w3.org/ns/pim/trip#",rdf:"http://www.w3.org/1999/02/22-rdf-syntax-ns#",rdfs:"http://www.w3.org/2000/01/rdf-schema#",rss:"http://purl.org/rss/1.0/",sched:"http://www.w3.org/ns/pim/schedule#",schema:"http:/schema.org/",sioc:"http://rdfs.org/sioc/ns#",solid:"http://www.w3.org/ns/solid/terms#",space:"http://www.w3.org/ns/pim/space#",stat:"http://www.w3.org/ns/posix/stat#",tab:"http://www.w3.org/2007/ont/link#",tabont:"http://www.w3.org/2007/ont/link#",ui:"http://www.w3.org/ns/ui#",vcard:"http://www.w3.org/2006/vcard/ns#",wf:"http://www.w3.org/2005/01/wf/flow#",xsd:"http://www.w3.org/2001/XMLSchema#"};t.exports=function(t={namedNode:t=>t}){const e={};for(const n in r){const i=r[n];e[n]=function(e=""){return t.namedNode(i+e)}}return e}},function(t,e,r){"use strict";(function(t,n){r.d(e,"a",(function(){return h}));var i=r(6);const{xsd:o}=i.a,{fromCharCode:a}=String;var s=/\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g,u={"\\\\":"\\\\","\'":"\'",\'"\':\'"\',n:"\\n",r:"\\r",t:"\\t",f:"\\f",b:"\\b",_:"_","~":"~",".":".","-":"-","!":"!",$:"$","&":"&","(":"(",")":")","*":"*","+":"+",",":",",";":";","=":"=","/":"/","?":"?","#":"#","@":"@","%":"%"},c=/[\\x00-\\x20<>\\\\"\\{\\}\\|\\^\\`]/,f={_iri:!0,_unescapedIri:!0,_simpleQuotedString:!0,_langcode:!0,_blank:!0,_newline:!0,_comment:!0,_whitespace:!0,_endOfFile:!0},l=/$0^/;class h{constructor(t){if(this._iri=/^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/,this._unescapedIri=/^<([^\\x00-\\x20<>\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/,this._simpleQuotedString=/^"([^"\\\\\\r\\n]*)"(?=[^"])/,this._simpleApostropheString=/^\'([^\'\\\\\\r\\n]*)\'(?=[^\'])/,this._langcode=/^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i,this._prefix=/^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/,this._prefixed=/^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}"\'<]))/,this._variable=/^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}"\'<])/,this._blank=/^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}"\'<]))/,this._number=/^[\\-+]?(?:\\d+\\.?\\d*([eE](?:[\\-\\+])?\\d+)|\\d*\\.?\\d+)(?=\\.?[,;:\\s#()\\[\\]\\{\\}"\'<])/,this._boolean=/^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}"\'<])/,this._keyword=/^@[a-z]+(?=[\\s#<:])/i,this._sparqlKeyword=/^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i,this._shortPredicates=/^a(?=[\\s()\\[\\]\\{\\}"\'<])/,this._newline=/^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/,this._comment=/#([^\\n\\r]*)/,this._whitespace=/^[ \\t]+/,this._endOfFile=/^(?:#[^\\n\\r]*)?$/,t=t||{},this._lineMode=!!t.lineMode)for(var e in this._n3Mode=!1,this)!(e in f)&&this[e]instanceof RegExp&&(this[e]=l);else this._n3Mode=!1!==t.n3;this._comments=!!t.comments,this._literalClosingPos=0}_tokenizeToEnd(t,e){for(var r=this._input,n=this._comments;;){for(var i,a;i=this._newline.exec(r);)n&&(a=this._comment.exec(i[0]))&&t(null,{line:this._line,type:"comment",value:a[1],prefix:""}),r=r.substr(i[0].length,r.length),this._line++;if(!i&&(i=this._whitespace.exec(r))&&(r=r.substr(i[0].length,r.length)),this._endOfFile.test(r))return e&&(n&&(a=this._comment.exec(r))&&t(null,{line:this._line,type:"comment",value:a[1],prefix:""}),t(r=null,{line:this._line,type:"eof",value:"",prefix:""})),this._input=r;var s=this._line,u="",f="",l="",h=r[0],p=null,d=0,v=!1;switch(h){case"^":if(r.length<3)break;if("^"!==r[1]){this._n3Mode&&(d=1,u="^");break}if(this._previousMarker="^^","<"!==(r=r.substr(2))[0]){v=!0;break}case"<":if(p=this._unescapedIri.exec(r))u="IRI",f=p[1];else if(p=this._iri.exec(r)){if(null===(f=this._unescape(p[1]))||c.test(f))return y(this);u="IRI"}else this._n3Mode&&r.length>1&&"="===r[1]&&(u="inverse",d=2,f=">");break;case"_":((p=this._blank.exec(r))||e&&(p=this._blank.exec(r+" ")))&&(u="blank",l="_",f=p[1]);break;case\'"\':if(p=this._simpleQuotedString.exec(r))f=p[1];else if(({value:f,matchLength:d}=this._parseLiteral(r)),null===f)return y(this);null===p&&0===d||(u="literal",this._literalClosingPos=0);break;case"\'":if(!this._lineMode){if(p=this._simpleApostropheString.exec(r))f=p[1];else if(({value:f,matchLength:d}=this._parseLiteral(r)),null===f)return y(this);null===p&&0===d||(u="literal",this._literalClosingPos=0)}break;case"?":this._n3Mode&&(p=this._variable.exec(r))&&(u="var",f=p[0]);break;case"@":"literal"===this._previousMarker&&(p=this._langcode.exec(r))?(u="langcode",f=p[1]):(p=this._keyword.exec(r))&&(u=p[0]);break;case".":if(1===r.length?e:r[1]<"0"||r[1]>"9"){u=".",d=1;break}case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"+":case"-":(p=this._number.exec(r)||e&&(p=this._number.exec(r+" ")))&&(u="literal",f=p[0],l=p[1]?o.double:/^[+\\-]?\\d+$/.test(p[0])?o.integer:o.decimal);break;case"B":case"b":case"p":case"P":case"G":case"g":(p=this._sparqlKeyword.exec(r))?u=p[0].toUpperCase():v=!0;break;case"f":case"t":(p=this._boolean.exec(r))?(u="literal",f=p[0],l=o.boolean):v=!0;break;case"a":(p=this._shortPredicates.exec(r))?(u="abbreviation",f="a"):v=!0;break;case"=":this._n3Mode&&r.length>1&&(u="abbreviation",">"!==r[1]?(d=1,f="="):(d=2,f=">"));break;case"!":if(!this._n3Mode)break;case",":case";":case"[":case"]":case"(":case")":case"{":case"}":this._lineMode||(d=1,u=h);break;default:v=!0}if(v&&("@prefix"!==this._previousMarker&&"PREFIX"!==this._previousMarker||!(p=this._prefix.exec(r))?((p=this._prefixed.exec(r))||e&&(p=this._prefixed.exec(r+" ")))&&(u="prefixed",l=p[1]||"",f=this._unescape(p[2])):(u="prefix",f=p[1]||"")),"^^"===this._previousMarker)switch(u){case"prefixed":u="type";break;case"IRI":u="typeIRI";break;default:u=""}if(!u)return e||!/^\'\'\'|^"""/.test(r)&&/\\n|\\r/.test(r)?y(this):this._input=r;var g={line:s,type:u,value:f,prefix:l};t(null,g),this.previousToken=g,this._previousMarker=u,r=r.substr(d||p[0].length,r.length)}function y(e){t(e._syntaxError(/^\\S*/.exec(r)[0]))}}_unescape(t){try{return t.replace(s,(function(t,e,r,n){var i;if(e){if(i=parseInt(e,16),isNaN(i))throw new Error;return a(i)}if(r){if(i=parseInt(r,16),isNaN(i))throw new Error;return i<=65535?a(i):a(55296+(i-=65536)/1024,56320+(1023&i))}var o=u[n];if(!o)throw new Error;return o}))}catch(t){return null}}_parseLiteral(t){if(t.length>=3){const e=t.match(/^(?:"""|"|\'\'\'|\'|)/)[0],r=e.length;let n=Math.max(this._literalClosingPos,r);for(;(n=t.indexOf(e,n))>0;){let e=0;for(;"\\\\"===t[n-e-1];)e++;if(e%2==0){const e=t.substring(r,n),i=e.split(/\\r\\n|\\r|\\n/).length-1,o=n+r;if(1===r&&0!==i||3===r&&this._lineMode)break;return this._line+=i,{value:this._unescape(e),matchLength:o}}n++}this._literalClosingPos=t.length-r+1}return{value:"",matchLength:0}}_syntaxError(t){this._input=null;var e=new Error(\'Unexpected "\'+t+\'" on line \'+this._line+".");return e.context={token:void 0,line:this._line,previousToken:this.previousToken},e}tokenize(e,r){var i=this;if(this._line=1,"string"==typeof e){if(this._input=e,"function"!=typeof r){var o,a=[];if(this._tokenizeToEnd((function(t,e){t?o=t:a.push(e)}),!0),o)throw o;return a}t((function(){i._tokenizeToEnd(r,!0)}))}else this._input="",this._pendingBuffer=null,"function"==typeof e.setEncoding&&e.setEncoding("utf8"),e.on("data",(function(t){null!==i._input&&0!==t.length&&(i._pendingBuffer&&(t=n.concat([i._pendingBuffer,t]),i._pendingBuffer=null),128&t[t.length-1]?i._pendingBuffer=t:(i._input+=t,i._tokenizeToEnd(r,!1)))})),e.on("end",(function(){null!==i._input&&i._tokenizeToEnd(r,!0)})),e.on("error",r)}}}).call(this,r(136).setImmediate,r(92).Buffer)},function(t,e,r){t.exports=i;var n=r(93).EventEmitter;function i(){n.call(this)}r(29)(i,n),i.Readable=r(94),i.Writable=r(197),i.Duplex=r(198),i.Transform=r(199),i.PassThrough=r(200),i.Stream=i,i.prototype.pipe=function(t,e){var r=this;function i(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(r.on("end",s),r.on("close",u));var a=!1;function s(){a||(a=!0,t.end())}function u(){a||(a=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(f(),0===n.listenerCount(this,"error"))throw t}function f(){r.removeListener("data",i),t.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",u),r.removeListener("error",c),t.removeListener("error",c),r.removeListener("end",f),r.removeListener("close",f),t.removeListener("close",f)}return r.on("error",c),t.on("error",c),r.on("end",f),r.on("close",f),t.on("close",f),t.emit("pipe",r),t}},function(t,e,r){var n=r(4),i=r(63),o=n.WeakMap;t.exports="function"==typeof o&&/native code/.test(i(o))},function(t,e,r){var n=r(12),i=r(46).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(n(t))}},function(t,e,r){"use strict";var n=r(2),i=r(7),o=r(4),a=r(13),s=r(10),u=r(11).f,c=r(101),f=o.Symbol;if(i&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var l={},h=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof h?new f(t):void 0===t?f():f(t);return""===t&&(l[e]=!0),e};c(h,f);var p=h.prototype=f.prototype;p.constructor=h;var d=p.toString,v="Symbol(test)"==String(f("test")),g=/^Symbol\\((.*)\\)[^)]+$/;u(p,"description",{configurable:!0,get:function(){var t=s(this)?this.valueOf():this,e=d.call(t);if(a(l,t))return"";var r=v?e.slice(7,-1):e.replace(g,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:h})}},function(t,e,r){r(111)("iterator")},function(t,e,r){"use strict";var n=r(115).IteratorPrototype,i=r(70),o=r(31),a=r(49),s=r(34),u=function(){return this};t.exports=function(t,e,r){var c=e+" Iterator";return t.prototype=i(n,{next:o(1,r)}),a(t,c,!1,!0),s[c]=u,t}},function(t,e,r){var n=r(5);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,r){var n=r(10);t.exports=function(t){if(!n(t)&&null!==t)throw TypeError("Can\'t set "+String(t)+" as a prototype");return t}},function(t,e,r){"use strict";var n=r(72),i=r(118);t.exports=n?{}.toString:function(){return"[object "+i(this)+"]"}},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return t}},function(t,e,r){var n=r(16);t.exports=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=n(t)););return t}},function(t,e,r){var n=r(2),i=r(7);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:r(108)})},function(t,e,r){var n=r(2),i=r(7);n({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:r(11).f})},function(t,e,r){var n=r(2),i=r(160).entries;n({target:"Object",stat:!0},{entries:function(t){return i(t)}})},function(t,e,r){var n=r(7),i=r(48),o=r(12),a=r(59).f,s=function(t){return function(e){for(var r,s=o(e),u=i(s),c=u.length,f=0,l=[];c>f;)r=u[f++],n&&!a.call(s,r)||l.push(t?[r,s[r]]:s[r]);return l}};t.exports={entries:s(!0),values:s(!1)}},function(t,e,r){var n=r(2),i=r(5),o=r(12),a=r(22).f,s=r(7),u=i((function(){a(1)}));n({target:"Object",stat:!0,forced:!s||u,sham:!s},{getOwnPropertyDescriptor:function(t,e){return a(o(t),e)}})},function(t,e,r){var n=r(2),i=r(7),o=r(102),a=r(12),s=r(22),u=r(82);n({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),i=s.f,c=o(n),f={},l=0;c.length>l;)void 0!==(r=i(n,e=c[l++]))&&u(f,e,r);return f}})},function(t,e,r){var n=r(7),i=r(4),o=r(68),a=r(164),s=r(11).f,u=r(46).f,c=r(88),f=r(73),l=r(119),h=r(17),p=r(5),d=r(24).set,v=r(125),g=r(3)("match"),y=i.RegExp,b=y.prototype,_=/a/g,m=/a/g,w=new y(_)!==_,x=l.UNSUPPORTED_Y;if(n&&o("RegExp",!w||x||p((function(){return m[g]=!1,y(_)!=_||y(m)==m||"/a/i"!=y(_,"i")})))){for(var k=function(t,e){var r,n=this instanceof k,i=c(t),o=void 0===e;if(!n&&i&&t.constructor===k&&o)return t;w?i&&!o&&(t=t.source):t instanceof k&&(o&&(e=f.call(t)),t=t.source),x&&(r=!!e&&e.indexOf("y")>-1)&&(e=e.replace(/y/g,""));var s=a(w?new y(t,e):y(t,e),n?this:b,k);return x&&r&&d(s,{sticky:r}),s},E=function(t){t in k||s(k,t,{configurable:!0,get:function(){return y[t]},set:function(e){y[t]=e}})},S=u(y),j=0;S.length>j;)E(S[j++]);b.constructor=k,k.prototype=b,h(i,"RegExp",k)}v("RegExp")},function(t,e,r){var n=r(10),i=r(117);t.exports=function(t,e,r){var o,a;return i&&"function"==typeof(o=e.constructor)&&o!==r&&n(a=o.prototype)&&a!==r.prototype&&i(t,a),t}},function(t,e,r){"use strict";var n=r(17),i=r(8),o=r(5),a=r(73),s=RegExp.prototype,u=s.toString,c=o((function(){return"/a/b"!=u.call({source:"a",flags:"b"})})),f="toString"!=u.name;(c||f)&&n(RegExp.prototype,"toString",(function(){var t=i(this),e=String(t.source),r=t.flags;return"/"+e+"/"+String(void 0===r&&t instanceof RegExp&&!("flags"in s)?a.call(t):r)}),{unsafe:!0})},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)){var r=[],n=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw o}}return r}}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(t,e){t.exports=function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}},function(t,e){t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(t,e,r){t.exports=function(t){function e(t){let e=0;for(let r=0;r<t.length;r++)e=(e<<5)-e+t.charCodeAt(r),e|=0;return n.colors[Math.abs(e)%n.colors.length]}function n(t){let r;function a(...t){if(!a.enabled)return;const e=a,i=Number(new Date),o=i-(r||i);e.diff=o,e.prev=r,e.curr=i,r=i,t[0]=n.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(r,i)=>{if("%%"===r)return r;s++;const o=n.formatters[i];if("function"==typeof o){const n=t[s];r=o.call(e,n),t.splice(s,1),s--}return r}),n.formatArgs.call(e,t),(e.log||n.log).apply(e,t)}return a.namespace=t,a.enabled=n.enabled(t),a.useColors=n.useColors(),a.color=e(t),a.destroy=i,a.extend=o,"function"==typeof n.init&&n.init(a),n.instances.push(a),a}function i(){const t=n.instances.indexOf(this);return-1!==t&&(n.instances.splice(t,1),!0)}function o(t,e){const r=n(this.namespace+(void 0===e?":":e)+t);return r.log=this.log,r}function a(t){return t.toString().substring(2,t.toString().length-2).replace(/\\.\\*\\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},n.disable=function(){const t=[...n.names.map(a),...n.skips.map(a).map(t=>"-"+t)].join(",");return n.enable(""),t},n.enable=function(t){let e;n.save(t),n.names=[],n.skips=[];const r=("string"==typeof t?t:"").split(/[\\s,]+/),i=r.length;for(e=0;e<i;e++)r[e]&&("-"===(t=r[e].replace(/\\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+t.substr(1)+"$")):n.names.push(new RegExp("^"+t+"$")));for(e=0;e<n.instances.length;e++){const t=n.instances[e];t.enabled=n.enabled(t.namespace)}},n.enabled=function(t){if("*"===t[t.length-1])return!0;let e,r;for(e=0,r=n.skips.length;e<r;e++)if(n.skips[e].test(t))return!1;for(e=0,r=n.names.length;e<r;e++)if(n.names[e].test(t))return!0;return!1},n.humanize=r(173),Object.keys(t).forEach(e=>{n[e]=t[e]}),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=e,n.enable(n.load()),n}},function(t,e){var r=1e3,n=6e4,i=60*n,o=24*i;function a(t,e,r,n){var i=e>=1.5*r;return Math.round(t/r)+" "+n+(i?"s":"")}t.exports=function(t,e){e=e||{};var s=typeof t;if("string"===s&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===s&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=o)return a(t,e,o,"day");if(e>=i)return a(t,e,i,"hour");if(e>=n)return a(t,e,n,"minute");if(e>=r)return a(t,e,r,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=o)return Math.round(t/o)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=n)return Math.round(t/n)+"m";if(e>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){"use strict";var n=r(2),i=r(33).every;n({target:"Array",proto:!0,forced:r(36)("every")},{every:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(12),i=r(32),o=r(15),a=r(36),s=Math.min,u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0,f=a("lastIndexOf");t.exports=c||f?function(t){if(c)return u.apply(this,arguments)||0;var e=n(this),r=o(e.length),a=r-1;for(arguments.length>1&&(a=s(a,i(arguments[1]))),a<0&&(a=r+a);a>=0;a--)if(a in e&&e[a]===t)return a||0;return-1}:u},function(t,e,r){"use strict";var n=r(76),i=r(88),o=r(8),a=r(20),s=r(132),u=r(77),c=r(15),f=r(78),l=r(53),h=r(5),p=[].push,d=Math.min,v=!h((function(){return!RegExp(4294967295,"y")}));n("split",2,(function(t,e,r){var n;return n="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var n=String(a(this)),o=void 0===r?4294967295:r>>>0;if(0===o)return[];if(void 0===t)return[n];if(!i(t))return e.call(n,t,o);for(var s,u,c,f=[],h=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,v=new RegExp(t.source,h+"g");(s=l.call(v,n))&&!((u=v.lastIndex)>d&&(f.push(n.slice(d,s.index)),s.length>1&&s.index<n.length&&p.apply(f,s.slice(1)),c=s[0].length,d=u,f.length>=o));)v.lastIndex===s.index&&v.lastIndex++;return d===n.length?!c&&v.test("")||f.push(""):f.push(n.slice(d)),f.length>o?f.slice(0,o):f}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:e.call(this,t,r)}:e,[function(e,r){var i=a(this),o=null==e?void 0:e[t];return void 0!==o?o.call(e,i,r):n.call(String(i),e,r)},function(t,i){var a=r(n,t,this,i,n!==e);if(a.done)return a.value;var l=o(t),h=String(this),p=s(l,RegExp),g=l.unicode,y=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.unicode?"u":"")+(v?"y":"g"),b=new p(v?l:"^(?:"+l.source+")",y),_=void 0===i?4294967295:i>>>0;if(0===_)return[];if(0===h.length)return null===f(b,h)?[h]:[];for(var m=0,w=0,x=[];w<h.length;){b.lastIndex=v?w:0;var k,E=f(b,v?h:h.slice(w));if(null===E||(k=d(c(b.lastIndex+(v?0:w)),h.length))===m)w=u(h,w,g);else{if(x.push(h.slice(m,w)),x.length===_)return x;for(var S=1;S<=E.length-1;S++)if(x.push(E[S]),x.length===_)return x;w=m=k}}return x.push(h.slice(m)),x}]}),!v)},function(t,e,r){var n=r(4);t.exports=n.Promise},function(t,e,r){var n=r(17);t.exports=function(t,e,r){for(var i in e)n(t,i,e[i],r);return t}},function(t,e){t.exports=function(t,e,r){if(!(t instanceof e))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return t}},function(t,e,r){var n=r(8),i=r(181),o=r(15),a=r(71),s=r(182),u=r(183),c=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,r,f,l){var h,p,d,v,g,y,b,_=a(e,r,f?2:1);if(l)h=t;else{if("function"!=typeof(p=s(t)))throw TypeError("Target is not iterable");if(i(p)){for(d=0,v=o(t.length);v>d;d++)if((g=f?_(n(b=t[d])[0],b[1]):_(t[d]))&&g instanceof c)return g;return new c(!1)}h=p.call(t)}for(y=h.next;!(b=y.call(h)).done;)if("object"==typeof(g=u(h,_,b.value,f))&&g&&g instanceof c)return g;return new c(!1)}).stop=function(t){return new c(!0,t)}},function(t,e,r){var n=r(3),i=r(34),o=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[o]===t)}},function(t,e,r){var n=r(118),i=r(34),o=r(3)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[n(t)]}},function(t,e,r){var n=r(8);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&n(o.call(t)),e}}},function(t,e,r){var n=r(3)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var o={};o[n]=function(){return{next:function(){return{done:r=!0}}}},t(o)}catch(t){}return r}},function(t,e,r){var n,i,o,a,s,u,c,f,l=r(4),h=r(22).f,p=r(19),d=r(133).set,v=r(134),g=l.MutationObserver||l.WebKitMutationObserver,y=l.process,b=l.Promise,_="process"==p(y),m=h(l,"queueMicrotask"),w=m&&m.value;w||(n=function(){var t,e;for(_&&(t=y.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?a():o=void 0,t}}o=void 0,t&&t.enter()},_?a=function(){y.nextTick(n)}:g&&!v?(s=!0,u=document.createTextNode(""),new g(n).observe(u,{characterData:!0}),a=function(){u.data=s=!s}):b&&b.resolve?(c=b.resolve(void 0),f=c.then,a=function(){f.call(c,n)}):a=function(){d.call(l,n)}),t.exports=w||function(t){var e={fn:t,next:void 0};o&&(o.next=e),i||(i=e,a()),o=e}},function(t,e,r){var n=r(8),i=r(10),o=r(135);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=o.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){var n=r(4);t.exports=function(t,e){var r=n.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,r){(function(t,e){!function(t,r){"use strict";if(!t.setImmediate){var n,i,o,a,s,u=1,c={},f=!1,l=t.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(t);h=h&&h.setTimeout?h:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick((function(){d(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,r=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=r,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){d(t.data)},n=function(t){o.port2.postMessage(t)}):l&&"onreadystatechange"in l.createElement("script")?(i=l.documentElement,n=function(t){var e=l.createElement("script");e.onreadystatechange=function(){d(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):n=function(t){setTimeout(d,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&d(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),n=function(e){t.postMessage(a+e,"*")}),h.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var i={callback:t,args:e};return c[u]=i,n(u),u++},h.clearImmediate=p}function p(t){delete c[t]}function d(t){if(f)setTimeout(d,0,t);else{var e=c[t];if(e){f=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(void 0,r)}}(e)}finally{p(t),f=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,r(21),r(38))},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),a=n[0],s=n[1],u=new o(function(t,e,r){return 3*(e+r)/4-r}(0,a,s)),f=0,l=s>0?a-4:a;for(r=0;r<l;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],u[f++]=e>>16&255,u[f++]=e>>8&255,u[f++]=255&e;2===s&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,u[f++]=255&e);1===s&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,u[f++]=e>>8&255,u[f++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,o=[],a=0,s=r-i;a<s;a+=16383)o.push(f(t,a,a+16383>s?s:a+16383));1===i?(e=t[r-1],o.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],o.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)n[s]=a[s],i[a.charCodeAt(s)]=s;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,r){for(var i,o,a=[],s=e;s<r;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,c=u>>1,f=-7,l=r?i-1:0,h=r?-1:1,p=t[e+l];for(l+=h,o=p&(1<<-f)-1,p>>=-f,f+=s;f>0;o=256*o+t[e+l],l+=h,f-=8);for(a=o&(1<<-f)-1,o>>=-f,f+=n;f>0;a=256*a+t[e+l],l+=h,f-=8);if(0===o)o=1-c;else{if(o===u)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,n),o-=c}return(p?-1:1)*a*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var a,s,u,c=8*o-i-1,f=(1<<c)-1,l=f>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,d=n?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=f):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+l>=1?h/u:h*Math.pow(2,1-l))*u>=2&&(a++,u/=2),a+l>=f?(s=0,a=f):a+l>=1?(s=(e*u-1)*Math.pow(2,i),a+=l):(s=e*Math.pow(2,l-1)*Math.pow(2,i),a=0));i>=8;t[r+p]=255&s,p+=d,s/=256,i-=8);for(a=a<<i|s,c+=i;c>0;t[r+p]=255&a,p+=d,a/=256,c-=8);t[r+p-d]|=128*v}},function(t,e){},function(t,e,r){"use strict";var n=r(56).Buffer,i=r(194);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},t.prototype.concat=function(t){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var e,r,i,o=n.allocUnsafe(t>>>0),a=this.head,s=0;a;)e=a.data,r=o,i=s,e.copy(r,i),s+=a.data.length,a=a.next;return o},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,r){(function(e){function r(t){try{if(!e.localStorage)return!1}catch(t){return!1}var r=e.localStorage[t];return null!=r&&"true"===String(r).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return t.apply(this,arguments)}}}).call(this,r(21))},function(t,e,r){"use strict";t.exports=o;var n=r(142),i=r(39);function o(t){if(!(this instanceof o))return new o(t);n.call(this,t)}i.inherits=r(29),i.inherits(o,n),o.prototype._transform=function(t,e,r){r(null,t)}},function(t,e,r){t.exports=r(95)},function(t,e,r){t.exports=r(23)},function(t,e,r){t.exports=r(94).Transform},function(t,e,r){t.exports=r(94).PassThrough},function(t,e,r){"use strict";var n=r(2),i=r(60),o=r(12),a=r(36),s=[].join,u=i!=Object,c=a("join",",");n({target:"Array",proto:!0,forced:u||c},{join:function(t){return s.call(o(this),void 0===t?",":t)}})},function(t,e){t.exports=function(t){return-1!==Function.toString.call(t).indexOf("[native code]")}},function(t,e,r){var n=r(80);function i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function o(e,r,a){return i()?t.exports=o=Reflect.construct:t.exports=o=function(t,e,r){var i=[null];i.push.apply(i,e);var o=new(Function.bind.apply(t,i));return r&&n(o,r.prototype),o},o.apply(null,arguments)}t.exports=o},function(t,e,r){"use strict";var n=r(2),i=r(66).indexOf,o=r(36),a=[].indexOf,s=!!a&&1/[1].indexOf(1,-0)<0,u=o("indexOf");n({target:"Array",proto:!0,forced:s||u},{indexOf:function(t){return s?a.apply(this,arguments)||0:i(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";r.r(e);r(98),r(149),r(150),r(51),r(52),r(35),r(74),r(75),r(79);var n=r(0),i=r.n(n),o=(r(28),r(1)),a=r.n(o),s=r(18),u=r.n(s),c=r(30),f=r.n(c),l=r(40),h=r.n(l),p=r(16),d=r.n(p),v=r(57),g=r.n(v),y=r(41),b=r.n(y),_=(r(81),r(84),r(85),r(86),r(37),r(87),r(157),r(158),r(159),r(161),r(162),r(124),r(163),r(165),r(126),r(129),r(89),r(90),r(42)),m=r.n(_),w=r(9),x=r.n(w),k=r(143),E=r.n(k),S=r(58),j=r.n(S),R=(r(174),r(130),r(131),r(176),function(t){for(;t.endsWith("/");)t=t.slice(0,-1);return t}),C=function(t){for(var e=t.split("/"),r=e[0],n=0,i=1;i<e.length-1;i++){n=i,""===e[i]&&(r+="/");break}return r=r+"/"+e[n+1]+"/"},I=function(t){return(t=R(t)).substring(0,t.lastIndexOf("/")+1)},O=function(t){return(t=R(t)).substr(t.lastIndexOf("/")+1)},T=function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return e.every((function(t){return t.endsWith("/")}))},P=function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return e.every((function(t){return!t.endsWith("/")}))},A={CONTAINER:\'<http://www.w3.org/ns/ldp#BasicContainer>; rel="type"\',RESOURCE:\'<http://www.w3.org/ns/ldp#Resource>; rel="type"\'},L=(r(91),r(96)),F=r.n(L),M=r(6);const{rdf:N,xsd:B}=M.a;var D,U,q=0;class G{constructor(t){this.id=t}get value(){return this.id}equals(t){return t instanceof G?this.id===t.id:!!t&&this.termType===t.termType&&this.value===t.value}toJSON(){return{termType:this.termType,value:this.value}}}class W extends G{get termType(){return"NamedNode"}}class z extends G{get termType(){return"Literal"}get value(){return this.id.substring(1,this.id.lastIndexOf(\'"\'))}get language(){var t=this.id,e=t.lastIndexOf(\'"\')+1;return e<t.length&&"@"===t[e++]?t.substr(e).toLowerCase():""}get datatype(){return new W(this.datatypeString)}get datatypeString(){var t,e=this.id,r=e.lastIndexOf(\'"\')+1;return r<e.length&&"^"===(t=e[r])?e.substr(r+2):"@"!==t?B.string:N.langString}equals(t){return t instanceof z?this.id===t.id:!!t&&!!t.datatype&&this.termType===t.termType&&this.value===t.value&&this.language===t.language&&this.datatype.value===t.datatype.value}toJSON(){return{termType:this.termType,value:this.value,language:this.language,datatype:{termType:"NamedNode",value:this.datatypeString}}}}class Y extends G{constructor(t){super("_:"+t)}get termType(){return"BlankNode"}get value(){return this.id.substr(2)}}class Q extends G{constructor(t){super("?"+t)}get termType(){return"Variable"}get value(){return this.id.substr(1)}}class $ extends G{constructor(){return super(""),U||this}get termType(){return"DefaultGraph"}equals(t){return this===t||!!t&&this.termType===t.termType}}U=new $;class H{constructor(t,e,r,n){this.subject=t,this.predicate=e,this.object=r,this.graph=n||U}toJSON(){return{subject:this.subject.toJSON(),predicate:this.predicate.toJSON(),object:this.object.toJSON(),graph:this.graph.toJSON()}}equals(t){return!!t&&this.subject.equals(t.subject)&&this.predicate.equals(t.predicate)&&this.object.equals(t.object)&&this.graph.equals(t.graph)}}var K=D={namedNode:function(t){return new W(t)},blankNode:function(t){t||(t="n3-"+q++);return new Y(t)},variable:function(t){return new Q(t)},literal:function(t,e){if("string"==typeof e)return new z(\'"\'+t+\'"@\'+e.toLowerCase());let r=e?e.value:"";""===r&&("boolean"==typeof t?r=B.boolean:"number"==typeof t&&(Number.isFinite(t)?r=Number.isInteger(t)?B.integer:B.double:(r=B.double,Number.isNaN(t)||(t=t>0?"INF":"-INF"))));return""===r||r===B.string?new z(\'"\'+t+\'"\'):new z(\'"\'+t+\'"^^\'+r)},defaultGraph:function(){return U},quad:V,triple:V,internal:{Term:G,NamedNode:W,BlankNode:Y,Variable:Q,Literal:z,DefaultGraph:$,Quad:H,Triple:H,fromId:function(t,e){if(e=e||D,!t)return e.defaultGraph();switch(t[0]){case"_":return e.blankNode(t.substr(2));case"?":return e.variable(t.substr(1));case\'"\':if(e===D)return new z(t);if(\'"\'===t[t.length-1])return e.literal(t.substr(1,t.length-2));var r=t.lastIndexOf(\'"\',t.length-1);return e.literal(t.substr(1,r-1),"@"===t[r+1]?t.substr(r+2):e.namedNode(t.substr(r+3)));default:return e.namedNode(t)}},toId:function(t){if("string"==typeof t)return t;if(t instanceof G)return t.id;if(!t)return U.id;switch(t.termType){case"NamedNode":return t.value;case"BlankNode":return"_:"+t.value;case"Variable":return"?"+t.value;case"DefaultGraph":return"";case"Literal":return\'"\'+t.value+\'"\'+(t.language?"@"+t.language:t.datatype&&t.datatype.value!==B.string?"^^"+t.datatype.value:"");default:throw new Error("Unexpected termType: "+t.termType)}}}};function V(t,e,r,n){return new H(t,e,r,n)}var Z=r(145),J=0,X=0;class tt{constructor(t){this._contextStack=[],this._graph=null,t=t||{},this._setBase(t.baseIRI),t.factory&&rt(this,t.factory);var e="string"==typeof t.format?t.format.match(/\\w*$/)[0].toLowerCase():"",r="turtle"===e,n="trig"===e,i=/triple/.test(e),o=/quad/.test(e),a=this._n3Mode=/n3/.test(e),s=i||o;(this._supportsNamedGraphs=!(r||a))||(this._readPredicateOrNamedGraph=this._readPredicate),this._supportsQuads=!(r||n||i||a),s&&(this._resolveRelativeIRI=function(t){return null}),this._blankNodePrefix="string"!=typeof t.blankNodePrefix?"":t.blankNodePrefix.replace(/^(?!_:)/,"_:"),this._lexer=t.lexer||new Z.a({lineMode:s,n3:a}),this._explicitQuantifiers=!!t.explicitQuantifiers}static _resetBlankNodeIds(){J=X=0}_blank(){return this._blankNode("b"+X++)}_setBase(t){if(t){var e=t.indexOf("#");e>=0&&(t=t.substr(0,e)),this._base=t,this._basePath=t.indexOf("/")<0?t:t.replace(/[^\\/?]*(?:\\?.*)?$/,""),t=t.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i),this._baseRoot=t[0],this._baseScheme=t[1]}else this._base="",this._basePath=""}_saveContext(t,e,r,n,i){var o=this._n3Mode;this._contextStack.push({subject:r,predicate:n,object:i,graph:e,type:t,inverse:!!o&&this._inversePredicate,blankPrefix:o?this._prefixes._:"",quantified:o?this._quantified:null}),o&&(this._inversePredicate=!1,this._prefixes._=this._graph?this._graph.id.substr(2)+".":".",this._quantified=Object.create(this._quantified))}_restoreContext(){var t=this._contextStack.pop(),e=this._n3Mode;this._subject=t.subject,this._predicate=t.predicate,this._object=t.object,this._graph=t.graph,e&&(this._inversePredicate=t.inverse,this._prefixes._=t.blankPrefix,this._quantified=t.quantified)}_readInTopContext(t){switch(t.type){case"eof":return null!==this._graph?this._error("Unclosed graph",t):(delete this._prefixes._,this._callback(null,null,this._prefixes));case"PREFIX":this._sparqlStyle=!0;case"@prefix":return this._readPrefix;case"BASE":this._sparqlStyle=!0;case"@base":return this._readBaseIRI;case"{":if(this._supportsNamedGraphs)return this._graph="",this._subject=null,this._readSubject;case"GRAPH":if(this._supportsNamedGraphs)return this._readNamedGraphLabel;default:return this._readSubject(t)}}_readEntity(t,e){var r;switch(t.type){case"IRI":case"typeIRI":var n=this._resolveIRI(t.value);if(null===n)return this._error("Invalid IRI",t);r=this._namedNode(n);break;case"type":case"prefixed":var i=this._prefixes[t.prefix];if(void 0===i)return this._error(\'Undefined prefix "\'+t.prefix+\':"\',t);r=this._namedNode(i+t.value);break;case"blank":r=this._blankNode(this._prefixes[t.prefix]+t.value);break;case"var":r=this._variable(t.value.substr(1));break;default:return this._error("Expected entity but got "+t.type,t)}return!e&&this._n3Mode&&r.id in this._quantified&&(r=this._quantified[r.id]),r}_readSubject(t){switch(this._predicate=null,t.type){case"[":return this._saveContext("blank",this._graph,this._subject=this._blank(),null,null),this._readBlankNodeHead;case"(":return this._saveContext("list",this._graph,this.RDF_NIL,null,null),this._subject=null,this._readListItem;case"{":return this._n3Mode?(this._saveContext("formula",this._graph,this._graph=this._blank(),null,null),this._readSubject):this._error("Unexpected graph",t);case"}":return this._readPunctuation(t);case"@forSome":return this._n3Mode?(this._subject=null,this._predicate=this.N3_FORSOME,this._quantifier=this._blankNode,this._readQuantifierList):this._error(\'Unexpected "@forSome"\',t);case"@forAll":return this._n3Mode?(this._subject=null,this._predicate=this.N3_FORALL,this._quantifier=this._variable,this._readQuantifierList):this._error(\'Unexpected "@forAll"\',t);default:if(void 0===(this._subject=this._readEntity(t)))return;if(this._n3Mode)return this._getPathReader(this._readPredicateOrNamedGraph)}return this._readPredicateOrNamedGraph}_readPredicate(t){var e=t.type;switch(e){case"inverse":this._inversePredicate=!0;case"abbreviation":this._predicate=this.ABBREVIATIONS[t.value];break;case".":case"]":case"}":return null===this._predicate?this._error("Unexpected "+e,t):(this._subject=null,"]"===e?this._readBlankNodeTail(t):this._readPunctuation(t));case";":return null!==this._predicate?this._readPredicate:this._error("Expected predicate but got ;",t);case"blank":if(!this._n3Mode)return this._error("Disallowed blank node as predicate",t);default:if(void 0===(this._predicate=this._readEntity(t)))return}return this._readObject}_readObject(t){switch(t.type){case"literal":if(0===t.prefix.length)return this._literalValue=t.value,this._readDataTypeOrLang;this._object=this._literal(t.value,this._namedNode(t.prefix));break;case"[":return this._saveContext("blank",this._graph,this._subject,this._predicate,this._subject=this._blank()),this._readBlankNodeHead;case"(":return this._saveContext("list",this._graph,this._subject,this._predicate,this.RDF_NIL),this._subject=null,this._readListItem;case"{":return this._n3Mode?(this._saveContext("formula",this._graph,this._subject,this._predicate,this._graph=this._blank()),this._readSubject):this._error("Unexpected graph",t);default:if(void 0===(this._object=this._readEntity(t)))return;if(this._n3Mode)return this._getPathReader(this._getContextEndReader())}return this._getContextEndReader()}_readPredicateOrNamedGraph(t){return"{"===t.type?this._readGraph(t):this._readPredicate(t)}_readGraph(t){return"{"!==t.type?this._error("Expected graph but got "+t.type,t):(this._graph=this._subject,this._subject=null,this._readSubject)}_readBlankNodeHead(t){return"]"===t.type?(this._subject=null,this._readBlankNodeTail(t)):(this._predicate=null,this._readPredicate(t))}_readBlankNodeTail(t){if("]"!==t.type)return this._readBlankNodePunctuation(t);null!==this._subject&&this._emit(this._subject,this._predicate,this._object,this._graph);var e=null===this._predicate;return this._restoreContext(),null===this._object?e?this._readPredicateOrNamedGraph:this._readPredicateAfterBlank:this._getContextEndReader()}_readPredicateAfterBlank(t){switch(t.type){case".":case"}":return this._subject=null,this._readPunctuation(t);default:return this._readPredicate(t)}}_readListItem(t){var e=null,r=null,n=this._subject,i=this._contextStack,o=i[i.length-1],a=this._readListItem;switch(t.type){case"[":this._saveContext("blank",this._graph,r=this._blank(),this.RDF_FIRST,this._subject=e=this._blank()),a=this._readBlankNodeHead;break;case"(":this._saveContext("list",this._graph,r=this._blank(),this.RDF_FIRST,this.RDF_NIL),this._subject=null;break;case")":if(this._restoreContext(),0!==i.length&&"list"===i[i.length-1].type&&this._emit(this._subject,this._predicate,this._object,this._graph),null===this._predicate){if(a=this._readPredicate,this._subject===this.RDF_NIL)return a}else if(a=this._getContextEndReader(),this._object===this.RDF_NIL)return a;r=this.RDF_NIL;break;case"literal":0===t.prefix.length?(this._literalValue=t.value,a=this._readListItemDataTypeOrLang):(e=this._literal(t.value,this._namedNode(t.prefix)),a=this._getContextEndReader());break;default:if(void 0===(e=this._readEntity(t)))return}if(null===r&&(this._subject=r=this._blank()),null===n?null===o.predicate?o.subject=r:o.object=r:this._emit(n,this.RDF_REST,r,this._graph),null!==e){if(this._n3Mode&&("IRI"===t.type||"prefixed"===t.type))return this._saveContext("item",this._graph,r,this.RDF_FIRST,e),this._subject=e,this._predicate=null,this._getPathReader(this._readListItem);this._emit(r,this.RDF_FIRST,e,this._graph)}return a}_readDataTypeOrLang(t){return this._completeLiteral(t,!1)}_readListItemDataTypeOrLang(t){return this._completeLiteral(t,!0)}_completeLiteral(t,e){switch(t.type){case"type":case"typeIRI":var r=this._readEntity(t);if(void 0===r)return;this._object=this._literal(this._literalValue,r),t=null;break;case"langcode":this._object=this._literal(this._literalValue,t.value),t=null;break;default:this._object=this._literal(this._literalValue)}return e&&this._emit(this._subject,this.RDF_FIRST,this._object,this._graph),null===t?this._getContextEndReader():(this._readCallback=this._getContextEndReader(),this._readCallback(t))}_readFormulaTail(t){return"}"!==t.type?this._readPunctuation(t):(null!==this._subject&&this._emit(this._subject,this._predicate,this._object,this._graph),this._restoreContext(),null===this._object?this._readPredicate:this._getContextEndReader())}_readPunctuation(t){var e,r=this._subject,n=this._graph,i=this._inversePredicate;switch(t.type){case"}":if(null===this._graph)return this._error("Unexpected graph closing",t);if(this._n3Mode)return this._readFormulaTail(t);this._graph=null;case".":this._subject=null,e=this._contextStack.length?this._readSubject:this._readInTopContext,i&&(this._inversePredicate=!1);break;case";":e=this._readPredicate;break;case",":e=this._readObject;break;default:if(this._supportsQuads&&null===this._graph&&void 0!==(n=this._readEntity(t))){e=this._readQuadPunctuation;break}return this._error(\'Expected punctuation to follow "\'+this._object.id+\'"\',t)}if(null!==r){var o=this._predicate,a=this._object;i?this._emit(a,o,r,n):this._emit(r,o,a,n)}return e}_readBlankNodePunctuation(t){var e;switch(t.type){case";":e=this._readPredicate;break;case",":e=this._readObject;break;default:return this._error(\'Expected punctuation to follow "\'+this._object.id+\'"\',t)}return this._emit(this._subject,this._predicate,this._object,this._graph),e}_readQuadPunctuation(t){return"."!==t.type?this._error("Expected dot to follow quad",t):this._readInTopContext}_readPrefix(t){return"prefix"!==t.type?this._error("Expected prefix to follow @prefix",t):(this._prefix=t.value,this._readPrefixIRI)}_readPrefixIRI(t){if("IRI"!==t.type)return this._error(\'Expected IRI to follow prefix "\'+this._prefix+\':"\',t);var e=this._readEntity(t);return this._prefixes[this._prefix]=e.value,this._prefixCallback(this._prefix,e),this._readDeclarationPunctuation}_readBaseIRI(t){var e="IRI"===t.type&&this._resolveIRI(t.value);return e?(this._setBase(e),this._readDeclarationPunctuation):this._error("Expected valid IRI to follow base declaration",t)}_readNamedGraphLabel(t){switch(t.type){case"IRI":case"blank":case"prefixed":return this._readSubject(t),this._readGraph;case"[":return this._readNamedGraphBlankLabel;default:return this._error("Invalid graph label",t)}}_readNamedGraphBlankLabel(t){return"]"!==t.type?this._error("Invalid graph label",t):(this._subject=this._blank(),this._readGraph)}_readDeclarationPunctuation(t){return this._sparqlStyle?(this._sparqlStyle=!1,this._readInTopContext(t)):"."!==t.type?this._error("Expected declaration to end with a dot",t):this._readInTopContext}_readQuantifierList(t){var e;switch(t.type){case"IRI":case"prefixed":if(void 0!==(e=this._readEntity(t,!0)))break;default:return this._error("Unexpected "+t.type,t)}return this._explicitQuantifiers?(null===this._subject?this._emit(this._graph||this.DEFAULTGRAPH,this._predicate,this._subject=this._blank(),this.QUANTIFIERS_GRAPH):this._emit(this._subject,this.RDF_REST,this._subject=this._blank(),this.QUANTIFIERS_GRAPH),this._emit(this._subject,this.RDF_FIRST,e,this.QUANTIFIERS_GRAPH)):this._quantified[e.id]=this._quantifier("b"+X++),this._readQuantifierPunctuation}_readQuantifierPunctuation(t){return","===t.type?this._readQuantifierList:(this._explicitQuantifiers&&(this._emit(this._subject,this.RDF_REST,this.RDF_NIL,this.QUANTIFIERS_GRAPH),this._subject=null),this._readCallback=this._getContextEndReader(),this._readCallback(t))}_getPathReader(t){return this._afterPath=t,this._readPath}_readPath(t){switch(t.type){case"!":return this._readForwardPath;case"^":return this._readBackwardPath;default:var e=this._contextStack,r=e.length&&e[e.length-1];if(r&&"item"===r.type){var n=this._subject;this._restoreContext(),this._emit(this._subject,this.RDF_FIRST,n,this._graph)}return this._afterPath(t)}}_readForwardPath(t){var e,r,n=this._blank();if(void 0!==(r=this._readEntity(t)))return null===this._predicate?(e=this._subject,this._subject=n):(e=this._object,this._object=n),this._emit(e,r,n,this._graph),this._readPath}_readBackwardPath(t){var e,r,n=this._blank();if(void 0!==(e=this._readEntity(t)))return null===this._predicate?(r=this._subject,this._subject=n):(r=this._object,this._object=n),this._emit(n,e,r,this._graph),this._readPath}_getContextEndReader(){var t=this._contextStack;if(!t.length)return this._readPunctuation;switch(t[t.length-1].type){case"blank":return this._readBlankNodeTail;case"list":return this._readListItem;case"formula":return this._readFormulaTail}}_emit(t,e,r,n){this._callback(null,this._quad(t,e,r,n||this.DEFAULTGRAPH))}_error(t,e){var r=new Error(t+" on line "+e.line+".");r.context={token:e,line:e.line,previousToken:this._lexer.previousToken},this._callback(r),this._callback=et}_resolveIRI(t){return/^[a-z][a-z0-9+.-]*:/i.test(t)?t:this._resolveRelativeIRI(t)}_resolveRelativeIRI(t){if(!t.length)return this._base;switch(t[0]){case"#":return this._base+t;case"?":return this._base.replace(/(?:\\?.*)?$/,t);case"/":return("/"===t[1]?this._baseScheme:this._baseRoot)+this._removeDotSegments(t);default:return/^[^/:]*:/.test(t)?null:this._removeDotSegments(this._basePath+t)}}_removeDotSegments(t){if(!/(^|\\/)\\.\\.?($|[/#?])/.test(t))return t;for(var e="",r=t.length,n=-1,i=-1,o=0,a="/";n<r;){switch(a){case":":if(i<0&&"/"===t[++n]&&"/"===t[++n])for(;(i=n+1)<r&&"/"!==t[i];)n=i;break;case"?":case"#":n=r;break;case"/":if("."===t[n+1])switch(a=t[1+ ++n]){case"/":e+=t.substring(o,n-1),o=n+1;break;case void 0:case"?":case"#":return e+t.substring(o,n)+t.substr(n+1);case".":if(void 0===(a=t[1+ ++n])||"/"===a||"?"===a||"#"===a){if((o=(e+=t.substring(o,n-2)).lastIndexOf("/"))>=i&&(e=e.substr(0,o)),"/"!==a)return e+"/"+t.substr(n+1);o=n+1}}}a=t[++n]}return e+t.substring(o)}parse(t,e,r){var n=this;if(this._readCallback=this._readInTopContext,this._sparqlStyle=!1,this._prefixes=Object.create(null),this._prefixes._=this._blankNodePrefix?this._blankNodePrefix.substr(2):"b"+J+++"_",this._prefixCallback=r||et,this._inversePredicate=!1,this._quantified=Object.create(null),!e){var i,o=[];if(this._callback=function(t,e){t?i=t:e&&o.push(e)},this._lexer.tokenize(t).every((function(t){return n._readCallback=n._readCallback(t)})),i)throw i;return o}this._callback=e,this._lexer.tokenize(t,(function(t,e){null!==t?(n._callback(t),n._callback=et):n._readCallback&&(n._readCallback=n._readCallback(e))}))}}function et(){}function rt(t,e){var r=e.namedNode;t._namedNode=r,t._blankNode=e.blankNode,t._literal=e.literal,t._variable=e.variable,t._quad=e.quad,t.DEFAULTGRAPH=e.defaultGraph(),t.RDF_FIRST=r(M.a.rdf.first),t.RDF_REST=r(M.a.rdf.rest),t.RDF_NIL=r(M.a.rdf.nil),t.N3_FORALL=r(M.a.r.forAll),t.N3_FORSOME=r(M.a.r.forSome),t.ABBREVIATIONS={a:r(M.a.rdf.type),"=":r(M.a.owl.sameAs),">":r(M.a.log.implies)},t.QUANTIFIERS_GRAPH=r("urn:n3:quantifiers")}rt(tt.prototype,K);var nt=r(146);const{toId:it,fromId:ot}=K.internal;class at{constructor(t,e){this._size=0,this._graphs=Object.create(null),this._id=0,this._ids=Object.create(null),this._ids["><"]=0,this._entities=Object.create(null),this._blankNodeIndex=0,e||!t||t[0]||(e=t,t=null),e=e||{},this._factory=e.factory||K,t&&this.addQuads(t)}get size(){var t=this._size;if(null!==t)return t;t=0;var e,r,n=this._graphs;for(var i in n)for(var o in e=n[i].subjects)for(var a in r=e[o])t+=Object.keys(r[a]).length;return this._size=t}_addToIndex(t,e,r,n){var i=t[e]||(t[e]={}),o=i[r]||(i[r]={}),a=n in o;return a||(o[n]=null),!a}_removeFromIndex(t,e,r,n){var i,o=t[e],a=o[r];for(i in delete a[n],a)return;for(i in delete o[r],o)return;delete t[e]}_findInIndex(t,e,r,n,i,o,a,s,u,c){var f,l,h,p=!e+!r+!n>1?Object.keys(this._ids):this._entities;for(var d in e&&((f=t,t={})[e]=f[e]),t){var v=p[d];if(l=t[d])for(var g in r&&((f=l,l={})[r]=f[r]),l){var y=p[g];if(h=l[g])for(var b=(n?n in h?[n]:[]:Object.keys(h)),_=0;_<b.length;_++){var m={subject:null,predicate:null,object:null};m[i]=ot(v,this._factory),m[o]=ot(y,this._factory),m[a]=ot(p[b[_]],this._factory);var w=this._factory.quad(m.subject,m.predicate,m.object,ot(s,this._factory));if(c)c.push(w);else if(u(w))return!0}}}return c}_loop(t,e){for(var r in t)e(r)}_loopByKey0(t,e,r){var n,i;if(n=t[e])for(i in n)r(i)}_loopByKey1(t,e,r){var n;for(n in t)t[n][e]&&r(n)}_loopBy2Keys(t,e,r,n){var i,o,a;if((i=t[e])&&(o=i[r]))for(a in o)n(a)}_countInIndex(t,e,r,n){var i,o,a,s=0;for(var u in e&&((i=t,t={})[e]=i[e]),t)if(o=t[u])for(var c in r&&((i=o,o={})[r]=i[r]),o)(a=o[c])&&(n?n in a&&s++:s+=Object.keys(a).length);return s}_getGraphs(t){if(!st(t))return this._graphs;var e={};return e[t]=this._graphs[t],e}_uniqueEntities(t){var e=Object.create(null),r=this._entities;return function(n){n in e||(e[n]=!0,t(ot(r[n])))}}addQuad(t,e,r,n){e||(n=t.graph,r=t.object,e=t.predicate,t=t.subject),t=it(t),e=it(e),r=it(r),n=it(n);var i=this._graphs[n];i||(i=this._graphs[n]={subjects:{},predicates:{},objects:{}},Object.freeze(i));var o=this._ids,a=this._entities;t=o[t]||(o[a[++this._id]=t]=this._id),e=o[e]||(o[a[++this._id]=e]=this._id),r=o[r]||(o[a[++this._id]=r]=this._id);var s=this._addToIndex(i.subjects,t,e,r);return this._addToIndex(i.predicates,e,r,t),this._addToIndex(i.objects,r,t,e),this._size=null,s}addQuads(t){for(var e=0;e<t.length;e++)this.addQuad(t[e])}import(t){var e=this;return t.on("data",(function(t){e.addQuad(t)})),t}removeQuad(t,e,r,n){e||(n=t.graph,r=t.object,e=t.predicate,t=t.subject),t=it(t),e=it(e),r=it(r),n=it(n);var i,o,a,s=this._ids,u=this._graphs;if(!((t=s[t])&&(e=s[e])&&(r=s[r])&&(i=u[n])&&(o=i.subjects[t])&&(a=o[e])&&r in a))return!1;for(t in this._removeFromIndex(i.subjects,t,e,r),this._removeFromIndex(i.predicates,e,r,t),this._removeFromIndex(i.objects,r,t,e),null!==this._size&&this._size--,i.subjects)return!0;return delete u[n],!0}removeQuads(t){for(var e=0;e<t.length;e++)this.removeQuad(t[e])}remove(t){var e=this;return t.on("data",(function(t){e.removeQuad(t)})),t}removeMatches(t,e,r,n){return this.remove(this.match(t,e,r,n))}deleteGraph(t){return this.removeMatches(null,null,null,t)}getQuads(t,e,r,n){t=t&&it(t),e=e&&it(e),r=r&&it(r),n=n&&it(n);var i,o,a,s,u=[],c=this._getGraphs(n),f=this._ids;if(st(t)&&!(o=f[t])||st(e)&&!(a=f[e])||st(r)&&!(s=f[r]))return u;for(var l in c)(i=c[l])&&(o?s?this._findInIndex(i.objects,s,o,a,"object","subject","predicate",l,null,u):this._findInIndex(i.subjects,o,a,null,"subject","predicate","object",l,null,u):a?this._findInIndex(i.predicates,a,s,null,"predicate","object","subject",l,null,u):s?this._findInIndex(i.objects,s,null,null,"object","subject","predicate",l,null,u):this._findInIndex(i.subjects,null,null,null,"subject","predicate","object",l,null,u));return u}match(t,e,r,n){var i=new nt.Readable({objectMode:!0});return i._read=()=>{for(var o of this.getQuads(t,e,r,n))i.push(o);i.push(null)},i}countQuads(t,e,r,n){t=t&&it(t),e=e&&it(e),r=r&&it(r),n=n&&it(n);var i,o,a,s,u=0,c=this._getGraphs(n),f=this._ids;if(st(t)&&!(o=f[t])||st(e)&&!(a=f[e])||st(r)&&!(s=f[r]))return 0;for(var l in c)(i=c[l])&&(u+=t?r?this._countInIndex(i.objects,s,o,a):this._countInIndex(i.subjects,o,a,s):e?this._countInIndex(i.predicates,a,s,o):this._countInIndex(i.objects,s,o,a));return u}forEach(t,e,r,n,i){this.some((function(e){return t(e),!1}),e,r,n,i)}every(t,e,r,n,i){var o=!1,a=!this.some((function(e){return o=!0,!t(e)}),e,r,n,i);return o&&a}some(t,e,r,n,i){e=e&&it(e),r=r&&it(r),n=n&&it(n),i=i&&it(i);var o,a,s,u,c=this._getGraphs(i),f=this._ids;if(st(e)&&!(a=f[e])||st(r)&&!(s=f[r])||st(n)&&!(u=f[n]))return!1;for(var l in c)if(o=c[l])if(a){if(u){if(this._findInIndex(o.objects,u,a,s,"object","subject","predicate",l,t,null))return!0}else if(this._findInIndex(o.subjects,a,s,null,"subject","predicate","object",l,t,null))return!0}else if(s){if(this._findInIndex(o.predicates,s,u,null,"predicate","object","subject",l,t,null))return!0}else if(u){if(this._findInIndex(o.objects,u,null,null,"object","subject","predicate",l,t,null))return!0}else if(this._findInIndex(o.subjects,null,null,null,"subject","predicate","object",l,t,null))return!0;return!1}getSubjects(t,e,r){var n=[];return this.forSubjects((function(t){n.push(t)}),t,e,r),n}forSubjects(t,e,r,n){e=e&&it(e),r=r&&it(r),n=n&&it(n);var i,o,a,s=this._ids,u=this._getGraphs(n);if(t=this._uniqueEntities(t),!(st(e)&&!(o=s[e])||st(r)&&!(a=s[r])))for(n in u)(i=u[n])&&(o?a?this._loopBy2Keys(i.predicates,o,a,t):this._loopByKey1(i.subjects,o,t):a?this._loopByKey0(i.objects,a,t):this._loop(i.subjects,t))}getPredicates(t,e,r){var n=[];return this.forPredicates((function(t){n.push(t)}),t,e,r),n}forPredicates(t,e,r,n){e=e&&it(e),r=r&&it(r),n=n&&it(n);var i,o,a,s=this._ids,u=this._getGraphs(n);if(t=this._uniqueEntities(t),!(st(e)&&!(o=s[e])||st(r)&&!(a=s[r])))for(n in u)(i=u[n])&&(o?a?this._loopBy2Keys(i.objects,a,o,t):this._loopByKey0(i.subjects,o,t):a?this._loopByKey1(i.predicates,a,t):this._loop(i.predicates,t))}getObjects(t,e,r){var n=[];return this.forObjects((function(t){n.push(t)}),t,e,r),n}forObjects(t,e,r,n){e=e&&it(e),r=r&&it(r),n=n&&it(n);var i,o,a,s=this._ids,u=this._getGraphs(n);if(t=this._uniqueEntities(t),!(st(e)&&!(o=s[e])||st(r)&&!(a=s[r])))for(n in u)(i=u[n])&&(o?a?this._loopBy2Keys(i.subjects,o,a,t):this._loopByKey1(i.objects,o,t):a?this._loopByKey0(i.predicates,a,t):this._loop(i.objects,t))}getGraphs(t,e,r){var n=[];return this.forGraphs((function(t){n.push(t)}),t,e,r),n}forGraphs(t,e,r,n){for(var i in this._graphs)this.some((function(e){return t(e.graph),!0}),e,r,n,i)}createBlankNode(t){var e,r;if(t)for(e=t="_:"+t,r=1;this._ids[e];)e=t+r++;else do{e="_:b"+this._blankNodeIndex++}while(this._ids[e]);return this._ids[e]=++this._id,this._entities[this._id]=e,this._factory.blankNode(e.substr(2))}extractLists({remove:t=!1,ignoreErrors:e=!1}={}){var r={},n=e?()=>!0:(t,e)=>{throw new Error(`${t.value} ${e}`)},i=this.getQuads(null,M.a.rdf.rest,M.a.rdf.nil,null),o=t?[...i]:[];return i.forEach(e=>{for(var i,a,s=[],u=!1,c=e.graph,f=e.subject;f&&!u;){var l,h,p=this.getQuads(null,null,f,null),d=this.getQuads(f,null,null,null),v=null,g=null,y=null;for(l=0;l<d.length&&!u;l++)(h=d[l]).graph.equals(c)?i?u=n(f,"has non-list arcs out"):h.predicate.value===M.a.rdf.first?v?u=n(f,"has multiple rdf:first arcs"):o.push(v=h):h.predicate.value===M.a.rdf.rest?g?u=n(f,"has multiple rdf:rest arcs"):o.push(g=h):p.length?u=n(f,"can\'t be subject and object"):(i=h,a="subject"):u=n(f,"not confined to single graph");for(l=0;l<p.length&&!u;++l)h=p[l],i?u=n(f,"can\'t have coreferences"):h.predicate.value===M.a.rdf.rest?y?u=n(f,"has incoming rdf:rest arcs"):y=h:(i=h,a="object");v?s.unshift(v.object):u=n(f,"has no list head"),f=y&&y.subject}u?t=!1:i&&(r[i[a].value]=s)}),t&&this.removeQuads(o),r}}function st(t){return"string"==typeof t||t instanceof String}var ut=r(144),ct=r.n(ut)()(),ft=K.namedNode,lt=K.literal,ht=function(){function t(e){u()(this,t),this._fetch=e,this.parser=new tt,this.store=new at,this.cache={},this.prefix={}}var e,r,n,o;return f()(t,[{key:"setPrefix",value:function(t,e){this.prefix[t]=e}},{key:"getPrefix",value:function(t){return this.prefix[t]}},{key:"query",value:(o=a()(i.a.mark((function t(e,r,n,o,a){var s,u,c=arguments;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(c.length>5&&void 0!==c[5]?c[5]:{useCache:!0}).useCache||!(e in this.cache)){t.next=3;break}return t.abrupt("return",this._queryCached(e,r,n,o,a));case 3:return t.next=5,this._fetch(e,{headers:{Accept:"text/turtle"}});case 5:return s=t.sent,t.next=8,s.text();case 8:return u=t.sent,t.abrupt("return",this.queryTurtle(e,u,r,n,o,a));case 10:case"end":return t.stop()}}),t,this)}))),function(t,e,r,n,i){return o.apply(this,arguments)})},{key:"queryTurtle",value:(n=a()(i.a.mark((function t(e,r,n,o,a,s){var u;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._parse(r,e);case 2:return u=t.sent,this.cache[e]=u,t.abrupt("return",this._queryCached(e,n,o,a,s));case 5:case"end":return t.stop()}}),t,this)}))),function(t,e,r,i,o,a){return n.apply(this,arguments)})},{key:"_queryCached",value:(r=a()(i.a.mark((function t(e,r,n,o,a){var s,u=this;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a||(a=ft(e)[a]=[r,n,o,a].map((function(t){if("object"===F()(t)&&t){if(t.id)return t;var r=Object.keys(t),n=t[r];return 1===r.length&&"thisDoc"===r[0]?ft(n?e+"#"+n:e):ct[r]?ft(ct[r](n)):u.prefix[r]?ft(u.prefix[r]+n):ft(r+n)}return t&&void 0!==t?lt(t):t}))),s=this.cache[e],t.abrupt("return",s.getQuads(a[0],a[1],a[2],a[3]));case 3:case"end":return t.stop()}}),t,this)}))),function(t,e,n,i,o){return r.apply(this,arguments)})},{key:"_parse",value:(e=a()(i.a.mark((function t(e,r){var n,o;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=[],o=new tt({baseIRI:r}),t.abrupt("return",new Promise((function(t,r){o.parse(e,(function(e,i,o){if(i&&n.push(i),e)return r(e);if(!i){var a=new at;a.addQuads(n),t(a)}}))})));case 3:case"end":return t.stop()}}),t)}))),function(t,r){return e.apply(this,arguments)})}]),t}(),pt=I,dt=O;function vt(t,e){var r={url:t};for(var n in e.forEach((function(t){var e=t.predicate.value.replace(/.*\\//,"").replace(/.*#/,""),n=t.object.value.match("http://www.w3.org/ns/iana/media-types/")?t.object.value.replace("http://www.w3.org/ns/iana/media-types/",""):t.object.value.replace(/.*\\//,"");e.match("type")||(n=n.replace(/.*#/,"")),"ldp#Resource"!==n&&"ldp#Container"!==n&&(r[e]=[].concat(x()(r[e]||[]),[n.replace("#Resource","")]))})),r)1===r[n].length&&(r[n]=r[n][0]);return void 0===r.type&&(r.type="application/octet-stream"),r.itemType=r.type.includes("ldp#BasicContainer")?"Container":"Resource",r.name=dt(t),r.parent=pt(t),r}function gt(t,e,r){var n={type:"folder"};return n.modified=t.modified,n.mtime=t.mtime,n.size=t.size,n.itemType=t.itemType,n.name=t.name,n.parent=t.parent,n.url=t.url,n.folders=e,n.files=r,n}var yt={parseFolderResponse:function(){var t=a()(i.a.mark((function t(e){var r,n,o,s,u,c,f,l,h=arguments;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=h.length>1&&void 0!==h[1]?h[1]:e.url,t.next=3,e.text();case 3:return n=t.sent,o=new ht,t.next=7,o.queryTurtle(r,n,{thisDoc:""});case 7:return s=t.sent,u=vt(r,s),t.next=11,o.queryTurtle(r,n,{thisDoc:""},{ldp:"contains"});case 11:return c=t.sent,f=[],l=[],t.next=16,Promise.all(c.map(function(){var t=a()(i.a.mark((function t(e){var n,a,s;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.object,t.next=3,o.query(r,n);case 3:a=t.sent,(s=vt(n.value,a)).itemType.includes("Container")?(s.type="folder",f.push(s)):l.push(s);case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()));case 16:return t.abrupt("return",gt(u,f,l));case 17:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()},bt=(r(201),r(97)),_t=r.n(bt),mt=function(t){function e(t){var r,n;u()(this,e);for(var i=arguments.length,o=new Array(i>1?i-1:0),a=1;a<i;a++)o[a-1]=arguments[a];return(n=h()(this,(r=d()(e)).call.apply(r,[this].concat(o)))).name="SingleResponseError",o.length||(n.message="".concat(t.status," ").concat(t.url)),n.response=t,n.ok=!1,n.status=t.status,n.statusText=t.statusText,n.url=t.url,n}return b()(e,t),e}(_t()(Error)),wt=function(t){function e(t){var r,n,i=t.successful,o=void 0===i?[]:i,a=t.rejectedErrors,s=void 0===a?[]:a,c=t.errors,f=void 0===c?[]:c;u()(this,e);for(var l=arguments.length,p=new Array(l>1?l-1:0),v=1;v<l;v++)p[v-1]=arguments[v];return(n=h()(this,(r=d()(e)).call.apply(r,[this].concat(p)))).name="SFCFetchError",n.successful=o,n.rejected=s.map((function(t){return t.response})),n.rejectedErrors=s,n.errors=f,n.ok=!1,s.length?1!==s.length||f.length?(n.message="".concat(n.name," ").concat([].concat(x()(s),x()(f)).map((function(t){return t.message})).join("\\n")),n.status=-2,n.statusText=n.message):(n.message="".concat(n.name," ").concat(s[0].message),n.status=s[0].status,n.statusText=s[0].statusText):(n.message="".concat(n.name," ").concat(f.map((function(t){return t.message})).join("\\n")),n.status=-1,n.statusText=n.message),n.successful=o,n.rejected=s.map((function(t){return t.response})),n.rejectedErrors=s,n.errors=f,n}return b()(e,t),e}(_t()(Error)),xt={401:"Make sure that the user is properly logged in",403:"Make sure that the origin of your app is authorized for your pod",404:"The requested resource could not be found",409:"A conflict appeared. If you tried to delete a folder, make sure that it is empty",500:"An internal server error occured"};function kt(t){return Et.apply(this,arguments)}function Et(){return(Et=a()(i.a.mark((function t(e){var r;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.map((function(t){return t.then((function(t){return{status:"fulfilled",value:t}})).catch((function(t){return{status:"rejected",reason:t}}))})),t.abrupt("return",Promise.all(r));case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function St(){return(St=a()(i.a.mark((function t(e){var r,n,o,a,s,u,c,f;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,kt(e);case 2:if(n=t.sent,o=(r=[]).concat.apply(r,x()(n.filter((function(t){return"fulfilled"===t.status})).map((function(t){return t.value})))),!(a=n.filter((function(t){return"rejected"===t.status})).map((function(t){return t.reason}))).length){t.next=9;break}throw c=(s=[]).concat.apply(s,x()(a.map((function(t){return t.errors})))),f=(u=[]).concat.apply(u,x()(a.map((function(t){return t.rejectedErrors})))),new wt({successful:o,rejectedErrors:f,errors:c});case 9:return t.abrupt("return",o);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var jt={FetchError:wt,SingleResponseError:mt,assertResponseOk:function(t){if(!t.ok){var e=t.status in xt?new mt(t,"".concat(t.status," ").concat(t.url," - ").concat(xt[t.status])):new mt(t);throw new wt({successful:[],rejectedErrors:[e]})}return t},composedFetch:function(t){return St.apply(this,arguments)},promisesSettled:kt,toFetchError:function(t){throw t instanceof wt?t:t instanceof mt?new wt({rejectedErrors:[t]}):t instanceof Error?new wt({errors:[t]}):t}};r(204);function Rt(t,e){var r={};return function(t){if(t){return t.match(/<[^>]*>\\s*(\\s*;\\s*[^()<>@,;:"/[\\]?={} \\t]+=(([^\\(\\)<>@,;:"\\/\\[\\]\\?={} \\t]+)|("[^"]*")))*(,|$)/g)}}(t).map((function(t){var e=t.substring(t.indexOf("<")+1,t.indexOf(">")),r=t.substring(t.indexOf(\'rel="\')+\'rel="\'.length,t.lastIndexOf(\'"\'));return["describedby"===r.toLowerCase()?"meta":r,e]})).filter((function(t){var e=m()(t,1)[0];return["meta","acl"].includes(e)})).forEach((function(t){var n=m()(t,2),i=n[0],o=n[1];r[i]=function(t,e){var r,n,i,o,a,s=e.indexOf("#");s>0&&(e=e.slice(0,s));if(0===t.length)return e;if(0===t.indexOf("#"))return e+t;if(t.indexOf(":")>=0)return t;if(r=e.indexOf(":"),0===e.length)return t;if(r<0)return t;if(n=e.slice(0,+r+1||9e9),0===t.indexOf("//"))return n+t;if(e.indexOf("//",r)===r+1){if((i=e.indexOf("/",r+3))<0)return e.length-r-3>0?e+"/"+t:n+t}else if((i=e.indexOf("/",r+1))<0)return e.length-r-1>0?e+"/"+t:n+t;if(0===t.indexOf("/"))return e.slice(0,i)+t;if(a=e.slice(i),(o=a.lastIndexOf("/"))<0)return n+t;o>=0&&o<a.length-1&&(a=a.slice(0,+o+1||9e9));a+=t;for(;a.match(/[^\\/]*\\/\\.\\.\\//);)a=a.replace(/[^\\/]*\\/\\.\\.\\//,"");return a=(a=a.replace(/\\.\\//g,"")).replace(/\\/\\.$/,"/"),e.slice(0,i)+a}(o,e)})),r}var Ct=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.url,r=t.headers.get("link");return null===r?{}:Rt(r,e)};function It(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ot(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?It(Object(r),!0).forEach((function(e){E()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):It(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var Tt=j()("solid-file-client:fetch"),Pt=C,At=I,Lt=O,Ft=T,Mt=P,Nt=A,Bt=jt.FetchError,Dt=jt.assertResponseOk,Ut=jt.composedFetch,qt=jt.toFetchError,Gt=Ct,Wt=yt.parseFolderResponse,zt={REPLACE:"replace",KEEP_SOURCE:"keep_source",KEEP_TARGET:"keep_target"},Yt={EXCLUDE:"exclude",INCLUDE:"include",INCLUDE_POSSIBLE:"include_possible"},Qt="no_modify",$t="to_target",Ht="to_source",Kt={withAcl:!0,withMeta:!0,agent:Qt,merge:zt.REPLACE,createPath:!0},Vt={enableLogging:!1};function Zt(t){return Jt((function(e){return e.status===t}))}function Jt(t){return function(e){if(!t(e))throw qt(e);return e}}var Xt=function(t){function e(t,r){var n;return u()(this,e),(n=h()(this,d()(e).call(this,t.fetch.bind(t),r)))._auth=t,n}var r,n,o,s;return b()(e,t),f()(e,[{key:"readFile",value:(s=a()(i.a.mark((function t(e,r){var n,o;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.get(e,r);case 2:if(n=t.sent,!(o=n.headers.get("content-type"))||!o.match(/(image|audio|video)/)){t.next=6;break}return t.abrupt("return",n.blob());case 6:if(!n.text){t.next=8;break}return t.abrupt("return",n.text());case 8:return t.abrupt("return",n);case 9:case"end":return t.stop()}}),t,this)}))),function(t,e){return s.apply(this,arguments)})},{key:"readHead",value:(o=a()(i.a.mark((function t(r,n){var o,a,s,u,c,f,l,h;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,g()(d()(e.prototype),"head",this).call(this,r,n);case 2:for(o=t.sent,a="",s=!0,u=!1,c=void 0,t.prev=7,f=o.headers.entries()[Symbol.iterator]();!(s=(l=f.next()).done);s=!0)h=l.value,a+=h[0]+": "+h[1]+"\\n";t.next=15;break;case 11:t.prev=11,t.t0=t.catch(7),u=!0,c=t.t0;case 15:t.prev=15,t.prev=16,s||null==f.return||f.return();case 18:if(t.prev=18,!u){t.next=21;break}throw c;case 21:return t.finish(18);case 22:return t.finish(15);case 23:return t.abrupt("return",a);case 24:case"end":return t.stop()}}),t,this,[[7,11,15,23],[16,,18,22]])}))),function(t,e){return o.apply(this,arguments)})},{key:"deleteFile",value:(n=a()(i.a.mark((function t(r){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",g()(d()(e.prototype),"_deleteItemWithLinks",this).call(this,r));case 1:case"end":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:"deleteFolder",value:(r=a()(i.a.mark((function t(r,n){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",g()(d()(e.prototype),"deleteFolderRecursively",this).call(this,r));case 1:case"end":return t.stop()}}),t,this)}))),function(t,e){return r.apply(this,arguments)})}]),e}(function(){function t(e,r){u()(this,t),r=Ot({},Vt,{},r),this._fetch=e,this.rdf=new ht(this.fetch.bind(this)),r.enableLogging&&("string"==typeof r.enableLogging?j.a.enable(r.enableLogging):j.a.enable("solid-file-client:*"))}var e,r,n,o,s,c,l,h,p,d,v,g,y,b,_,w,k;return f()(t,[{key:"fetch",value:function(t,e){return this._fetch(t,e).then((function(r){return Tt("".concat(r.status," - ").concat(e&&e.method," ").concat(t)),r})).then(Dt)}},{key:"get",value:function(t,e){return this.fetch(t,Ot({},e,{method:"GET"}))}},{key:"delete",value:function(t,e){return this.fetch(t,Ot({},e,{method:"DELETE"}))}},{key:"post",value:function(t,e){return this.fetch(t,Ot({},e,{method:"POST"}))}},{key:"put",value:function(t,e){return this.fetch(t,Ot({},e,{method:"PUT"}))}},{key:"patch",value:function(t,e){return this.fetch(t,Ot({},e,{method:"PATCH"}))}},{key:"head",value:function(t,e){return this.fetch(t,Ot({},e,{method:"HEAD"}))}},{key:"options",value:function(t,e){return this.fetch(t,Ot({},e,{method:"OPTIONS"}))}},{key:"itemExists",value:(k=a()(i.a.mark((function t(e){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.head(e).then((function(){return!0})).catch((function(t){return Zt(404)(t),!1})));case 1:case"end":return t.stop()}}),t,this)}))),function(t){return k.apply(this,arguments)})},{key:"postItem",value:(w=a()(i.a.mark((function t(e,r,n,o,a){var s,u;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(a=Ot({},{createPath:!0},{},a),s=At(e),!a.createPath){t.next=5;break}return t.next=5,this.createFolder(s);case 5:return u={headers:{link:o,slug:Lt(e),"Content-Type":n},body:r},t.abrupt("return",this.post(s,u));case 7:case"end":return t.stop()}}),t,this)}))),function(t,e,r,n,i){return w.apply(this,arguments)})},{key:"createFolder",value:(_=a()(i.a.mark((function t(e,r){var n;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=Ot({},{createPath:!0,merge:zt.KEEP_TARGET},{},r),t.prev=1,t.next=4,this.head(e);case 4:if(n=t.sent,r.merge===zt.REPLACE){t.next=7;break}return t.abrupt("return",n);case 7:return t.next=9,this.deleteFolderRecursively(e);case 9:t.next=14;break;case 11:t.prev=11,t.t0=t.catch(1),Zt(404)(t.t0);case 14:return t.abrupt("return",this.postItem(e,"","text/turtle",Nt.CONTAINER,r));case 15:case"end":return t.stop()}}),t,this,[[1,11]])}))),function(t,e){return _.apply(this,arguments)})},{key:"postFile",value:function(t,e,r,n){return this.postItem(t,e,r,Nt.RESOURCE,n)}},{key:"createFile",value:function(t,e,r,n){return this.putFile(t,e,r,n)}},{key:"putFile",value:(b=a()(i.a.mark((function t(e,r,n,o){var a;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o=Ot({},Kt,{},o),t.t0=o.merge===zt.KEEP_TARGET,!t.t0){t.next=6;break}return t.next=5,this.itemExists(e);case 5:t.t0=t.sent;case 6:if(!t.t0){t.next=8;break}qt(new Error("File already existed: "+e));case 8:return a={headers:{link:Nt.RESOURCE,"Content-Type":n},body:r},t.abrupt("return",this.put(e,a));case 10:case"end":return t.stop()}}),t,this)}))),function(t,e,r,n){return b.apply(this,arguments)})},{key:"readFolder",value:(y=a()(i.a.mark((function t(e,r){var n,o,s,u=this;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=e.endsWith("/")?e:e+"/",r=Ot({links:Yt.EXCLUDE},r),t.next=4,this.get(e,{headers:{Accept:"text/turtle"}});case 4:return n=t.sent,t.next=7,Wt(n,e);case 7:if(o=t.sent,r.links!==Yt.INCLUDE_POSSIBLE&&r.links!==Yt.INCLUDE){t.next=12;break}return s=function(){var t=a()(i.a.mark((function t(e){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,u.getItemLinks(e.url,r);case 2:e.links=t.sent;case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),t.next=12,Ut([s(o)].concat(x()(o.files.map(s))));case 12:return t.abrupt("return",o);case 13:case"end":return t.stop()}}),t,this)}))),function(t,e){return y.apply(this,arguments)})},{key:"getItemLinks",value:(g=a()(i.a.mark((function t(e){var r,n,o=arguments;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return(r=o.length>1&&void 0!==o[1]?o[1]:{links:Yt.INCLUDE_POSSIBLE}).links===Yt.EXCLUDE&&qt(new Error("Invalid option LINKS.EXCLUDE for getItemLinks")),t.next=4,this.head(e).then(Gt);case 4:if(n=t.sent,r.links!==Yt.INCLUDE){t.next=8;break}return t.next=8,this._removeInexistingLinks(n);case 8:return t.abrupt("return",n);case 9:case"end":return t.stop()}}),t,this)}))),function(t){return g.apply(this,arguments)})},{key:"_removeInexistingLinks",value:(v=a()(i.a.mark((function t(e){var r=this;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Ut(Object.entries(e).map((function(t){var n=m()(t,2),i=n[0],o=n[1];return r.itemExists(o).catch(Zt(404)).then((function(t){t||delete e[i]}))})));case 2:case"end":return t.stop()}}),t)}))),function(t){return v.apply(this,arguments)})},{key:"copyFile",value:(d=a()(i.a.mark((function t(e,r,n){var o,a,s,u;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=Ot({},Kt,{},n),!e.endsWith("/")&&!r.endsWith("/")){t.next=3;break}throw qt(new Error("Folders are not allowed with copyFile. Found: ".concat(e," and ").concat(r)));case 3:if(!e.endsWith(".acl")&&!r.endsWith(".acl")){t.next=5;break}throw qt(new Error("Use copyAclFile for copying ACL files. Found: ".concat(e," and ").concat(r)));case 5:return t.next=7,this.get(e);case 7:return o=t.sent,t.next=10,o.blob();case 10:return a=t.sent,s=o.headers.get("content-type"),t.next=14,this.putFile(r,a,s,n);case 14:return u=t.sent,t.next=17,this.copyLinksForItem(e,r,n,o,u);case 17:return t.abrupt("return",u);case 18:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return d.apply(this,arguments)})},{key:"_linkUrlsDefined",value:(p=a()(i.a.mark((function t(e,r){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("string"==typeof e){t.next=4;break}return t.abrupt("return",!1);case 4:if(t.t0="string"!=typeof r,!t.t0){t.next=9;break}return t.next=8,this.itemExists(e);case 8:t.t0=t.sent;case 9:if(!t.t0){t.next=13;break}throw qt(new Error("Cannot copy link file because target location was not provided by the pod"));case 13:if("string"==typeof r){t.next=17;break}return t.abrupt("return",!1);case 17:return t.abrupt("return",!0);case 18:case"end":return t.stop()}}),t,this)}))),function(t,e){return p.apply(this,arguments)})},{key:"copyMetaFileForItem",value:(h=a()(i.a.mark((function t(e,r){var n,o,a,s,u,c=arguments;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=c.length>2&&void 0!==c[2]?c[2]:{},t.next=3,this.getItemLinks(e);case 3:return o=t.sent,a=o.meta,t.next=7,this.getItemLinks(r);case 7:return s=t.sent,u=s.meta,t.next=11,this._linkUrlsDefined(a,u);case 11:if(t.sent){t.next=13;break}return t.abrupt("return",void 0);case 13:return t.abrupt("return",this.copyFile(a,u,{withAcl:n.withAcl,withMeta:!1}));case 14:case"end":return t.stop()}}),t,this)}))),function(t,e){return h.apply(this,arguments)})},{key:"copyAclFileForItem",value:(l=a()(i.a.mark((function t(e,r,n){var o,a,s,u,c,f,l,h,p;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=Ot({},Kt,{},{agent:Qt},{},n),t.next=3,this.getItemLinks(e);case 3:return o=t.sent,a=o.acl,t.next=7,this.getItemLinks(r);case 7:return s=t.sent,u=s.acl,t.next=11,this._linkUrlsDefined(a,u);case 11:if(t.sent){t.next=13;break}return t.abrupt("return",void 0);case 13:return t.next=15,this.get(a);case 15:return c=t.sent,f=c.headers.get("Content-Type"),t.next=19,c.text();case 19:return l=t.sent,h=Lt(e),p=Ft(r)?"":Lt(r),l.includes(e)&&(l=l.replace(new RegExp("<"+e+">","g"),"<./"+p+">")),p!==h&&(l=l.replace(new RegExp(h+">","g"),p+">")),n.agent===$t&&(l=(l=l.replace(new RegExp("<"+Pt(e)+"profile/card#","g"),"</profile/card#")).replace(new RegExp("<"+Pt(e)+"profile/card#me>","g"),"</profile/card#me>")),n.agent===Ht&&(l=(l=l.replace(new RegExp("</profile/card#","g"),"<"+Pt(e)+"profile/card#")).replace(new RegExp("</profile/card#me>","g"),"<"+Pt(e)+"profile/card#me>")),t.abrupt("return",this.putFile(u,l,f,n));case 27:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return l.apply(this,arguments)})},{key:"copyLinksForItem",value:(c=a()(i.a.mark((function t(e,r,n){var o;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o=[],!n.withMeta){t.next=7;break}return t.t0=o,t.next=5,this.copyMetaFileForItem(e,r,n).catch(Zt(404));case 5:t.t1=t.sent,t.t0.push.call(t.t0,t.t1);case 7:if(!n.withAcl){t.next=13;break}return t.t2=o,t.next=11,this.copyAclFileForItem(e,r,n).catch(Zt(404));case 11:t.t3=t.sent,t.t2.push.call(t.t2,t.t3);case 13:return t.abrupt("return",o.filter((function(t){return t&&!(t instanceof Error)})));case 14:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return c.apply(this,arguments)})},{key:"copyFolder",value:(s=a()(i.a.mark((function t(e,r,n){var o,a,s,u,c,f,l=this;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=Ot({},Kt,{},n),"string"==typeof e&&"string"==typeof r){t.next=3;break}throw qt(new Error("The from and to parameters of copyFolder must be strings. Found: ".concat(e," and ").concat(r)));case 3:if(e.endsWith("/")&&r.endsWith("/")){t.next=5;break}throw qt(new Error("Files are not allowed with copyFolder. Found: ".concat(e," and ").concat(r)));case 5:return t.next=7,this.readFolder(e);case 7:return a=t.sent,s=a.folders,u=a.files,t.next=12,this.createFolder(r,n);case 12:return c=t.sent,t.next=15,this.copyLinksForItem(e,r,n,void 0,c);case 15:return t.next=17,Ut([].concat(x()(s.map((function(t){var i=t.name;return l.copyFolder("".concat(e).concat(i,"/"),"".concat(r).concat(i,"/"),n)}))),x()(u.map((function(t){var i=t.name;return l.copyFile("".concat(e).concat(i),"".concat(r).concat(i),n).catch(Jt((function(t){return t.message.includes("already existed")})))}))))).then((function(t){return t.filter((function(t){return!(t instanceof Bt)}))}));case 17:return f=t.sent,t.abrupt("return",(o=[c]).concat.apply(o,x()(f)));case 19:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return s.apply(this,arguments)})},{key:"copy",value:function(t,e,r){return Ft(t,e)?this.copyFolder(t,e,r):Mt(t,e)?this.copyFile(t,e,r):void qt(new Error("Cannot copy from a folder url to a file url or vice versa"))}},{key:"_deleteItemWithLinks",value:(o=a()(i.a.mark((function t(e){var r;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.getItemLinks(e,{links:Yt.INCLUDE});case 2:if(!(r=t.sent).meta){t.next=6;break}return t.next=6,this._deleteItemWithLinks(r.meta);case 6:if(!r.acl){t.next=9;break}return t.next=9,this.delete(r.acl);case 9:return t.abrupt("return",this.delete(e));case 10:case"end":return t.stop()}}),t,this)}))),function(t){return o.apply(this,arguments)})},{key:"deleteFolderContents",value:(n=a()(i.a.mark((function t(e){var r,n,o,a=this;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.readFolder(e);case 2:return r=t.sent,n=r.folders,o=r.files,t.abrupt("return",Ut([].concat(x()(n.map((function(t){var e=t.url;return a.deleteFolderRecursively(e)}))),x()(o.map((function(t){var e=t.url;return a._deleteItemWithLinks(e)}))))));case 6:case"end":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:"deleteFolderRecursively",value:(r=a()(i.a.mark((function t(e){var r;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.deleteFolderContents(e);case 2:return r=t.sent,t.t0=r,t.next=6,this._deleteItemWithLinks(e);case 6:return t.t1=t.sent,t.t0.unshift.call(t.t0,t.t1),t.abrupt("return",r);case 9:case"end":return t.stop()}}),t,this)}))),function(t){return r.apply(this,arguments)})},{key:"move",value:(e=a()(i.a.mark((function t(e,r,n){var o;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.copy(e,r,n);case 2:if(o=t.sent,!Ft(e)){t.next=8;break}return t.next=6,this.deleteFolderRecursively(e);case 6:t.next=10;break;case 8:return t.next=10,this._deleteItemWithLinks(e);case 10:return t.abrupt("return",o);case 11:case"end":return t.stop()}}),t,this)}))),function(t,r,n){return e.apply(this,arguments)})},{key:"rename",value:function(t,e,r){var n=At(t)+e+(Ft(t)?"/":"");return this.move(t,n,r)}}]),t}()),te=jt.FetchError,ee=jt.SingleResponseError;Xt.FetchError=te,Xt.SingleResponseError=ee,Xt.LINKS=Yt,Xt.MERGE=zt;e.default=Xt}]).default}));\n//# sourceMappingURL=solid-file-client.bundle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29saWQtZmlsZS1jbGllbnQvZGlzdC93aW5kb3cvc29saWQtZmlsZS1jbGllbnQuYnVuZGxlLmpzPzdmZWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxLQUFpRCxvQkFBb0IsU0FBNkgsQ0FBQyxvQkFBb0IsbUJBQW1CLFNBQVMsY0FBYyw0QkFBNEIsWUFBWSxxQkFBcUIsMkRBQTJELHVDQUF1QyxxQ0FBcUMsb0JBQW9CLEVBQUUsaUJBQWlCLDRGQUE0RixlQUFlLHdDQUF3QyxTQUFTLEVBQUUsbUJBQW1CLDhCQUE4QixxREFBcUQsMEJBQTBCLDZDQUE2QyxzQkFBc0IsNkRBQTZELFlBQVksZUFBZSxTQUFTLGlCQUFpQixpQ0FBaUMsaUJBQWlCLFlBQVksVUFBVSxzQkFBc0IsbUJBQW1CLGlEQUFpRCxtQkFBbUIsa0JBQWtCLGdCQUFnQixlQUFlLDBCQUEwQixJQUFJLHdCQUF3QixTQUFTLGlCQUFpQix5Q0FBeUMsc0JBQXNCLGtCQUFrQix1QkFBdUIsa0NBQWtDLG1CQUFtQixjQUFjLHNCQUFzQixjQUFjLHVCQUF1QixVQUFVLEtBQUssaUJBQWlCLDhEQUE4RCx3QkFBd0IsNkNBQTZDLHVCQUF1QixXQUFXLHdCQUF3QixpR0FBaUcsK0JBQStCLE9BQU8saURBQWlELGlCQUFpQixzR0FBc0csc0JBQXNCLCtEQUErRCxpQkFBaUIsYUFBYSxrQkFBa0IsMkJBQTJCLDhLQUE4SyxtQkFBbUIsZUFBZSxzQkFBc0IsSUFBSSxZQUFZLFNBQVMsV0FBVyxpQkFBaUIsYUFBYSw4SEFBOEgsS0FBSyxLQUFLLGdHQUFnRyxNQUFNLGtGQUFrRixNQUFNLDhDQUE4QyxJQUFJLGtEQUFrRCxNQUFNLDBCQUEwQixpQkFBaUIsV0FBVyx5QkFBeUIsa0NBQWtDLE1BQU0sZUFBZSxVQUFVLElBQUksR0FBRyxpQkFBaUIsWUFBWSxzQkFBc0Isd0RBQXdELFVBQVUsaUJBQWlCLCtCQUErQixzQkFBc0Isd0JBQXdC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R0FBRywwRUFBMEUsbUNBQW1DLFVBQVUsb0JBQW9CLCtCQUErQixFQUFFLEVBQUUsaUNBQWlDLG9KQUFvSixFQUFFLGdFQUFnRSxNQUFNLDZCQUE2QixNQUFNLHVCQUF1Qiw0Q0FBNEMsaUJBQWlCLEVBQUUsNEJBQTRCLFNBQVMsTUFBTSxrREFBa0Qsa0JBQWtCLFNBQVMsTUFBTSxtQ0FBbUMsZ0RBQWdELG1DQUFtQyxVQUFVLGdCQUFnQiwrQkFBK0IsRUFBRSxFQUFFLGdFQUFnRSxpQkFBaUIsNkJBQTZCLE1BQU0sdUJBQXVCLDBDQUEwQyxtR0FBbUcsWUFBWSxvQ0FBb0MsMkJBQTJCLFlBQVksaUNBQWlDLE9BQU8sa0NBQWtDLFVBQVUsZ0JBQWdCLCtCQUErQixFQUFFLEVBQUUsbUVBQW1FLE1BQU0sNkJBQTZCLE1BQU0sdUJBQXVCLG9EQUFvRCxvRUFBb0UsNEVBQTRFLGtDQUFrQyxVQUFVLGdCQUFnQiwrQkFBK0IsRUFBRSxFQUFFLG9EQUFvRCxNQUFNLDZCQUE2QixNQUFNLHVCQUF1Qix3Q0FBd0MsMkJBQTJCLFNBQVMsTUFBTSxnREFBZ0QsaUJBQWlCLE1BQU0scURBQXFELG9DQUFvQyxtQ0FBbUMsVUFBVSxvQkFBb0IsK0JBQStCLEVBQUUsRUFBRSxtQ0FBbUMsNkJBQTZCLHlCQUF5QixLQUFLLCtDQUErQyxtRUFBbUUsYUFBYSxXQUFXO0FBQ2o5K0kiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuU29saWRGaWxlQ2xpZW50PWUoKTp0LlNvbGlkRmlsZUNsaWVudD1lKCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gcihuKXtpZihlW25dKXJldHVybiBlW25dLmV4cG9ydHM7dmFyIGk9ZVtuXT17aTpuLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbbl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsciksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gci5tPXQsci5jPWUsci5kPWZ1bmN0aW9uKHQsZSxuKXtyLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxyLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sci50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1yKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoci5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgaSBpbiB0KXIuZChuLGksZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxpKSk7cmV0dXJuIG59LHIubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gci5kKGUsXCJhXCIsZSksZX0sci5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxyLnA9XCJcIixyKHIucz0yMDUpfShbZnVuY3Rpb24odCxlLHIpe3QuZXhwb3J0cz1yKDI4KX0sZnVuY3Rpb24odCxlKXtmdW5jdGlvbiByKHQsZSxyLG4saSxvLGEpe3RyeXt2YXIgcz10W29dKGEpLHU9cy52YWx1ZX1jYXRjaCh0KXtyZXR1cm4gdm9pZCByKHQpfXMuZG9uZT9lKHUpOlByb21pc2UucmVzb2x2ZSh1KS50aGVuKG4saSl9dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1hcmd1bWVudHM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihpLG8pe3ZhciBhPXQuYXBwbHkoZSxuKTtmdW5jdGlvbiBzKHQpe3IoYSxpLG8scyx1LFwibmV4dFwiLHQpfWZ1bmN0aW9uIHUodCl7cihhLGksbyxzLHUsXCJ0aHJvd1wiLHQpfXModm9pZCAwKX0pKX19fSxmdW5jdGlvbih0LGUscil7dmFyIG49cig0KSxpPXIoMjIpLmYsbz1yKDE0KSxhPXIoMTcpLHM9cig2MiksdT1yKDEwMSksYz1yKDY4KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcixmLGwsaCxwLGQ9dC50YXJnZXQsdj10Lmdsb2JhbCxnPXQuc3RhdDtpZihyPXY/bjpnP25bZF18fHMoZCx7fSk6KG5bZF18fHt9KS5wcm90b3R5cGUpZm9yKGYgaW4gZSl7aWYoaD1lW2ZdLGw9dC5ub1RhcmdldEdldD8ocD1pKHIsZikpJiZwLnZhbHVlOnJbZl0sIWModj9mOmQrKGc/XCIuXCI6XCIjXCIpK2YsdC5mb3JjZWQpJiZ2b2lkIDAhPT1sKXtpZih0eXBlb2YgaD09dHlwZW9mIGwpY29udGludWU7dShoLGwpfSh0LnNoYW18fGwmJmwuc2hhbSkmJm8oaCxcInNoYW1cIiwhMCksYShyLGYsaCx0KX19fSxmdW5jdGlvbih0LGUscil7dmFyIG49cig0KSxpPXIoNjQpLG89cigxMyksYT1yKDY1KSxzPXIoNjkpLHU9cigxMDcpLGM9aShcIndrc1wiKSxmPW4uU3ltYm9sLGw9dT9mOmYmJmYud2l0aG91dFNldHRlcnx8YTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIG8oYyx0KXx8KHMmJm8oZix0KT9jW3RdPWZbdF06Y1t0XT1sKFwiU3ltYm9sLlwiK3QpKSxjW3RdfX0sZnVuY3Rpb24odCxlLHIpeyhmdW5jdGlvbihlKXt2YXIgcj1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5NYXRoPT1NYXRoJiZ0fTt0LmV4cG9ydHM9cihcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsVGhpcyYmZ2xvYmFsVGhpcyl8fHIoXCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93KXx8cihcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZil8fHIoXCJvYmplY3RcIj09dHlwZW9mIGUmJmUpfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCl9KS5jYWxsKHRoaXMscigyMSkpfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt0cnl7cmV0dXJuISF0KCl9Y2F0Y2godCl7cmV0dXJuITB9fX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI1wiLGk9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNcIixvPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC8xMC9zd2FwL1wiO2UuYT17eHNkOntkZWNpbWFsOmkrXCJkZWNpbWFsXCIsYm9vbGVhbjppK1wiYm9vbGVhblwiLGRvdWJsZTppK1wiZG91YmxlXCIsaW50ZWdlcjppK1wiaW50ZWdlclwiLHN0cmluZzppK1wic3RyaW5nXCJ9LHJkZjp7dHlwZTpuK1widHlwZVwiLG5pbDpuK1wibmlsXCIsZmlyc3Q6bitcImZpcnN0XCIscmVzdDpuK1wicmVzdFwiLGxhbmdTdHJpbmc6bitcImxhbmdTdHJpbmdcIn0sb3dsOntzYW1lQXM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAyLzA3L293bCNzYW1lQXNcIn0scjp7Zm9yU29tZTpvK1wicmVpZnkjZm9yU29tZVwiLGZvckFsbDpvK1wicmVpZnkjZm9yQWxsXCJ9LGxvZzp7aW1wbGllczpvK1wibG9nI2ltcGxpZXNcIn19fSxmdW5jdGlvbih0LGUscil7dmFyIG49cig1KTt0LmV4cG9ydHM9IW4oKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pKX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMTApO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZighbih0KSl0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKHQpK1wiIGlzIG5vdCBhbiBvYmplY3RcIik7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxNjkpLGk9cigxNzApLG89cigxNzEpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0KXx8aSh0KXx8bygpfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIHQ/bnVsbCE9PXQ6XCJmdW5jdGlvblwiPT10eXBlb2YgdH19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDcpLGk9cig5OSksbz1yKDgpLGE9cig0Mykscz1PYmplY3QuZGVmaW5lUHJvcGVydHk7ZS5mPW4/czpmdW5jdGlvbih0LGUscil7aWYobyh0KSxlPWEoZSwhMCksbyhyKSxpKXRyeXtyZXR1cm4gcyh0LGUscil9Y2F0Y2godCl7fWlmKFwiZ2V0XCJpbiByfHxcInNldFwiaW4gcil0aHJvdyBUeXBlRXJyb3IoXCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZFwiKTtyZXR1cm5cInZhbHVlXCJpbiByJiYodFtlXT1yLnZhbHVlKSx0fX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNjApLGk9cigyMCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKGkodCkpfX0sZnVuY3Rpb24odCxlKXt2YXIgcj17fS5oYXNPd25Qcm9wZXJ0eTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gci5jYWxsKHQsZSl9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cig3KSxpPXIoMTEpLG89cigzMSk7dC5leHBvcnRzPW4/ZnVuY3Rpb24odCxlLHIpe3JldHVybiBpLmYodCxlLG8oMSxyKSl9OmZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdFtlXT1yLHR9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigzMiksaT1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHQ+MD9pKG4odCksOTAwNzE5OTI1NDc0MDk5MSk6MH19LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gcihlKXtyZXR1cm4gdC5leHBvcnRzPXI9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0scihlKX10LmV4cG9ydHM9cn0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNCksaT1yKDE0KSxvPXIoMTMpLGE9cig2Mikscz1yKDYzKSx1PXIoMjQpLGM9dS5nZXQsZj11LmVuZm9yY2UsbD1TdHJpbmcoU3RyaW5nKS5zcGxpdChcIlN0cmluZ1wiKTsodC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyLHMpe3ZhciB1PSEhcyYmISFzLnVuc2FmZSxjPSEhcyYmISFzLmVudW1lcmFibGUsaD0hIXMmJiEhcy5ub1RhcmdldEdldDtcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fG8ocixcIm5hbWVcIil8fGkocixcIm5hbWVcIixlKSxmKHIpLnNvdXJjZT1sLmpvaW4oXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTpcIlwiKSksdCE9PW4/KHU/IWgmJnRbZV0mJihjPSEwKTpkZWxldGUgdFtlXSxjP3RbZV09cjppKHQsZSxyKSk6Yz90W2VdPXI6YShlLHIpfSkoRnVuY3Rpb24ucHJvdG90eXBlLFwidG9TdHJpbmdcIiwoZnVuY3Rpb24oKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzJiZjKHRoaXMpLnNvdXJjZXx8cyh0aGlzKX0pKX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfX0sZnVuY3Rpb24odCxlKXt2YXIgcj17fS50b1N0cmluZzt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHIuY2FsbCh0KS5zbGljZSg4LC0xKX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKG51bGw9PXQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIrdCk7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUpe3ZhciByO3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKTt0cnl7cj1yfHxuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpfWNhdGNoKHQpe1wib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJihyPXdpbmRvdyl9dC5leHBvcnRzPXJ9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDcpLGk9cig1OSksbz1yKDMxKSxhPXIoMTIpLHM9cig0MyksdT1yKDEzKSxjPXIoOTkpLGY9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtlLmY9bj9mOmZ1bmN0aW9uKHQsZSl7aWYodD1hKHQpLGU9cyhlLCEwKSxjKXRyeXtyZXR1cm4gZih0LGUpfWNhdGNoKHQpe31pZih1KHQsZSkpcmV0dXJuIG8oIWkuZi5jYWxsKHQsZSksdFtlXSl9fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig1NSksaT1PYmplY3Qua2V5c3x8ZnVuY3Rpb24odCl7dmFyIGU9W107Zm9yKHZhciByIGluIHQpZS5wdXNoKHIpO3JldHVybiBlfTt0LmV4cG9ydHM9bDt2YXIgbz1yKDM5KTtvLmluaGVyaXRzPXIoMjkpO3ZhciBhPXIoMTM4KSxzPXIoOTUpO28uaW5oZXJpdHMobCxhKTtmb3IodmFyIHU9aShzLnByb3RvdHlwZSksYz0wO2M8dS5sZW5ndGg7YysrKXt2YXIgZj11W2NdO2wucHJvdG90eXBlW2ZdfHwobC5wcm90b3R5cGVbZl09cy5wcm90b3R5cGVbZl0pfWZ1bmN0aW9uIGwodCl7aWYoISh0aGlzIGluc3RhbmNlb2YgbCkpcmV0dXJuIG5ldyBsKHQpO2EuY2FsbCh0aGlzLHQpLHMuY2FsbCh0aGlzLHQpLHQmJiExPT09dC5yZWFkYWJsZSYmKHRoaXMucmVhZGFibGU9ITEpLHQmJiExPT09dC53cml0YWJsZSYmKHRoaXMud3JpdGFibGU9ITEpLHRoaXMuYWxsb3dIYWxmT3Blbj0hMCx0JiYhMT09PXQuYWxsb3dIYWxmT3BlbiYmKHRoaXMuYWxsb3dIYWxmT3Blbj0hMSksdGhpcy5vbmNlKFwiZW5kXCIsaCl9ZnVuY3Rpb24gaCgpe3RoaXMuYWxsb3dIYWxmT3Blbnx8dGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZHx8bi5uZXh0VGljayhwLHRoaXMpfWZ1bmN0aW9uIHAodCl7dC5lbmQoKX1PYmplY3QuZGVmaW5lUHJvcGVydHkobC5wcm90b3R5cGUsXCJ3cml0YWJsZUhpZ2hXYXRlck1hcmtcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsLnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fcmVhZGFibGVTdGF0ZSYmdm9pZCAwIT09dGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkJiZ0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCl9LHNldDpmdW5jdGlvbih0KXt2b2lkIDAhPT10aGlzLl9yZWFkYWJsZVN0YXRlJiZ2b2lkIDAhPT10aGlzLl93cml0YWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9dCx0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD10KX19KSxsLnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbih0LGUpe3RoaXMucHVzaChudWxsKSx0aGlzLmVuZCgpLG4ubmV4dFRpY2soZSx0KX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbixpLG8sYT1yKDE0Nykscz1yKDQpLHU9cigxMCksYz1yKDE0KSxmPXIoMTMpLGw9cig0NCksaD1yKDQ1KSxwPXMuV2Vha01hcDtpZihhKXt2YXIgZD1uZXcgcCx2PWQuZ2V0LGc9ZC5oYXMseT1kLnNldDtuPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHkuY2FsbChkLHQsZSksZX0saT1mdW5jdGlvbih0KXtyZXR1cm4gdi5jYWxsKGQsdCl8fHt9fSxvPWZ1bmN0aW9uKHQpe3JldHVybiBnLmNhbGwoZCx0KX19ZWxzZXt2YXIgYj1sKFwic3RhdGVcIik7aFtiXT0hMCxuPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGModCxiLGUpLGV9LGk9ZnVuY3Rpb24odCl7cmV0dXJuIGYodCxiKT90W2JdOnt9fSxvPWZ1bmN0aW9uKHQpe3JldHVybiBmKHQsYil9fXQuZXhwb3J0cz17c2V0Om4sZ2V0OmksaGFzOm8sZW5mb3JjZTpmdW5jdGlvbih0KXtyZXR1cm4gbyh0KT9pKHQpOm4odCx7fSl9LGdldHRlckZvcjpmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI7aWYoIXUoZSl8fChyPWkoZSkpLnR5cGUhPT10KXRocm93IFR5cGVFcnJvcihcIkluY29tcGF0aWJsZSByZWNlaXZlciwgXCIrdCtcIiByZXF1aXJlZFwiKTtyZXR1cm4gcn19fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ITF9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDEwMyksaT1yKDQpLG89ZnVuY3Rpb24odCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD90OnZvaWQgMH07dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8Mj9vKG5bdF0pfHxvKGlbdF0pOm5bdF0mJm5bdF1bZV18fGlbdF0mJmlbdF1bZV19fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigyMCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3Qobih0KSl9fSxmdW5jdGlvbih0LGUscil7dmFyIG49ZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9T2JqZWN0LnByb3RvdHlwZSxyPWUuaGFzT3duUHJvcGVydHksbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LGk9bi5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsbz1uLmFzeW5jSXRlcmF0b3J8fFwiQEBhc3luY0l0ZXJhdG9yXCIsYT1uLnRvU3RyaW5nVGFnfHxcIkBAdG9TdHJpbmdUYWdcIjtmdW5jdGlvbiBzKHQsZSxyLG4pe3ZhciBpPWUmJmUucHJvdG90eXBlIGluc3RhbmNlb2YgZj9lOmYsbz1PYmplY3QuY3JlYXRlKGkucHJvdG90eXBlKSxhPW5ldyB4KG58fFtdKTtyZXR1cm4gby5faW52b2tlPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1cInN1c3BlbmRlZFN0YXJ0XCI7cmV0dXJuIGZ1bmN0aW9uKGksbyl7aWYoXCJleGVjdXRpbmdcIj09PW4pdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtpZihcImNvbXBsZXRlZFwiPT09bil7aWYoXCJ0aHJvd1wiPT09aSl0aHJvdyBvO3JldHVybiBFKCl9Zm9yKHIubWV0aG9kPWksci5hcmc9bzs7KXt2YXIgYT1yLmRlbGVnYXRlO2lmKGEpe3ZhciBzPV8oYSxyKTtpZihzKXtpZihzPT09Yyljb250aW51ZTtyZXR1cm4gc319aWYoXCJuZXh0XCI9PT1yLm1ldGhvZClyLnNlbnQ9ci5fc2VudD1yLmFyZztlbHNlIGlmKFwidGhyb3dcIj09PXIubWV0aG9kKXtpZihcInN1c3BlbmRlZFN0YXJ0XCI9PT1uKXRocm93IG49XCJjb21wbGV0ZWRcIixyLmFyZztyLmRpc3BhdGNoRXhjZXB0aW9uKHIuYXJnKX1lbHNlXCJyZXR1cm5cIj09PXIubWV0aG9kJiZyLmFicnVwdChcInJldHVyblwiLHIuYXJnKTtuPVwiZXhlY3V0aW5nXCI7dmFyIGY9dSh0LGUscik7aWYoXCJub3JtYWxcIj09PWYudHlwZSl7aWYobj1yLmRvbmU/XCJjb21wbGV0ZWRcIjpcInN1c3BlbmRlZFlpZWxkXCIsZi5hcmc9PT1jKWNvbnRpbnVlO3JldHVybnt2YWx1ZTpmLmFyZyxkb25lOnIuZG9uZX19XCJ0aHJvd1wiPT09Zi50eXBlJiYobj1cImNvbXBsZXRlZFwiLHIubWV0aG9kPVwidGhyb3dcIixyLmFyZz1mLmFyZyl9fX0odCxyLGEpLG99ZnVuY3Rpb24gdSh0LGUscil7dHJ5e3JldHVybnt0eXBlOlwibm9ybWFsXCIsYXJnOnQuY2FsbChlLHIpfX1jYXRjaCh0KXtyZXR1cm57dHlwZTpcInRocm93XCIsYXJnOnR9fX10LndyYXA9czt2YXIgYz17fTtmdW5jdGlvbiBmKCl7fWZ1bmN0aW9uIGwoKXt9ZnVuY3Rpb24gaCgpe312YXIgcD17fTtwW2ldPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3ZhciBkPU9iamVjdC5nZXRQcm90b3R5cGVPZix2PWQmJmQoZChrKFtdKSkpO3YmJnYhPT1lJiZyLmNhbGwodixpKSYmKHA9dik7dmFyIGc9aC5wcm90b3R5cGU9Zi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShwKTtmdW5jdGlvbiB5KHQpe1tcIm5leHRcIixcInRocm93XCIsXCJyZXR1cm5cIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dFtlXT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5faW52b2tlKGUsdCl9fSkpfWZ1bmN0aW9uIGIodCl7dmFyIGU7dGhpcy5faW52b2tlPWZ1bmN0aW9uKG4saSl7ZnVuY3Rpb24gbygpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSxvKXshZnVuY3Rpb24gZShuLGksbyxhKXt2YXIgcz11KHRbbl0sdCxpKTtpZihcInRocm93XCIhPT1zLnR5cGUpe3ZhciBjPXMuYXJnLGY9Yy52YWx1ZTtyZXR1cm4gZiYmXCJvYmplY3RcIj09dHlwZW9mIGYmJnIuY2FsbChmLFwiX19hd2FpdFwiKT9Qcm9taXNlLnJlc29sdmUoZi5fX2F3YWl0KS50aGVuKChmdW5jdGlvbih0KXtlKFwibmV4dFwiLHQsbyxhKX0pLChmdW5jdGlvbih0KXtlKFwidGhyb3dcIix0LG8sYSl9KSk6UHJvbWlzZS5yZXNvbHZlKGYpLnRoZW4oKGZ1bmN0aW9uKHQpe2MudmFsdWU9dCxvKGMpfSksKGZ1bmN0aW9uKHQpe3JldHVybiBlKFwidGhyb3dcIix0LG8sYSl9KSl9YShzLmFyZyl9KG4saSxlLG8pfSkpfXJldHVybiBlPWU/ZS50aGVuKG8sbyk6bygpfX1mdW5jdGlvbiBfKHQsZSl7dmFyIHI9dC5pdGVyYXRvcltlLm1ldGhvZF07aWYodm9pZCAwPT09cil7aWYoZS5kZWxlZ2F0ZT1udWxsLFwidGhyb3dcIj09PWUubWV0aG9kKXtpZih0Lml0ZXJhdG9yLnJldHVybiYmKGUubWV0aG9kPVwicmV0dXJuXCIsZS5hcmc9dm9pZCAwLF8odCxlKSxcInRocm93XCI9PT1lLm1ldGhvZCkpcmV0dXJuIGM7ZS5tZXRob2Q9XCJ0aHJvd1wiLGUuYXJnPW5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpfXJldHVybiBjfXZhciBuPXUocix0Lml0ZXJhdG9yLGUuYXJnKTtpZihcInRocm93XCI9PT1uLnR5cGUpcmV0dXJuIGUubWV0aG9kPVwidGhyb3dcIixlLmFyZz1uLmFyZyxlLmRlbGVnYXRlPW51bGwsYzt2YXIgaT1uLmFyZztyZXR1cm4gaT9pLmRvbmU/KGVbdC5yZXN1bHROYW1lXT1pLnZhbHVlLGUubmV4dD10Lm5leHRMb2MsXCJyZXR1cm5cIiE9PWUubWV0aG9kJiYoZS5tZXRob2Q9XCJuZXh0XCIsZS5hcmc9dm9pZCAwKSxlLmRlbGVnYXRlPW51bGwsYyk6aTooZS5tZXRob2Q9XCJ0aHJvd1wiLGUuYXJnPW5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSxlLmRlbGVnYXRlPW51bGwsYyl9ZnVuY3Rpb24gbSh0KXt2YXIgZT17dHJ5TG9jOnRbMF19OzEgaW4gdCYmKGUuY2F0Y2hMb2M9dFsxXSksMiBpbiB0JiYoZS5maW5hbGx5TG9jPXRbMl0sZS5hZnRlckxvYz10WzNdKSx0aGlzLnRyeUVudHJpZXMucHVzaChlKX1mdW5jdGlvbiB3KHQpe3ZhciBlPXQuY29tcGxldGlvbnx8e307ZS50eXBlPVwibm9ybWFsXCIsZGVsZXRlIGUuYXJnLHQuY29tcGxldGlvbj1lfWZ1bmN0aW9uIHgodCl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOlwicm9vdFwifV0sdC5mb3JFYWNoKG0sdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gayh0KXtpZih0KXt2YXIgZT10W2ldO2lmKGUpcmV0dXJuIGUuY2FsbCh0KTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm5leHQpcmV0dXJuIHQ7aWYoIWlzTmFOKHQubGVuZ3RoKSl7dmFyIG49LTEsbz1mdW5jdGlvbiBlKCl7Zm9yKDsrK248dC5sZW5ndGg7KWlmKHIuY2FsbCh0LG4pKXJldHVybiBlLnZhbHVlPXRbbl0sZS5kb25lPSExLGU7cmV0dXJuIGUudmFsdWU9dm9pZCAwLGUuZG9uZT0hMCxlfTtyZXR1cm4gby5uZXh0PW99fXJldHVybntuZXh0OkV9fWZ1bmN0aW9uIEUoKXtyZXR1cm57dmFsdWU6dm9pZCAwLGRvbmU6ITB9fXJldHVybiBsLnByb3RvdHlwZT1nLmNvbnN0cnVjdG9yPWgsaC5jb25zdHJ1Y3Rvcj1sLGhbYV09bC5kaXNwbGF5TmFtZT1cIkdlbmVyYXRvckZ1bmN0aW9uXCIsdC5pc0dlbmVyYXRvckZ1bmN0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQuY29uc3RydWN0b3I7cmV0dXJuISFlJiYoZT09PWx8fFwiR2VuZXJhdG9yRnVuY3Rpb25cIj09PShlLmRpc3BsYXlOYW1lfHxlLm5hbWUpKX0sdC5tYXJrPWZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsaCk6KHQuX19wcm90b19fPWgsYSBpbiB0fHwodFthXT1cIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSx0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcpLHR9LHQuYXdyYXA9ZnVuY3Rpb24odCl7cmV0dXJue19fYXdhaXQ6dH19LHkoYi5wcm90b3R5cGUpLGIucHJvdG90eXBlW29dPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHQuQXN5bmNJdGVyYXRvcj1iLHQuYXN5bmM9ZnVuY3Rpb24oZSxyLG4saSl7dmFyIG89bmV3IGIocyhlLHIsbixpKSk7cmV0dXJuIHQuaXNHZW5lcmF0b3JGdW5jdGlvbihyKT9vOm8ubmV4dCgpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRvbmU/dC52YWx1ZTpvLm5leHQoKX0pKX0seShnKSxnW2FdPVwiR2VuZXJhdG9yXCIsZ1tpXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxnLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IEdlbmVyYXRvcl1cIn0sdC5rZXlzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO2Zvcih2YXIgciBpbiB0KWUucHVzaChyKTtyZXR1cm4gZS5yZXZlcnNlKCksZnVuY3Rpb24gcigpe2Zvcig7ZS5sZW5ndGg7KXt2YXIgbj1lLnBvcCgpO2lmKG4gaW4gdClyZXR1cm4gci52YWx1ZT1uLHIuZG9uZT0hMSxyfXJldHVybiByLmRvbmU9ITAscn19LHQudmFsdWVzPWsseC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOngscmVzZXQ6ZnVuY3Rpb24odCl7aWYodGhpcy5wcmV2PTAsdGhpcy5uZXh0PTAsdGhpcy5zZW50PXRoaXMuX3NlbnQ9dm9pZCAwLHRoaXMuZG9uZT0hMSx0aGlzLmRlbGVnYXRlPW51bGwsdGhpcy5tZXRob2Q9XCJuZXh0XCIsdGhpcy5hcmc9dm9pZCAwLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHcpLCF0KWZvcih2YXIgZSBpbiB0aGlzKVwidFwiPT09ZS5jaGFyQXQoMCkmJnIuY2FsbCh0aGlzLGUpJiYhaXNOYU4oK2Uuc2xpY2UoMSkpJiYodGhpc1tlXT12b2lkIDApfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciB0PXRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uO2lmKFwidGhyb3dcIj09PXQudHlwZSl0aHJvdyB0LmFyZztyZXR1cm4gdGhpcy5ydmFsfSxkaXNwYXRjaEV4Y2VwdGlvbjpmdW5jdGlvbih0KXtpZih0aGlzLmRvbmUpdGhyb3cgdDt2YXIgZT10aGlzO2Z1bmN0aW9uIG4ocixuKXtyZXR1cm4gYS50eXBlPVwidGhyb3dcIixhLmFyZz10LGUubmV4dD1yLG4mJihlLm1ldGhvZD1cIm5leHRcIixlLmFyZz12b2lkIDApLCEhbn1mb3IodmFyIGk9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2k+PTA7LS1pKXt2YXIgbz10aGlzLnRyeUVudHJpZXNbaV0sYT1vLmNvbXBsZXRpb247aWYoXCJyb290XCI9PT1vLnRyeUxvYylyZXR1cm4gbihcImVuZFwiKTtpZihvLnRyeUxvYzw9dGhpcy5wcmV2KXt2YXIgcz1yLmNhbGwobyxcImNhdGNoTG9jXCIpLHU9ci5jYWxsKG8sXCJmaW5hbGx5TG9jXCIpO2lmKHMmJnUpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiBuKG8uY2F0Y2hMb2MsITApO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIG4oby5maW5hbGx5TG9jKX1lbHNlIGlmKHMpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiBuKG8uY2F0Y2hMb2MsITApfWVsc2V7aWYoIXUpdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7aWYodGhpcy5wcmV2PG8uZmluYWxseUxvYylyZXR1cm4gbihvLmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO24+PTA7LS1uKXt2YXIgaT10aGlzLnRyeUVudHJpZXNbbl07aWYoaS50cnlMb2M8PXRoaXMucHJldiYmci5jYWxsKGksXCJmaW5hbGx5TG9jXCIpJiZ0aGlzLnByZXY8aS5maW5hbGx5TG9jKXt2YXIgbz1pO2JyZWFrfX1vJiYoXCJicmVha1wiPT09dHx8XCJjb250aW51ZVwiPT09dCkmJm8udHJ5TG9jPD1lJiZlPD1vLmZpbmFsbHlMb2MmJihvPW51bGwpO3ZhciBhPW8/by5jb21wbGV0aW9uOnt9O3JldHVybiBhLnR5cGU9dCxhLmFyZz1lLG8/KHRoaXMubWV0aG9kPVwibmV4dFwiLHRoaXMubmV4dD1vLmZpbmFsbHlMb2MsYyk6dGhpcy5jb21wbGV0ZShhKX0sY29tcGxldGU6ZnVuY3Rpb24odCxlKXtpZihcInRocm93XCI9PT10LnR5cGUpdGhyb3cgdC5hcmc7cmV0dXJuXCJicmVha1wiPT09dC50eXBlfHxcImNvbnRpbnVlXCI9PT10LnR5cGU/dGhpcy5uZXh0PXQuYXJnOlwicmV0dXJuXCI9PT10LnR5cGU/KHRoaXMucnZhbD10aGlzLmFyZz10LmFyZyx0aGlzLm1ldGhvZD1cInJldHVyblwiLHRoaXMubmV4dD1cImVuZFwiKTpcIm5vcm1hbFwiPT09dC50eXBlJiZlJiYodGhpcy5uZXh0PWUpLGN9LGZpbmlzaDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2U+PTA7LS1lKXt2YXIgcj10aGlzLnRyeUVudHJpZXNbZV07aWYoci5maW5hbGx5TG9jPT09dClyZXR1cm4gdGhpcy5jb21wbGV0ZShyLmNvbXBsZXRpb24sci5hZnRlckxvYyksdyhyKSxjfX0sY2F0Y2g6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtlPj0wOy0tZSl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW2VdO2lmKHIudHJ5TG9jPT09dCl7dmFyIG49ci5jb21wbGV0aW9uO2lmKFwidGhyb3dcIj09PW4udHlwZSl7dmFyIGk9bi5hcmc7dyhyKX1yZXR1cm4gaX19dGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpfSxkZWxlZ2F0ZVlpZWxkOmZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZT17aXRlcmF0b3I6ayh0KSxyZXN1bHROYW1lOmUsbmV4dExvYzpyfSxcIm5leHRcIj09PXRoaXMubWV0aG9kJiYodGhpcy5hcmc9dm9pZCAwKSxjfX0sdH0odC5leHBvcnRzKTt0cnl7cmVnZW5lcmF0b3JSdW50aW1lPW59Y2F0Y2godCl7RnVuY3Rpb24oXCJyXCIsXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKG4pfX0sZnVuY3Rpb24odCxlKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuY3JlYXRlP3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3Quc3VwZXJfPWUsdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSl9OnQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3Quc3VwZXJfPWU7dmFyIHI9ZnVuY3Rpb24oKXt9O3IucHJvdG90eXBlPWUucHJvdG90eXBlLHQucHJvdG90eXBlPW5ldyByLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXR9fSxmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIHIodCxlKXtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG49ZVtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbi5rZXksbil9fXQuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGUmJnIodC5wcm90b3R5cGUsZSksbiYmcih0LG4pLHR9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybntlbnVtZXJhYmxlOiEoMSZ0KSxjb25maWd1cmFibGU6ISgyJnQpLHdyaXRhYmxlOiEoNCZ0KSx2YWx1ZTplfX19LGZ1bmN0aW9uKHQsZSl7dmFyIHI9TWF0aC5jZWlsLG49TWF0aC5mbG9vcjt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIGlzTmFOKHQ9K3QpPzA6KHQ+MD9uOnIpKHQpfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNzEpLGk9cig2MCksbz1yKDI3KSxhPXIoMTUpLHM9cigxMTIpLHU9W10ucHVzaCxjPWZ1bmN0aW9uKHQpe3ZhciBlPTE9PXQscj0yPT10LGM9Mz09dCxmPTQ9PXQsbD02PT10LGg9NT09dHx8bDtyZXR1cm4gZnVuY3Rpb24ocCxkLHYsZyl7Zm9yKHZhciB5LGIsXz1vKHApLG09aShfKSx3PW4oZCx2LDMpLHg9YShtLmxlbmd0aCksaz0wLEU9Z3x8cyxTPWU/RShwLHgpOnI/RShwLDApOnZvaWQgMDt4Pms7aysrKWlmKChofHxrIGluIG0pJiYoYj13KHk9bVtrXSxrLF8pLHQpKWlmKGUpU1trXT1iO2Vsc2UgaWYoYilzd2l0Y2godCl7Y2FzZSAzOnJldHVybiEwO2Nhc2UgNTpyZXR1cm4geTtjYXNlIDY6cmV0dXJuIGs7Y2FzZSAyOnUuY2FsbChTLHkpfWVsc2UgaWYoZilyZXR1cm4hMTtyZXR1cm4gbD8tMTpjfHxmP2Y6U319O3QuZXhwb3J0cz17Zm9yRWFjaDpjKDApLG1hcDpjKDEpLGZpbHRlcjpjKDIpLHNvbWU6YygzKSxldmVyeTpjKDQpLGZpbmQ6Yyg1KSxmaW5kSW5kZXg6Yyg2KX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXt9fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoNTMpO24oe3RhcmdldDpcIlJlZ0V4cFwiLHByb3RvOiEwLGZvcmNlZDovLi8uZXhlYyE9PWl9LHtleGVjOml9KX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNSk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dmFyIHI9W11bdF07cmV0dXJuIXJ8fCFuKChmdW5jdGlvbigpe3IuY2FsbChudWxsLGV8fGZ1bmN0aW9uKCl7dGhyb3cgMX0sMSl9KSl9fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoMzMpLm1hcCxvPXIoNSksYT1yKDU0KShcIm1hcFwiKSxzPWEmJiFvKChmdW5jdGlvbigpe1tdLm1hcC5jYWxsKHtsZW5ndGg6LTEsMDoxfSwoZnVuY3Rpb24odCl7dGhyb3cgdH0pKX0pKTtuKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDohYXx8IXN9LHttYXA6ZnVuY3Rpb24odCl7cmV0dXJuIGkodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sZnVuY3Rpb24odCxlKXt2YXIgcixuLGk9dC5leHBvcnRzPXt9O2Z1bmN0aW9uIG8oKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGEoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gcyh0KXtpZihyPT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dCh0LDApO2lmKChyPT09b3x8IXIpJiZzZXRUaW1lb3V0KXJldHVybiByPXNldFRpbWVvdXQsc2V0VGltZW91dCh0LDApO3RyeXtyZXR1cm4gcih0LDApfWNhdGNoKGUpe3RyeXtyZXR1cm4gci5jYWxsKG51bGwsdCwwKX1jYXRjaChlKXtyZXR1cm4gci5jYWxsKHRoaXMsdCwwKX19fSFmdW5jdGlvbigpe3RyeXtyPVwiZnVuY3Rpb25cIj09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpvfWNhdGNoKHQpe3I9b310cnl7bj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OmF9Y2F0Y2godCl7bj1hfX0oKTt2YXIgdSxjPVtdLGY9ITEsbD0tMTtmdW5jdGlvbiBoKCl7ZiYmdSYmKGY9ITEsdS5sZW5ndGg/Yz11LmNvbmNhdChjKTpsPS0xLGMubGVuZ3RoJiZwKCkpfWZ1bmN0aW9uIHAoKXtpZighZil7dmFyIHQ9cyhoKTtmPSEwO2Zvcih2YXIgZT1jLmxlbmd0aDtlOyl7Zm9yKHU9YyxjPVtdOysrbDxlOyl1JiZ1W2xdLnJ1bigpO2w9LTEsZT1jLmxlbmd0aH11PW51bGwsZj0hMSxmdW5jdGlvbih0KXtpZihuPT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQodCk7aWYoKG49PT1hfHwhbikmJmNsZWFyVGltZW91dClyZXR1cm4gbj1jbGVhclRpbWVvdXQsY2xlYXJUaW1lb3V0KHQpO3RyeXtuKHQpfWNhdGNoKGUpe3RyeXtyZXR1cm4gbi5jYWxsKG51bGwsdCl9Y2F0Y2goZSl7cmV0dXJuIG4uY2FsbCh0aGlzLHQpfX19KHQpfX1mdW5jdGlvbiBkKHQsZSl7dGhpcy5mdW49dCx0aGlzLmFycmF5PWV9ZnVuY3Rpb24gdigpe31pLm5leHRUaWNrPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKWVbci0xXT1hcmd1bWVudHNbcl07Yy5wdXNoKG5ldyBkKHQsZSkpLDEhPT1jLmxlbmd0aHx8Znx8cyhwKX0sZC5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX0saS50aXRsZT1cImJyb3dzZXJcIixpLmJyb3dzZXI9ITAsaS5lbnY9e30saS5hcmd2PVtdLGkudmVyc2lvbj1cIlwiLGkudmVyc2lvbnM9e30saS5vbj12LGkuYWRkTGlzdGVuZXI9dixpLm9uY2U9dixpLm9mZj12LGkucmVtb3ZlTGlzdGVuZXI9dixpLnJlbW92ZUFsbExpc3RlbmVycz12LGkuZW1pdD12LGkucHJlcGVuZExpc3RlbmVyPXYsaS5wcmVwZW5kT25jZUxpc3RlbmVyPXYsaS5saXN0ZW5lcnM9ZnVuY3Rpb24odCl7cmV0dXJuW119LGkuYmluZGluZz1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX0saS5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn0saS5jaGRpcj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9LGkudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LGZ1bmN0aW9uKHQsZSxyKXsoZnVuY3Rpb24odCl7ZnVuY3Rpb24gcih0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfWUuaXNBcnJheT1mdW5jdGlvbih0KXtyZXR1cm4gQXJyYXkuaXNBcnJheT9BcnJheS5pc0FycmF5KHQpOlwiW29iamVjdCBBcnJheV1cIj09PXIodCl9LGUuaXNCb29sZWFuPWZ1bmN0aW9uKHQpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgdH0sZS5pc051bGw9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PT10fSxlLmlzTnVsbE9yVW5kZWZpbmVkPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT10fSxlLmlzTnVtYmVyPWZ1bmN0aW9uKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0fSxlLmlzU3RyaW5nPWZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0fSxlLmlzU3ltYm9sPWZ1bmN0aW9uKHQpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiB0fSxlLmlzVW5kZWZpbmVkPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10fSxlLmlzUmVnRXhwPWZ1bmN0aW9uKHQpe3JldHVyblwiW29iamVjdCBSZWdFeHBdXCI9PT1yKHQpfSxlLmlzT2JqZWN0PWZ1bmN0aW9uKHQpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB0JiZudWxsIT09dH0sZS5pc0RhdGU9ZnVuY3Rpb24odCl7cmV0dXJuXCJbb2JqZWN0IERhdGVdXCI9PT1yKHQpfSxlLmlzRXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuXCJbb2JqZWN0IEVycm9yXVwiPT09cih0KXx8dCBpbnN0YW5jZW9mIEVycm9yfSxlLmlzRnVuY3Rpb249ZnVuY3Rpb24odCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdH0sZS5pc1ByaW1pdGl2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09PXR8fFwiYm9vbGVhblwiPT10eXBlb2YgdHx8XCJudW1iZXJcIj09dHlwZW9mIHR8fFwic3RyaW5nXCI9PXR5cGVvZiB0fHxcInN5bWJvbFwiPT10eXBlb2YgdHx8dm9pZCAwPT09dH0sZS5pc0J1ZmZlcj10LmlzQnVmZmVyfSkuY2FsbCh0aGlzLHIoOTIpLkJ1ZmZlcil9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDk2KSxpPXIoMTU1KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4hZXx8XCJvYmplY3RcIiE9PW4oZSkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGU/aSh0KTplfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoODApO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUmJmUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dCx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmbih0LGUpfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMTY2KSxpPXIoMTY3KSxvPXIoMTY4KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbih0KXx8aSh0LGUpfHxvKCl9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxMCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoIW4odCkpcmV0dXJuIHQ7dmFyIHIsaTtpZihlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihyPXQudG9TdHJpbmcpJiYhbihpPXIuY2FsbCh0KSkpcmV0dXJuIGk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Yocj10LnZhbHVlT2YpJiYhbihpPXIuY2FsbCh0KSkpcmV0dXJuIGk7aWYoIWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mKHI9dC50b1N0cmluZykmJiFuKGk9ci5jYWxsKHQpKSlyZXR1cm4gaTt0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIil9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cig2NCksaT1yKDY1KSxvPW4oXCJrZXlzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gb1t0XXx8KG9bdF09aSh0KSl9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17fX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMTA0KSxpPXIoNjcpLmNvbmNhdChcImxlbmd0aFwiLFwicHJvdG90eXBlXCIpO2UuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc3x8ZnVuY3Rpb24odCl7cmV0dXJuIG4odCxpKX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDE5KTt0LmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24odCl7cmV0dXJuXCJBcnJheVwiPT1uKHQpfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMTA0KSxpPXIoNjcpO3QuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24odCl7cmV0dXJuIG4odCxpKX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDExKS5mLGk9cigxMyksbz1yKDMpKFwidG9TdHJpbmdUYWdcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXt0JiYhaSh0PXI/dDp0LnByb3RvdHlwZSxvKSYmbih0LG8se2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTplfSl9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IFR5cGVFcnJvcihTdHJpbmcodCkrXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMiksaT1yKDExMyksbz1yKDM0KSxhPXIoMjQpLHM9cigxMTQpLHU9YS5zZXQsYz1hLmdldHRlckZvcihcIkFycmF5IEl0ZXJhdG9yXCIpO3QuZXhwb3J0cz1zKEFycmF5LFwiQXJyYXlcIiwoZnVuY3Rpb24odCxlKXt1KHRoaXMse3R5cGU6XCJBcnJheSBJdGVyYXRvclwiLHRhcmdldDpuKHQpLGluZGV4OjAsa2luZDplfSl9KSwoZnVuY3Rpb24oKXt2YXIgdD1jKHRoaXMpLGU9dC50YXJnZXQscj10LmtpbmQsbj10LmluZGV4Kys7cmV0dXJuIWV8fG4+PWUubGVuZ3RoPyh0LnRhcmdldD12b2lkIDAse3ZhbHVlOnZvaWQgMCxkb25lOiEwfSk6XCJrZXlzXCI9PXI/e3ZhbHVlOm4sZG9uZTohMX06XCJ2YWx1ZXNcIj09cj97dmFsdWU6ZVtuXSxkb25lOiExfTp7dmFsdWU6W24sZVtuXV0sZG9uZTohMX19KSxcInZhbHVlc1wiKSxvLkFyZ3VtZW50cz1vLkFycmF5LGkoXCJrZXlzXCIpLGkoXCJ2YWx1ZXNcIiksaShcImVudHJpZXNcIil9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDcyKSxpPXIoMTcpLG89cigxNTQpO258fGkoT2JqZWN0LnByb3RvdHlwZSxcInRvU3RyaW5nXCIsbyx7dW5zYWZlOiEwfSl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpLG89cig3MyksYT1yKDExOSkscz1SZWdFeHAucHJvdG90eXBlLmV4ZWMsdT1TdHJpbmcucHJvdG90eXBlLnJlcGxhY2UsYz1zLGY9KG49L2EvLGk9L2IqL2cscy5jYWxsKG4sXCJhXCIpLHMuY2FsbChpLFwiYVwiKSwwIT09bi5sYXN0SW5kZXh8fDAhPT1pLmxhc3RJbmRleCksbD1hLlVOU1VQUE9SVEVEX1l8fGEuQlJPS0VOX0NBUkVULGg9dm9pZCAwIT09LygpPz8vLmV4ZWMoXCJcIilbMV07KGZ8fGh8fGwpJiYoYz1mdW5jdGlvbih0KXt2YXIgZSxyLG4saSxhPXRoaXMsYz1sJiZhLnN0aWNreSxwPW8uY2FsbChhKSxkPWEuc291cmNlLHY9MCxnPXQ7cmV0dXJuIGMmJigtMT09PShwPXAucmVwbGFjZShcInlcIixcIlwiKSkuaW5kZXhPZihcImdcIikmJihwKz1cImdcIiksZz1TdHJpbmcodCkuc2xpY2UoYS5sYXN0SW5kZXgpLGEubGFzdEluZGV4PjAmJighYS5tdWx0aWxpbmV8fGEubXVsdGlsaW5lJiZcIlxcblwiIT09dFthLmxhc3RJbmRleC0xXSkmJihkPVwiKD86IFwiK2QrXCIpXCIsZz1cIiBcIitnLHYrKykscj1uZXcgUmVnRXhwKFwiXig/OlwiK2QrXCIpXCIscCkpLGgmJihyPW5ldyBSZWdFeHAoXCJeXCIrZCtcIiQoPyFcXFxccylcIixwKSksZiYmKGU9YS5sYXN0SW5kZXgpLG49cy5jYWxsKGM/cjphLGcpLGM/bj8obi5pbnB1dD1uLmlucHV0LnNsaWNlKHYpLG5bMF09blswXS5zbGljZSh2KSxuLmluZGV4PWEubGFzdEluZGV4LGEubGFzdEluZGV4Kz1uWzBdLmxlbmd0aCk6YS5sYXN0SW5kZXg9MDpmJiZuJiYoYS5sYXN0SW5kZXg9YS5nbG9iYWw/bi5pbmRleCtuWzBdLmxlbmd0aDplKSxoJiZuJiZuLmxlbmd0aD4xJiZ1LmNhbGwoblswXSxyLChmdW5jdGlvbigpe2ZvcihpPTE7aTxhcmd1bWVudHMubGVuZ3RoLTI7aSsrKXZvaWQgMD09PWFyZ3VtZW50c1tpXSYmKG5baV09dm9pZCAwKX0pKSxufSksdC5leHBvcnRzPWN9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDUpLGk9cigzKSxvPXIoODMpLGE9aShcInNwZWNpZXNcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBvPj01MXx8IW4oKGZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuKGUuY29uc3RydWN0b3I9e30pW2FdPWZ1bmN0aW9uKCl7cmV0dXJue2ZvbzoxfX0sMSE9PWVbdF0oQm9vbGVhbikuZm9vfSkpfX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiOyhmdW5jdGlvbihlKXshZS52ZXJzaW9ufHwwPT09ZS52ZXJzaW9uLmluZGV4T2YoXCJ2MC5cIil8fDA9PT1lLnZlcnNpb24uaW5kZXhPZihcInYxLlwiKSYmMCE9PWUudmVyc2lvbi5pbmRleE9mKFwidjEuOC5cIik/dC5leHBvcnRzPXtuZXh0VGljazpmdW5jdGlvbih0LHIsbixpKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTt2YXIgbyxhLHM9YXJndW1lbnRzLmxlbmd0aDtzd2l0Y2gocyl7Y2FzZSAwOmNhc2UgMTpyZXR1cm4gZS5uZXh0VGljayh0KTtjYXNlIDI6cmV0dXJuIGUubmV4dFRpY2soKGZ1bmN0aW9uKCl7dC5jYWxsKG51bGwscil9KSk7Y2FzZSAzOnJldHVybiBlLm5leHRUaWNrKChmdW5jdGlvbigpe3QuY2FsbChudWxsLHIsbil9KSk7Y2FzZSA0OnJldHVybiBlLm5leHRUaWNrKChmdW5jdGlvbigpe3QuY2FsbChudWxsLHIsbixpKX0pKTtkZWZhdWx0OmZvcihvPW5ldyBBcnJheShzLTEpLGE9MDthPG8ubGVuZ3RoOylvW2ErK109YXJndW1lbnRzW2FdO3JldHVybiBlLm5leHRUaWNrKChmdW5jdGlvbigpe3QuYXBwbHkobnVsbCxvKX0pKX19fTp0LmV4cG9ydHM9ZX0pLmNhbGwodGhpcyxyKDM4KSl9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDkyKSxpPW4uQnVmZmVyO2Z1bmN0aW9uIG8odCxlKXtmb3IodmFyIHIgaW4gdCllW3JdPXRbcl19ZnVuY3Rpb24gYSh0LGUscil7cmV0dXJuIGkodCxlLHIpfWkuZnJvbSYmaS5hbGxvYyYmaS5hbGxvY1Vuc2FmZSYmaS5hbGxvY1Vuc2FmZVNsb3c/dC5leHBvcnRzPW46KG8obixlKSxlLkJ1ZmZlcj1hKSxvKGksYSksYS5mcm9tPWZ1bmN0aW9uKHQsZSxyKXtpZihcIm51bWJlclwiPT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXJcIik7cmV0dXJuIGkodCxlLHIpfSxhLmFsbG9jPWZ1bmN0aW9uKHQsZSxyKXtpZihcIm51bWJlclwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlclwiKTt2YXIgbj1pKHQpO3JldHVybiB2b2lkIDAhPT1lP1wic3RyaW5nXCI9PXR5cGVvZiByP24uZmlsbChlLHIpOm4uZmlsbChlKTpuLmZpbGwoMCksbn0sYS5hbGxvY1Vuc2FmZT1mdW5jdGlvbih0KXtpZihcIm51bWJlclwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlclwiKTtyZXR1cm4gaSh0KX0sYS5hbGxvY1Vuc2FmZVNsb3c9ZnVuY3Rpb24odCl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7cmV0dXJuIG4uU2xvd0J1ZmZlcih0KX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDE1Nik7ZnVuY3Rpb24gaShlLHIsbyl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuZ2V0P3QuZXhwb3J0cz1pPVJlZmxlY3QuZ2V0OnQuZXhwb3J0cz1pPWZ1bmN0aW9uKHQsZSxyKXt2YXIgaT1uKHQsZSk7aWYoaSl7dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpLGUpO3JldHVybiBvLmdldD9vLmdldC5jYWxsKHIpOm8udmFsdWV9fSxpKGUscixvfHxlKX10LmV4cG9ydHM9aX0sZnVuY3Rpb24odCxlLHIpeyhmdW5jdGlvbihuKXtlLmxvZz1mdW5jdGlvbiguLi50KXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgY29uc29sZSYmY29uc29sZS5sb2cmJmNvbnNvbGUubG9nKC4uLnQpfSxlLmZvcm1hdEFyZ3M9ZnVuY3Rpb24oZSl7aWYoZVswXT0odGhpcy51c2VDb2xvcnM/XCIlY1wiOlwiXCIpK3RoaXMubmFtZXNwYWNlKyh0aGlzLnVzZUNvbG9ycz9cIiAlY1wiOlwiIFwiKStlWzBdKyh0aGlzLnVzZUNvbG9ycz9cIiVjIFwiOlwiIFwiKStcIitcIit0LmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKSwhdGhpcy51c2VDb2xvcnMpcmV0dXJuO2NvbnN0IHI9XCJjb2xvcjogXCIrdGhpcy5jb2xvcjtlLnNwbGljZSgxLDAscixcImNvbG9yOiBpbmhlcml0XCIpO2xldCBuPTAsaT0wO2VbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLHQ9PntcIiUlXCIhPT10JiYobisrLFwiJWNcIj09PXQmJihpPW4pKX0pLGUuc3BsaWNlKGksMCxyKX0sZS5zYXZlPWZ1bmN0aW9uKHQpe3RyeXt0P2Uuc3RvcmFnZS5zZXRJdGVtKFwiZGVidWdcIix0KTplLnN0b3JhZ2UucmVtb3ZlSXRlbShcImRlYnVnXCIpfWNhdGNoKHQpe319LGUubG9hZD1mdW5jdGlvbigpe2xldCB0O3RyeXt0PWUuc3RvcmFnZS5nZXRJdGVtKFwiZGVidWdcIil9Y2F0Y2godCl7fSF0JiZ2b2lkIDAhPT1uJiZcImVudlwiaW4gbiYmKHQ9bi5lbnYuREVCVUcpO3JldHVybiB0fSxlLnVzZUNvbG9ycz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5wcm9jZXNzJiYoXCJyZW5kZXJlclwiPT09d2luZG93LnByb2Nlc3MudHlwZXx8d2luZG93LnByb2Nlc3MuX19ud2pzKSlyZXR1cm4hMDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZuYXZpZ2F0b3IudXNlckFnZW50JiZuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpcmV0dXJuITE7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2V8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5jb25zb2xlJiYod2luZG93LmNvbnNvbGUuZmlyZWJ1Z3x8d2luZG93LmNvbnNvbGUuZXhjZXB0aW9uJiZ3aW5kb3cuY29uc29sZS50YWJsZSl8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJm5hdmlnYXRvci51c2VyQWdlbnQmJm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pJiZwYXJzZUludChSZWdFeHAuJDEsMTApPj0zMXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudCYmbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pfSxlLnN0b3JhZ2U9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGxvY2FsU3RvcmFnZX1jYXRjaCh0KXt9fSgpLGUuY29sb3JzPVtcIiMwMDAwQ0NcIixcIiMwMDAwRkZcIixcIiMwMDMzQ0NcIixcIiMwMDMzRkZcIixcIiMwMDY2Q0NcIixcIiMwMDY2RkZcIixcIiMwMDk5Q0NcIixcIiMwMDk5RkZcIixcIiMwMENDMDBcIixcIiMwMENDMzNcIixcIiMwMENDNjZcIixcIiMwMENDOTlcIixcIiMwMENDQ0NcIixcIiMwMENDRkZcIixcIiMzMzAwQ0NcIixcIiMzMzAwRkZcIixcIiMzMzMzQ0NcIixcIiMzMzMzRkZcIixcIiMzMzY2Q0NcIixcIiMzMzY2RkZcIixcIiMzMzk5Q0NcIixcIiMzMzk5RkZcIixcIiMzM0NDMDBcIixcIiMzM0NDMzNcIixcIiMzM0NDNjZcIixcIiMzM0NDOTlcIixcIiMzM0NDQ0NcIixcIiMzM0NDRkZcIixcIiM2NjAwQ0NcIixcIiM2NjAwRkZcIixcIiM2NjMzQ0NcIixcIiM2NjMzRkZcIixcIiM2NkNDMDBcIixcIiM2NkNDMzNcIixcIiM5OTAwQ0NcIixcIiM5OTAwRkZcIixcIiM5OTMzQ0NcIixcIiM5OTMzRkZcIixcIiM5OUNDMDBcIixcIiM5OUNDMzNcIixcIiNDQzAwMDBcIixcIiNDQzAwMzNcIixcIiNDQzAwNjZcIixcIiNDQzAwOTlcIixcIiNDQzAwQ0NcIixcIiNDQzAwRkZcIixcIiNDQzMzMDBcIixcIiNDQzMzMzNcIixcIiNDQzMzNjZcIixcIiNDQzMzOTlcIixcIiNDQzMzQ0NcIixcIiNDQzMzRkZcIixcIiNDQzY2MDBcIixcIiNDQzY2MzNcIixcIiNDQzk5MDBcIixcIiNDQzk5MzNcIixcIiNDQ0NDMDBcIixcIiNDQ0NDMzNcIixcIiNGRjAwMDBcIixcIiNGRjAwMzNcIixcIiNGRjAwNjZcIixcIiNGRjAwOTlcIixcIiNGRjAwQ0NcIixcIiNGRjAwRkZcIixcIiNGRjMzMDBcIixcIiNGRjMzMzNcIixcIiNGRjMzNjZcIixcIiNGRjMzOTlcIixcIiNGRjMzQ0NcIixcIiNGRjMzRkZcIixcIiNGRjY2MDBcIixcIiNGRjY2MzNcIixcIiNGRjk5MDBcIixcIiNGRjk5MzNcIixcIiNGRkNDMDBcIixcIiNGRkNDMzNcIl0sdC5leHBvcnRzPXIoMTcyKShlKTtjb25zdHtmb3JtYXR0ZXJzOml9PXQuZXhwb3J0cztpLmo9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBKU09OLnN0cmluZ2lmeSh0KX1jYXRjaCh0KXtyZXR1cm5cIltVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiBcIit0Lm1lc3NhZ2V9fX0pLmNhbGwodGhpcyxyKDM4KSl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Isbz1pJiYhbi5jYWxsKHsxOjJ9LDEpO2UuZj1vP2Z1bmN0aW9uKHQpe3ZhciBlPWkodGhpcyx0KTtyZXR1cm4hIWUmJmUuZW51bWVyYWJsZX06bn0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNSksaT1yKDE5KSxvPVwiXCIuc3BsaXQ7dC5leHBvcnRzPW4oKGZ1bmN0aW9uKCl7cmV0dXJuIU9iamVjdChcInpcIikucHJvcGVydHlJc0VudW1lcmFibGUoMCl9KSk/ZnVuY3Rpb24odCl7cmV0dXJuXCJTdHJpbmdcIj09aSh0KT9vLmNhbGwodCxcIlwiKTpPYmplY3QodCl9Ok9iamVjdH0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNCksaT1yKDEwKSxvPW4uZG9jdW1lbnQsYT1pKG8pJiZpKG8uY3JlYXRlRWxlbWVudCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBhP28uY3JlYXRlRWxlbWVudCh0KTp7fX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDQpLGk9cigxNCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dHJ5e2kobix0LGUpfWNhdGNoKHIpe25bdF09ZX1yZXR1cm4gZX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDEwMCksaT1GdW5jdGlvbi50b1N0cmluZztcImZ1bmN0aW9uXCIhPXR5cGVvZiBuLmluc3BlY3RTb3VyY2UmJihuLmluc3BlY3RTb3VyY2U9ZnVuY3Rpb24odCl7cmV0dXJuIGkuY2FsbCh0KX0pLHQuZXhwb3J0cz1uLmluc3BlY3RTb3VyY2V9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDI1KSxpPXIoMTAwKTsodC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGlbdF18fChpW3RdPXZvaWQgMCE9PWU/ZTp7fSl9KShcInZlcnNpb25zXCIsW10pLnB1c2goe3ZlcnNpb246XCIzLjYuMVwiLG1vZGU6bj9cInB1cmVcIjpcImdsb2JhbFwiLGNvcHlyaWdodDpcIsKpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSlcIn0pfSxmdW5jdGlvbih0LGUpe3ZhciByPTAsbj1NYXRoLnJhbmRvbSgpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm5cIlN5bWJvbChcIitTdHJpbmcodm9pZCAwPT09dD9cIlwiOnQpK1wiKV9cIisoKytyK24pLnRvU3RyaW5nKDM2KX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDEyKSxpPXIoMTUpLG89cigxMDUpLGE9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUscixhKXt2YXIgcyx1PW4oZSksYz1pKHUubGVuZ3RoKSxmPW8oYSxjKTtpZih0JiZyIT1yKXtmb3IoO2M+ZjspaWYoKHM9dVtmKytdKSE9cylyZXR1cm4hMH1lbHNlIGZvcig7Yz5mO2YrKylpZigodHx8ZiBpbiB1KSYmdVtmXT09PXIpcmV0dXJuIHR8fGZ8fDA7cmV0dXJuIXQmJi0xfX07dC5leHBvcnRzPXtpbmNsdWRlczphKCEwKSxpbmRleE9mOmEoITEpfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9W1wiY29uc3RydWN0b3JcIixcImhhc093blByb3BlcnR5XCIsXCJpc1Byb3RvdHlwZU9mXCIsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFwidG9Mb2NhbGVTdHJpbmdcIixcInRvU3RyaW5nXCIsXCJ2YWx1ZU9mXCJdfSxmdW5jdGlvbih0LGUscil7dmFyIG49cig1KSxpPS8jfFxcLnByb3RvdHlwZVxcLi8sbz1mdW5jdGlvbih0LGUpe3ZhciByPXNbYSh0KV07cmV0dXJuIHI9PWN8fHIhPXUmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlP24oZSk6ISFlKX0sYT1vLm5vcm1hbGl6ZT1mdW5jdGlvbih0KXtyZXR1cm4gU3RyaW5nKHQpLnJlcGxhY2UoaSxcIi5cIikudG9Mb3dlckNhc2UoKX0scz1vLmRhdGE9e30sdT1vLk5BVElWRT1cIk5cIixjPW8uUE9MWUZJTEw9XCJQXCI7dC5leHBvcnRzPW99LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDUpO3QuZXhwb3J0cz0hIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMmJiFuKChmdW5jdGlvbigpe3JldHVybiFTdHJpbmcoU3ltYm9sKCkpfSkpfSxmdW5jdGlvbih0LGUscil7dmFyIG4saT1yKDgpLG89cigxMDgpLGE9cig2Nykscz1yKDQ1KSx1PXIoMTA5KSxjPXIoNjEpLGY9cig0NCksbD1mKFwiSUVfUFJPVE9cIiksaD1mdW5jdGlvbigpe30scD1mdW5jdGlvbih0KXtyZXR1cm5cIjxzY3JpcHQ+XCIrdCtcIjxcXC9zY3JpcHQ+XCJ9LGQ9ZnVuY3Rpb24oKXt0cnl7bj1kb2N1bWVudC5kb21haW4mJm5ldyBBY3RpdmVYT2JqZWN0KFwiaHRtbGZpbGVcIil9Y2F0Y2godCl7fXZhciB0LGU7ZD1uP2Z1bmN0aW9uKHQpe3Qud3JpdGUocChcIlwiKSksdC5jbG9zZSgpO3ZhciBlPXQucGFyZW50V2luZG93Lk9iamVjdDtyZXR1cm4gdD1udWxsLGV9KG4pOigoZT1jKFwiaWZyYW1lXCIpKS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHUuYXBwZW5kQ2hpbGQoZSksZS5zcmM9U3RyaW5nKFwiamF2YXNjcmlwdDpcIiksKHQ9ZS5jb250ZW50V2luZG93LmRvY3VtZW50KS5vcGVuKCksdC53cml0ZShwKFwiZG9jdW1lbnQuRj1PYmplY3RcIikpLHQuY2xvc2UoKSx0LkYpO2Zvcih2YXIgcj1hLmxlbmd0aDtyLS07KWRlbGV0ZSBkLnByb3RvdHlwZVthW3JdXTtyZXR1cm4gZCgpfTtzW2xdPSEwLHQuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbih0LGUpe3ZhciByO3JldHVybiBudWxsIT09dD8oaC5wcm90b3R5cGU9aSh0KSxyPW5ldyBoLGgucHJvdG90eXBlPW51bGwscltsXT10KTpyPWQoKSx2b2lkIDA9PT1lP3I6byhyLGUpfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNTApO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUscil7aWYobih0KSx2b2lkIDA9PT1lKXJldHVybiB0O3N3aXRjaChyKXtjYXNlIDA6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuY2FsbChlKX07Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gdC5jYWxsKGUscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gdC5jYWxsKGUscixuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLG4saSl7cmV0dXJuIHQuY2FsbChlLHIsbixpKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj17fTtuW3IoMykoXCJ0b1N0cmluZ1RhZ1wiKV09XCJ6XCIsdC5leHBvcnRzPVwiW29iamVjdCB6XVwiPT09U3RyaW5nKG4pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig4KTt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgdD1uKHRoaXMpLGU9XCJcIjtyZXR1cm4gdC5nbG9iYWwmJihlKz1cImdcIiksdC5pZ25vcmVDYXNlJiYoZSs9XCJpXCIpLHQubXVsdGlsaW5lJiYoZSs9XCJtXCIpLHQuZG90QWxsJiYoZSs9XCJzXCIpLHQudW5pY29kZSYmKGUrPVwidVwiKSx0LnN0aWNreSYmKGUrPVwieVwiKSxlfX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMTIwKS5jaGFyQXQsaT1yKDI0KSxvPXIoMTE0KSxhPWkuc2V0LHM9aS5nZXR0ZXJGb3IoXCJTdHJpbmcgSXRlcmF0b3JcIik7byhTdHJpbmcsXCJTdHJpbmdcIiwoZnVuY3Rpb24odCl7YSh0aGlzLHt0eXBlOlwiU3RyaW5nIEl0ZXJhdG9yXCIsc3RyaW5nOlN0cmluZyh0KSxpbmRleDowfSl9KSwoZnVuY3Rpb24oKXt2YXIgdCxlPXModGhpcykscj1lLnN0cmluZyxpPWUuaW5kZXg7cmV0dXJuIGk+PXIubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KHQ9bihyLGkpLGUuaW5kZXgrPXQubGVuZ3RoLHt2YWx1ZTp0LGRvbmU6ITF9KX0pKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNzYpLGk9cig4KSxvPXIoMTUpLGE9cigyMCkscz1yKDc3KSx1PXIoNzgpO24oXCJtYXRjaFwiLDEsKGZ1bmN0aW9uKHQsZSxyKXtyZXR1cm5bZnVuY3Rpb24oZSl7dmFyIHI9YSh0aGlzKSxuPW51bGw9PWU/dm9pZCAwOmVbdF07cmV0dXJuIHZvaWQgMCE9PW4/bi5jYWxsKGUscik6bmV3IFJlZ0V4cChlKVt0XShTdHJpbmcocikpfSxmdW5jdGlvbih0KXt2YXIgbj1yKGUsdCx0aGlzKTtpZihuLmRvbmUpcmV0dXJuIG4udmFsdWU7dmFyIGE9aSh0KSxjPVN0cmluZyh0aGlzKTtpZighYS5nbG9iYWwpcmV0dXJuIHUoYSxjKTt2YXIgZj1hLnVuaWNvZGU7YS5sYXN0SW5kZXg9MDtmb3IodmFyIGwsaD1bXSxwPTA7bnVsbCE9PShsPXUoYSxjKSk7KXt2YXIgZD1TdHJpbmcobFswXSk7aFtwXT1kLFwiXCI9PT1kJiYoYS5sYXN0SW5kZXg9cyhjLG8oYS5sYXN0SW5kZXgpLGYpKSxwKyt9cmV0dXJuIDA9PT1wP251bGw6aH1dfSkpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxNyksaT1yKDUpLG89cigzKSxhPXIoNTMpLHM9cigxNCksdT1vKFwic3BlY2llc1wiKSxjPSFpKChmdW5jdGlvbigpe3ZhciB0PS8uLztyZXR1cm4gdC5leGVjPWZ1bmN0aW9uKCl7dmFyIHQ9W107cmV0dXJuIHQuZ3JvdXBzPXthOlwiN1wifSx0fSxcIjdcIiE9PVwiXCIucmVwbGFjZSh0LFwiJDxhPlwiKX0pKSxmPVwiJDBcIj09PVwiYVwiLnJlcGxhY2UoLy4vLFwiJDBcIiksbD0haSgoZnVuY3Rpb24oKXt2YXIgdD0vKD86KS8sZT10LmV4ZWM7dC5leGVjPWZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTt2YXIgcj1cImFiXCIuc3BsaXQodCk7cmV0dXJuIDIhPT1yLmxlbmd0aHx8XCJhXCIhPT1yWzBdfHxcImJcIiE9PXJbMV19KSk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyLGgpe3ZhciBwPW8odCksZD0haSgoZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gZVtwXT1mdW5jdGlvbigpe3JldHVybiA3fSw3IT1cIlwiW3RdKGUpfSkpLHY9ZCYmIWkoKGZ1bmN0aW9uKCl7dmFyIGU9ITEscj0vYS87cmV0dXJuXCJzcGxpdFwiPT09dCYmKChyPXt9KS5jb25zdHJ1Y3Rvcj17fSxyLmNvbnN0cnVjdG9yW3VdPWZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHIuZmxhZ3M9XCJcIixyW3BdPS8uL1twXSksci5leGVjPWZ1bmN0aW9uKCl7cmV0dXJuIGU9ITAsbnVsbH0scltwXShcIlwiKSwhZX0pKTtpZighZHx8IXZ8fFwicmVwbGFjZVwiPT09dCYmKCFjfHwhZil8fFwic3BsaXRcIj09PXQmJiFsKXt2YXIgZz0vLi9bcF0seT1yKHAsXCJcIlt0XSwoZnVuY3Rpb24odCxlLHIsbixpKXtyZXR1cm4gZS5leGVjPT09YT9kJiYhaT97ZG9uZTohMCx2YWx1ZTpnLmNhbGwoZSxyLG4pfTp7ZG9uZTohMCx2YWx1ZTp0LmNhbGwocixlLG4pfTp7ZG9uZTohMX19KSx7UkVQTEFDRV9LRUVQU18kMDpmfSksYj15WzBdLF89eVsxXTtuKFN0cmluZy5wcm90b3R5cGUsdCxiKSxuKFJlZ0V4cC5wcm90b3R5cGUscCwyPT1lP2Z1bmN0aW9uKHQsZSl7cmV0dXJuIF8uY2FsbCh0LHRoaXMsZSl9OmZ1bmN0aW9uKHQpe3JldHVybiBfLmNhbGwodCx0aGlzKX0pfWgmJnMoUmVnRXhwLnByb3RvdHlwZVtwXSxcInNoYW1cIiwhMCl9fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigxMjApLmNoYXJBdDt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBlKyhyP24odCxlKS5sZW5ndGg6MSl9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxOSksaT1yKDUzKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgcj10LmV4ZWM7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygcil7dmFyIG89ci5jYWxsKHQsZSk7aWYoXCJvYmplY3RcIiE9dHlwZW9mIG8pdGhyb3cgVHlwZUVycm9yKFwiUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsXCIpO3JldHVybiBvfWlmKFwiUmVnRXhwXCIhPT1uKHQpKXRocm93IFR5cGVFcnJvcihcIlJlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXJcIik7cmV0dXJuIGkuY2FsbCh0LGUpfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNCksaT1yKDEyMSksbz1yKDUxKSxhPXIoMTQpLHM9cigzKSx1PXMoXCJpdGVyYXRvclwiKSxjPXMoXCJ0b1N0cmluZ1RhZ1wiKSxmPW8udmFsdWVzO2Zvcih2YXIgbCBpbiBpKXt2YXIgaD1uW2xdLHA9aCYmaC5wcm90b3R5cGU7aWYocCl7aWYocFt1XSE9PWYpdHJ5e2EocCx1LGYpfWNhdGNoKHQpe3BbdV09Zn1pZihwW2NdfHxhKHAsYyxsKSxpW2xdKWZvcih2YXIgZCBpbiBvKWlmKHBbZF0hPT1vW2RdKXRyeXthKHAsZCxvW2RdKX1jYXRjaCh0KXtwW2RdPW9bZF19fX19LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gcihlLG4pe3JldHVybiB0LmV4cG9ydHM9cj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0scihlLG4pfXQuZXhwb3J0cz1yfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoNSksbz1yKDQ3KSxhPXIoMTApLHM9cigyNyksdT1yKDE1KSxjPXIoODIpLGY9cigxMTIpLGw9cig1NCksaD1yKDMpLHA9cig4MyksZD1oKFwiaXNDb25jYXRTcHJlYWRhYmxlXCIpLHY9cD49NTF8fCFpKChmdW5jdGlvbigpe3ZhciB0PVtdO3JldHVybiB0W2RdPSExLHQuY29uY2F0KClbMF0hPT10fSkpLGc9bChcImNvbmNhdFwiKSx5PWZ1bmN0aW9uKHQpe2lmKCFhKHQpKXJldHVybiExO3ZhciBlPXRbZF07cmV0dXJuIHZvaWQgMCE9PWU/ISFlOm8odCl9O24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiF2fHwhZ30se2NvbmNhdDpmdW5jdGlvbih0KXt2YXIgZSxyLG4saSxvLGE9cyh0aGlzKSxsPWYoYSwwKSxoPTA7Zm9yKGU9LTEsbj1hcmd1bWVudHMubGVuZ3RoO2U8bjtlKyspaWYobz0tMT09PWU/YTphcmd1bWVudHNbZV0seShvKSl7aWYoaCsoaT11KG8ubGVuZ3RoKSk+OTAwNzE5OTI1NDc0MDk5MSl0aHJvdyBUeXBlRXJyb3IoXCJNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWRcIik7Zm9yKHI9MDtyPGk7cisrLGgrKylyIGluIG8mJmMobCxoLG9bcl0pfWVsc2V7aWYoaD49OTAwNzE5OTI1NDc0MDk5MSl0aHJvdyBUeXBlRXJyb3IoXCJNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWRcIik7YyhsLGgrKyxvKX1yZXR1cm4gbC5sZW5ndGg9aCxsfX0pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig0MyksaT1yKDExKSxvPXIoMzEpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUscil7dmFyIGE9bihlKTthIGluIHQ/aS5mKHQsYSxvKDAscikpOnRbYV09cn19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbixpLG89cig0KSxhPXIoMTIyKSxzPW8ucHJvY2Vzcyx1PXMmJnMudmVyc2lvbnMsYz11JiZ1LnY4O2M/aT0obj1jLnNwbGl0KFwiLlwiKSlbMF0rblsxXTphJiYoIShuPWEubWF0Y2goL0VkZ2VcXC8oXFxkKykvKSl8fG5bMV0+PTc0KSYmKG49YS5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLykpJiYoaT1uWzFdKSx0LmV4cG9ydHM9aSYmK2l9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDIpLGk9cigzMykuZmlsdGVyLG89cig1KSxhPXIoNTQpKFwiZmlsdGVyXCIpLHM9YSYmIW8oKGZ1bmN0aW9uKCl7W10uZmlsdGVyLmNhbGwoe2xlbmd0aDotMSwwOjF9LChmdW5jdGlvbih0KXt0aHJvdyB0fSkpfSkpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOiFhfHwhc30se2ZpbHRlcjpmdW5jdGlvbih0KXtyZXR1cm4gaSh0aGlzLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoMTIzKTtuKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDpbXS5mb3JFYWNoIT1pfSx7Zm9yRWFjaDppfSl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDIpLGk9cig2NikuaW5jbHVkZXMsbz1yKDExMyk7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMH0se2luY2x1ZGVzOmZ1bmN0aW9uKHQpe3JldHVybiBpKHRoaXMsdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSksbyhcImluY2x1ZGVzXCIpfSxmdW5jdGlvbih0LGUscil7dmFyIG49cig3KSxpPXIoMTEpLmYsbz1GdW5jdGlvbi5wcm90b3R5cGUsYT1vLnRvU3RyaW5nLHM9L15cXHMqZnVuY3Rpb24gKFteIChdKikvO24mJiEoXCJuYW1lXCJpbiBvKSYmaShvLFwibmFtZVwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7dHJ5e3JldHVybiBhLmNhbGwodGhpcykubWF0Y2gocylbMV19Y2F0Y2godCl7cmV0dXJuXCJcIn19fSl9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDEwKSxpPXIoMTkpLG89cigzKShcIm1hdGNoXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gbih0KSYmKHZvaWQgMCE9PShlPXRbb10pPyEhZTpcIlJlZ0V4cFwiPT1pKHQpKX19LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDc2KSxpPXIoOCksbz1yKDI3KSxhPXIoMTUpLHM9cigzMiksdT1yKDIwKSxjPXIoNzcpLGY9cig3OCksbD1NYXRoLm1heCxoPU1hdGgubWluLHA9TWF0aC5mbG9vcixkPS9cXCQoWyQmJ2BdfFxcZFxcZD98PFtePl0qPikvZyx2PS9cXCQoWyQmJ2BdfFxcZFxcZD8pL2c7bihcInJlcGxhY2VcIiwyLChmdW5jdGlvbih0LGUscixuKXtyZXR1cm5bZnVuY3Rpb24ocixuKXt2YXIgaT11KHRoaXMpLG89bnVsbD09cj92b2lkIDA6clt0XTtyZXR1cm4gdm9pZCAwIT09bz9vLmNhbGwocixpLG4pOmUuY2FsbChTdHJpbmcoaSkscixuKX0sZnVuY3Rpb24odCxvKXtpZihuLlJFUExBQ0VfS0VFUFNfJDB8fFwic3RyaW5nXCI9PXR5cGVvZiBvJiYtMT09PW8uaW5kZXhPZihcIiQwXCIpKXt2YXIgdT1yKGUsdCx0aGlzLG8pO2lmKHUuZG9uZSlyZXR1cm4gdS52YWx1ZX12YXIgcD1pKHQpLGQ9U3RyaW5nKHRoaXMpLHY9XCJmdW5jdGlvblwiPT10eXBlb2Ygbzt2fHwobz1TdHJpbmcobykpO3ZhciB5PXAuZ2xvYmFsO2lmKHkpe3ZhciBiPXAudW5pY29kZTtwLmxhc3RJbmRleD0wfWZvcih2YXIgXz1bXTs7KXt2YXIgbT1mKHAsZCk7aWYobnVsbD09PW0pYnJlYWs7aWYoXy5wdXNoKG0pLCF5KWJyZWFrO1wiXCI9PT1TdHJpbmcobVswXSkmJihwLmxhc3RJbmRleD1jKGQsYShwLmxhc3RJbmRleCksYikpfWZvcih2YXIgdyx4PVwiXCIsaz0wLEU9MDtFPF8ubGVuZ3RoO0UrKyl7bT1fW0VdO2Zvcih2YXIgUz1TdHJpbmcobVswXSksaj1sKGgocyhtLmluZGV4KSxkLmxlbmd0aCksMCksUj1bXSxDPTE7QzxtLmxlbmd0aDtDKyspUi5wdXNoKHZvaWQgMD09PSh3PW1bQ10pP3c6U3RyaW5nKHcpKTt2YXIgST1tLmdyb3VwcztpZih2KXt2YXIgTz1bU10uY29uY2F0KFIsaixkKTt2b2lkIDAhPT1JJiZPLnB1c2goSSk7dmFyIFQ9U3RyaW5nKG8uYXBwbHkodm9pZCAwLE8pKX1lbHNlIFQ9ZyhTLGQsaixSLEksbyk7aj49ayYmKHgrPWQuc2xpY2UoayxqKStULGs9aitTLmxlbmd0aCl9cmV0dXJuIHgrZC5zbGljZShrKX1dO2Z1bmN0aW9uIGcodCxyLG4saSxhLHMpe3ZhciB1PW4rdC5sZW5ndGgsYz1pLmxlbmd0aCxmPXY7cmV0dXJuIHZvaWQgMCE9PWEmJihhPW8oYSksZj1kKSxlLmNhbGwocyxmLChmdW5jdGlvbihlLG8pe3ZhciBzO3N3aXRjaChvLmNoYXJBdCgwKSl7Y2FzZVwiJFwiOnJldHVyblwiJFwiO2Nhc2VcIiZcIjpyZXR1cm4gdDtjYXNlXCJgXCI6cmV0dXJuIHIuc2xpY2UoMCxuKTtjYXNlXCInXCI6cmV0dXJuIHIuc2xpY2UodSk7Y2FzZVwiPFwiOnM9YVtvLnNsaWNlKDEsLTEpXTticmVhaztkZWZhdWx0OnZhciBmPStvO2lmKDA9PT1mKXJldHVybiBlO2lmKGY+Yyl7dmFyIGw9cChmLzEwKTtyZXR1cm4gMD09PWw/ZTpsPD1jP3ZvaWQgMD09PWlbbC0xXT9vLmNoYXJBdCgxKTppW2wtMV0rby5jaGFyQXQoMSk6ZX1zPWlbZi0xXX1yZXR1cm4gdm9pZCAwPT09cz9cIlwiOnN9KSl9fSkpfSxmdW5jdGlvbih0LGUscil7dmFyIG49cig0KSxpPXIoMTIxKSxvPXIoMTIzKSxhPXIoMTQpO2Zvcih2YXIgcyBpbiBpKXt2YXIgdT1uW3NdLGM9dSYmdS5wcm90b3R5cGU7aWYoYyYmYy5mb3JFYWNoIT09byl0cnl7YShjLFwiZm9yRWFjaFwiLG8pfWNhdGNoKHQpe2MuZm9yRWFjaD1vfX19LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbixpLG8sYSxzPXIoMiksdT1yKDI1KSxjPXIoNCksZj1yKDI2KSxsPXIoMTc3KSxoPXIoMTcpLHA9cigxNzgpLGQ9cig0OSksdj1yKDEyNSksZz1yKDEwKSx5PXIoNTApLGI9cigxNzkpLF89cigxOSksbT1yKDYzKSx3PXIoMTgwKSx4PXIoMTg0KSxrPXIoMTMyKSxFPXIoMTMzKS5zZXQsUz1yKDE4NSksaj1yKDE4NiksUj1yKDE4NyksQz1yKDEzNSksST1yKDE4OCksTz1yKDI0KSxUPXIoNjgpLFA9cigzKSxBPXIoODMpLEw9UChcInNwZWNpZXNcIiksRj1cIlByb21pc2VcIixNPU8uZ2V0LE49Ty5zZXQsQj1PLmdldHRlckZvcihGKSxEPWwsVT1jLlR5cGVFcnJvcixxPWMuZG9jdW1lbnQsRz1jLnByb2Nlc3MsVz1mKFwiZmV0Y2hcIiksej1DLmYsWT16LFE9XCJwcm9jZXNzXCI9PV8oRyksJD0hIShxJiZxLmNyZWF0ZUV2ZW50JiZjLmRpc3BhdGNoRXZlbnQpLEg9VChGLChmdW5jdGlvbigpe2lmKCEobShEKSE9PVN0cmluZyhEKSkpe2lmKDY2PT09QSlyZXR1cm4hMDtpZighUSYmXCJmdW5jdGlvblwiIT10eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50KXJldHVybiEwfWlmKHUmJiFELnByb3RvdHlwZS5maW5hbGx5KXJldHVybiEwO2lmKEE+PTUxJiYvbmF0aXZlIGNvZGUvLnRlc3QoRCkpcmV0dXJuITE7dmFyIHQ9RC5yZXNvbHZlKDEpLGU9ZnVuY3Rpb24odCl7dCgoZnVuY3Rpb24oKXt9KSwoZnVuY3Rpb24oKXt9KSl9O3JldHVybih0LmNvbnN0cnVjdG9yPXt9KVtMXT1lLCEodC50aGVuKChmdW5jdGlvbigpe30pKWluc3RhbmNlb2YgZSl9KSksSz1IfHwheCgoZnVuY3Rpb24odCl7RC5hbGwodCkuY2F0Y2goKGZ1bmN0aW9uKCl7fSkpfSkpLFY9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuISghZyh0KXx8XCJmdW5jdGlvblwiIT10eXBlb2YoZT10LnRoZW4pKSYmZX0sWj1mdW5jdGlvbih0LGUscil7aWYoIWUubm90aWZpZWQpe2Uubm90aWZpZWQ9ITA7dmFyIG49ZS5yZWFjdGlvbnM7UygoZnVuY3Rpb24oKXtmb3IodmFyIGk9ZS52YWx1ZSxvPTE9PWUuc3RhdGUsYT0wO24ubGVuZ3RoPmE7KXt2YXIgcyx1LGMsZj1uW2ErK10sbD1vP2Yub2s6Zi5mYWlsLGg9Zi5yZXNvbHZlLHA9Zi5yZWplY3QsZD1mLmRvbWFpbjt0cnl7bD8ob3x8KDI9PT1lLnJlamVjdGlvbiYmZXQodCxlKSxlLnJlamVjdGlvbj0xKSwhMD09PWw/cz1pOihkJiZkLmVudGVyKCkscz1sKGkpLGQmJihkLmV4aXQoKSxjPSEwKSkscz09PWYucHJvbWlzZT9wKFUoXCJQcm9taXNlLWNoYWluIGN5Y2xlXCIpKToodT1WKHMpKT91LmNhbGwocyxoLHApOmgocykpOnAoaSl9Y2F0Y2godCl7ZCYmIWMmJmQuZXhpdCgpLHAodCl9fWUucmVhY3Rpb25zPVtdLGUubm90aWZpZWQ9ITEsciYmIWUucmVqZWN0aW9uJiZYKHQsZSl9KSl9fSxKPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbixpOyQ/KChuPXEuY3JlYXRlRXZlbnQoXCJFdmVudFwiKSkucHJvbWlzZT1lLG4ucmVhc29uPXIsbi5pbml0RXZlbnQodCwhMSwhMCksYy5kaXNwYXRjaEV2ZW50KG4pKTpuPXtwcm9taXNlOmUscmVhc29uOnJ9LChpPWNbXCJvblwiK3RdKT9pKG4pOlwidW5oYW5kbGVkcmVqZWN0aW9uXCI9PT10JiZSKFwiVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uXCIscil9LFg9ZnVuY3Rpb24odCxlKXtFLmNhbGwoYywoZnVuY3Rpb24oKXt2YXIgcixuPWUudmFsdWU7aWYodHQoZSkmJihyPUkoKGZ1bmN0aW9uKCl7UT9HLmVtaXQoXCJ1bmhhbmRsZWRSZWplY3Rpb25cIixuLHQpOkooXCJ1bmhhbmRsZWRyZWplY3Rpb25cIix0LG4pfSkpLGUucmVqZWN0aW9uPVF8fHR0KGUpPzI6MSxyLmVycm9yKSl0aHJvdyByLnZhbHVlfSkpfSx0dD1mdW5jdGlvbih0KXtyZXR1cm4gMSE9PXQucmVqZWN0aW9uJiYhdC5wYXJlbnR9LGV0PWZ1bmN0aW9uKHQsZSl7RS5jYWxsKGMsKGZ1bmN0aW9uKCl7UT9HLmVtaXQoXCJyZWplY3Rpb25IYW5kbGVkXCIsdCk6SihcInJlamVjdGlvbmhhbmRsZWRcIix0LGUudmFsdWUpfSkpfSxydD1mdW5jdGlvbih0LGUscixuKXtyZXR1cm4gZnVuY3Rpb24oaSl7dChlLHIsaSxuKX19LG50PWZ1bmN0aW9uKHQsZSxyLG4pe2UuZG9uZXx8KGUuZG9uZT0hMCxuJiYoZT1uKSxlLnZhbHVlPXIsZS5zdGF0ZT0yLFoodCxlLCEwKSl9LGl0PWZ1bmN0aW9uKHQsZSxyLG4pe2lmKCFlLmRvbmUpe2UuZG9uZT0hMCxuJiYoZT1uKTt0cnl7aWYodD09PXIpdGhyb3cgVShcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO3ZhciBpPVYocik7aT9TKChmdW5jdGlvbigpe3ZhciBuPXtkb25lOiExfTt0cnl7aS5jYWxsKHIscnQoaXQsdCxuLGUpLHJ0KG50LHQsbixlKSl9Y2F0Y2gocil7bnQodCxuLHIsZSl9fSkpOihlLnZhbHVlPXIsZS5zdGF0ZT0xLFoodCxlLCExKSl9Y2F0Y2gocil7bnQodCx7ZG9uZTohMX0scixlKX19fTtIJiYoRD1mdW5jdGlvbih0KXtiKHRoaXMsRCxGKSx5KHQpLG4uY2FsbCh0aGlzKTt2YXIgZT1NKHRoaXMpO3RyeXt0KHJ0KGl0LHRoaXMsZSkscnQobnQsdGhpcyxlKSl9Y2F0Y2godCl7bnQodGhpcyxlLHQpfX0sKG49ZnVuY3Rpb24odCl7Tih0aGlzLHt0eXBlOkYsZG9uZTohMSxub3RpZmllZDohMSxwYXJlbnQ6ITEscmVhY3Rpb25zOltdLHJlamVjdGlvbjohMSxzdGF0ZTowLHZhbHVlOnZvaWQgMH0pfSkucHJvdG90eXBlPXAoRC5wcm90b3R5cGUse3RoZW46ZnVuY3Rpb24odCxlKXt2YXIgcj1CKHRoaXMpLG49eihrKHRoaXMsRCkpO3JldHVybiBuLm9rPVwiZnVuY3Rpb25cIiE9dHlwZW9mIHR8fHQsbi5mYWlsPVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUsbi5kb21haW49UT9HLmRvbWFpbjp2b2lkIDAsci5wYXJlbnQ9ITAsci5yZWFjdGlvbnMucHVzaChuKSwwIT1yLnN0YXRlJiZaKHRoaXMsciwhMSksbi5wcm9taXNlfSxjYXRjaDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCx0KX19KSxpPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IG4sZT1NKHQpO3RoaXMucHJvbWlzZT10LHRoaXMucmVzb2x2ZT1ydChpdCx0LGUpLHRoaXMucmVqZWN0PXJ0KG50LHQsZSl9LEMuZj16PWZ1bmN0aW9uKHQpe3JldHVybiB0PT09RHx8dD09PW8/bmV3IGkodCk6WSh0KX0sdXx8XCJmdW5jdGlvblwiIT10eXBlb2YgbHx8KGE9bC5wcm90b3R5cGUudGhlbixoKGwucHJvdG90eXBlLFwidGhlblwiLChmdW5jdGlvbih0LGUpe3ZhciByPXRoaXM7cmV0dXJuIG5ldyBEKChmdW5jdGlvbih0LGUpe2EuY2FsbChyLHQsZSl9KSkudGhlbih0LGUpfSkse3Vuc2FmZTohMH0pLFwiZnVuY3Rpb25cIj09dHlwZW9mIFcmJnMoe2dsb2JhbDohMCxlbnVtZXJhYmxlOiEwLGZvcmNlZDohMH0se2ZldGNoOmZ1bmN0aW9uKHQpe3JldHVybiBqKEQsVy5hcHBseShjLGFyZ3VtZW50cykpfX0pKSkscyh7Z2xvYmFsOiEwLHdyYXA6ITAsZm9yY2VkOkh9LHtQcm9taXNlOkR9KSxkKEQsRiwhMSwhMCksdihGKSxvPWYoRikscyh7dGFyZ2V0OkYsc3RhdDohMCxmb3JjZWQ6SH0se3JlamVjdDpmdW5jdGlvbih0KXt2YXIgZT16KHRoaXMpO3JldHVybiBlLnJlamVjdC5jYWxsKHZvaWQgMCx0KSxlLnByb21pc2V9fSkscyh7dGFyZ2V0OkYsc3RhdDohMCxmb3JjZWQ6dXx8SH0se3Jlc29sdmU6ZnVuY3Rpb24odCl7cmV0dXJuIGoodSYmdGhpcz09PW8/RDp0aGlzLHQpfX0pLHMoe3RhcmdldDpGLHN0YXQ6ITAsZm9yY2VkOkt9LHthbGw6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxyPXooZSksbj1yLnJlc29sdmUsaT1yLnJlamVjdCxvPUkoKGZ1bmN0aW9uKCl7dmFyIHI9eShlLnJlc29sdmUpLG89W10sYT0wLHM9MTt3KHQsKGZ1bmN0aW9uKHQpe3ZhciB1PWErKyxjPSExO28ucHVzaCh2b2lkIDApLHMrKyxyLmNhbGwoZSx0KS50aGVuKChmdW5jdGlvbih0KXtjfHwoYz0hMCxvW3VdPXQsLS1zfHxuKG8pKX0pLGkpfSkpLC0tc3x8bihvKX0pKTtyZXR1cm4gby5lcnJvciYmaShvLnZhbHVlKSxyLnByb21pc2V9LHJhY2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxyPXooZSksbj1yLnJlamVjdCxpPUkoKGZ1bmN0aW9uKCl7dmFyIGk9eShlLnJlc29sdmUpO3codCwoZnVuY3Rpb24odCl7aS5jYWxsKGUsdCkudGhlbihyLnJlc29sdmUsbil9KSl9KSk7cmV0dXJuIGkuZXJyb3ImJm4oaS52YWx1ZSksci5wcm9taXNlfX0pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uKHQpe1xuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbnZhciBuPXIoMTkwKSxpPXIoMTkxKSxvPXIoMTM3KTtmdW5jdGlvbiBhKCl7cmV0dXJuIHUuVFlQRURfQVJSQVlfU1VQUE9SVD8yMTQ3NDgzNjQ3OjEwNzM3NDE4MjN9ZnVuY3Rpb24gcyh0LGUpe2lmKGEoKTxlKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGhcIik7cmV0dXJuIHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odD1uZXcgVWludDhBcnJheShlKSkuX19wcm90b19fPXUucHJvdG90eXBlOihudWxsPT09dCYmKHQ9bmV3IHUoZSkpLHQubGVuZ3RoPWUpLHR9ZnVuY3Rpb24gdSh0LGUscil7aWYoISh1LlRZUEVEX0FSUkFZX1NVUFBPUlR8fHRoaXMgaW5zdGFuY2VvZiB1KSlyZXR1cm4gbmV3IHUodCxlLHIpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtyZXR1cm4gbCh0aGlzLHQpfXJldHVybiBjKHRoaXMsdCxlLHIpfWZ1bmN0aW9uIGModCxlLHIsbil7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/ZnVuY3Rpb24odCxlLHIsbil7aWYoZS5ieXRlTGVuZ3RoLHI8MHx8ZS5ieXRlTGVuZ3RoPHIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCInb2Zmc2V0JyBpcyBvdXQgb2YgYm91bmRzXCIpO2lmKGUuYnl0ZUxlbmd0aDxyKyhufHwwKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIidsZW5ndGgnIGlzIG91dCBvZiBib3VuZHNcIik7ZT12b2lkIDA9PT1yJiZ2b2lkIDA9PT1uP25ldyBVaW50OEFycmF5KGUpOnZvaWQgMD09PW4/bmV3IFVpbnQ4QXJyYXkoZSxyKTpuZXcgVWludDhBcnJheShlLHIsbik7dS5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0PWUpLl9fcHJvdG9fXz11LnByb3RvdHlwZTp0PWgodCxlKTtyZXR1cm4gdH0odCxlLHIsbik6XCJzdHJpbmdcIj09dHlwZW9mIGU/ZnVuY3Rpb24odCxlLHIpe1wic3RyaW5nXCI9PXR5cGVvZiByJiZcIlwiIT09cnx8KHI9XCJ1dGY4XCIpO2lmKCF1LmlzRW5jb2RpbmcocikpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKTt2YXIgbj0wfGQoZSxyKSxpPSh0PXModCxuKSkud3JpdGUoZSxyKTtpIT09biYmKHQ9dC5zbGljZSgwLGkpKTtyZXR1cm4gdH0odCxlLHIpOmZ1bmN0aW9uKHQsZSl7aWYodS5pc0J1ZmZlcihlKSl7dmFyIHI9MHxwKGUubGVuZ3RoKTtyZXR1cm4gMD09PSh0PXModCxyKSkubGVuZ3RofHxlLmNvcHkodCwwLDAsciksdH1pZihlKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJmUuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ8fFwibGVuZ3RoXCJpbiBlKXJldHVyblwibnVtYmVyXCIhPXR5cGVvZiBlLmxlbmd0aHx8KG49ZS5sZW5ndGgpIT1uP3ModCwwKTpoKHQsZSk7aWYoXCJCdWZmZXJcIj09PWUudHlwZSYmbyhlLmRhdGEpKXJldHVybiBoKHQsZS5kYXRhKX12YXIgbjt0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LlwiKX0odCxlKX1mdW5jdGlvbiBmKHQpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKTtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJyl9ZnVuY3Rpb24gbCh0LGUpe2lmKGYoZSksdD1zKHQsZTwwPzA6MHxwKGUpKSwhdS5UWVBFRF9BUlJBWV9TVVBQT1JUKWZvcih2YXIgcj0wO3I8ZTsrK3IpdFtyXT0wO3JldHVybiB0fWZ1bmN0aW9uIGgodCxlKXt2YXIgcj1lLmxlbmd0aDwwPzA6MHxwKGUubGVuZ3RoKTt0PXModCxyKTtmb3IodmFyIG49MDtuPHI7bis9MSl0W25dPTI1NSZlW25dO3JldHVybiB0fWZ1bmN0aW9uIHAodCl7aWYodD49YSgpKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSBzaXplOiAweFwiK2EoKS50b1N0cmluZygxNikrXCIgYnl0ZXNcIik7cmV0dXJuIDB8dH1mdW5jdGlvbiBkKHQsZSl7aWYodS5pc0J1ZmZlcih0KSlyZXR1cm4gdC5sZW5ndGg7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEFycmF5QnVmZmVyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcmJihBcnJheUJ1ZmZlci5pc1ZpZXcodCl8fHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpcmV0dXJuIHQuYnl0ZUxlbmd0aDtcInN0cmluZ1wiIT10eXBlb2YgdCYmKHQ9XCJcIit0KTt2YXIgcj10Lmxlbmd0aDtpZigwPT09cilyZXR1cm4gMDtmb3IodmFyIG49ITE7Oylzd2l0Y2goZSl7Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gcjtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpjYXNlIHZvaWQgMDpyZXR1cm4gVSh0KS5sZW5ndGg7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIDIqcjtjYXNlXCJoZXhcIjpyZXR1cm4gcj4+PjE7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIHEodCkubGVuZ3RoO2RlZmF1bHQ6aWYobilyZXR1cm4gVSh0KS5sZW5ndGg7ZT0oXCJcIitlKS50b0xvd2VyQ2FzZSgpLG49ITB9fWZ1bmN0aW9uIHYodCxlLHIpe3ZhciBuPSExO2lmKCh2b2lkIDA9PT1lfHxlPDApJiYoZT0wKSxlPnRoaXMubGVuZ3RoKXJldHVyblwiXCI7aWYoKHZvaWQgMD09PXJ8fHI+dGhpcy5sZW5ndGgpJiYocj10aGlzLmxlbmd0aCkscjw9MClyZXR1cm5cIlwiO2lmKChyPj4+PTApPD0oZT4+Pj0wKSlyZXR1cm5cIlwiO2Zvcih0fHwodD1cInV0ZjhcIik7Oylzd2l0Y2godCl7Y2FzZVwiaGV4XCI6cmV0dXJuIEkodGhpcyxlLHIpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBqKHRoaXMsZSxyKTtjYXNlXCJhc2NpaVwiOnJldHVybiBSKHRoaXMsZSxyKTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gQyh0aGlzLGUscik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIFModGhpcyxlLHIpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiBPKHRoaXMsZSxyKTtkZWZhdWx0OmlmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK3QpO3Q9KHQrXCJcIikudG9Mb3dlckNhc2UoKSxuPSEwfX1mdW5jdGlvbiBnKHQsZSxyKXt2YXIgbj10W2VdO3RbZV09dFtyXSx0W3JdPW59ZnVuY3Rpb24geSh0LGUscixuLGkpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4tMTtpZihcInN0cmluZ1wiPT10eXBlb2Ygcj8obj1yLHI9MCk6cj4yMTQ3NDgzNjQ3P3I9MjE0NzQ4MzY0NzpyPC0yMTQ3NDgzNjQ4JiYocj0tMjE0NzQ4MzY0OCkscj0rcixpc05hTihyKSYmKHI9aT8wOnQubGVuZ3RoLTEpLHI8MCYmKHI9dC5sZW5ndGgrcikscj49dC5sZW5ndGgpe2lmKGkpcmV0dXJuLTE7cj10Lmxlbmd0aC0xfWVsc2UgaWYocjwwKXtpZighaSlyZXR1cm4tMTtyPTB9aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPXUuZnJvbShlLG4pKSx1LmlzQnVmZmVyKGUpKXJldHVybiAwPT09ZS5sZW5ndGg/LTE6Yih0LGUscixuLGkpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXJldHVybiBlJj0yNTUsdS5UWVBFRF9BUlJBWV9TVVBQT1JUJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mP2k/VWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHQsZSxyKTpVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKHQsZSxyKTpiKHQsW2VdLHIsbixpKTt0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyXCIpfWZ1bmN0aW9uIGIodCxlLHIsbixpKXt2YXIgbyxhPTEscz10Lmxlbmd0aCx1PWUubGVuZ3RoO2lmKHZvaWQgMCE9PW4mJihcInVjczJcIj09PShuPVN0cmluZyhuKS50b0xvd2VyQ2FzZSgpKXx8XCJ1Y3MtMlwiPT09bnx8XCJ1dGYxNmxlXCI9PT1ufHxcInV0Zi0xNmxlXCI9PT1uKSl7aWYodC5sZW5ndGg8Mnx8ZS5sZW5ndGg8MilyZXR1cm4tMTthPTIscy89Mix1Lz0yLHIvPTJ9ZnVuY3Rpb24gYyh0LGUpe3JldHVybiAxPT09YT90W2VdOnQucmVhZFVJbnQxNkJFKGUqYSl9aWYoaSl7dmFyIGY9LTE7Zm9yKG89cjtvPHM7bysrKWlmKGModCxvKT09PWMoZSwtMT09PWY/MDpvLWYpKXtpZigtMT09PWYmJihmPW8pLG8tZisxPT09dSlyZXR1cm4gZiphfWVsc2UtMSE9PWYmJihvLT1vLWYpLGY9LTF9ZWxzZSBmb3Iocit1PnMmJihyPXMtdSksbz1yO28+PTA7by0tKXtmb3IodmFyIGw9ITAsaD0wO2g8dTtoKyspaWYoYyh0LG8raCkhPT1jKGUsaCkpe2w9ITE7YnJlYWt9aWYobClyZXR1cm4gb31yZXR1cm4tMX1mdW5jdGlvbiBfKHQsZSxyLG4pe3I9TnVtYmVyKHIpfHwwO3ZhciBpPXQubGVuZ3RoLXI7bj8obj1OdW1iZXIobikpPmkmJihuPWkpOm49aTt2YXIgbz1lLmxlbmd0aDtpZihvJTIhPTApdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgaGV4IHN0cmluZ1wiKTtuPm8vMiYmKG49by8yKTtmb3IodmFyIGE9MDthPG47KythKXt2YXIgcz1wYXJzZUludChlLnN1YnN0cigyKmEsMiksMTYpO2lmKGlzTmFOKHMpKXJldHVybiBhO3RbcithXT1zfXJldHVybiBhfWZ1bmN0aW9uIG0odCxlLHIsbil7cmV0dXJuIEcoVShlLHQubGVuZ3RoLXIpLHQscixuKX1mdW5jdGlvbiB3KHQsZSxyLG4pe3JldHVybiBHKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxyPTA7cjx0Lmxlbmd0aDsrK3IpZS5wdXNoKDI1NSZ0LmNoYXJDb2RlQXQocikpO3JldHVybiBlfShlKSx0LHIsbil9ZnVuY3Rpb24geCh0LGUscixuKXtyZXR1cm4gdyh0LGUscixuKX1mdW5jdGlvbiBrKHQsZSxyLG4pe3JldHVybiBHKHEoZSksdCxyLG4pfWZ1bmN0aW9uIEUodCxlLHIsbil7cmV0dXJuIEcoZnVuY3Rpb24odCxlKXtmb3IodmFyIHIsbixpLG89W10sYT0wO2E8dC5sZW5ndGgmJiEoKGUtPTIpPDApOysrYSlyPXQuY2hhckNvZGVBdChhKSxuPXI+PjgsaT1yJTI1NixvLnB1c2goaSksby5wdXNoKG4pO3JldHVybiBvfShlLHQubGVuZ3RoLXIpLHQscixuKX1mdW5jdGlvbiBTKHQsZSxyKXtyZXR1cm4gMD09PWUmJnI9PT10Lmxlbmd0aD9uLmZyb21CeXRlQXJyYXkodCk6bi5mcm9tQnl0ZUFycmF5KHQuc2xpY2UoZSxyKSl9ZnVuY3Rpb24gaih0LGUscil7cj1NYXRoLm1pbih0Lmxlbmd0aCxyKTtmb3IodmFyIG49W10saT1lO2k8cjspe3ZhciBvLGEscyx1LGM9dFtpXSxmPW51bGwsbD1jPjIzOT80OmM+MjIzPzM6Yz4xOTE/MjoxO2lmKGkrbDw9cilzd2l0Y2gobCl7Y2FzZSAxOmM8MTI4JiYoZj1jKTticmVhaztjYXNlIDI6MTI4PT0oMTkyJihvPXRbaSsxXSkpJiYodT0oMzEmYyk8PDZ8NjMmbyk+MTI3JiYoZj11KTticmVhaztjYXNlIDM6bz10W2krMV0sYT10W2krMl0sMTI4PT0oMTkyJm8pJiYxMjg9PSgxOTImYSkmJih1PSgxNSZjKTw8MTJ8KDYzJm8pPDw2fDYzJmEpPjIwNDcmJih1PDU1Mjk2fHx1PjU3MzQzKSYmKGY9dSk7YnJlYWs7Y2FzZSA0Om89dFtpKzFdLGE9dFtpKzJdLHM9dFtpKzNdLDEyOD09KDE5MiZvKSYmMTI4PT0oMTkyJmEpJiYxMjg9PSgxOTImcykmJih1PSgxNSZjKTw8MTh8KDYzJm8pPDwxMnwoNjMmYSk8PDZ8NjMmcyk+NjU1MzUmJnU8MTExNDExMiYmKGY9dSl9bnVsbD09PWY/KGY9NjU1MzMsbD0xKTpmPjY1NTM1JiYoZi09NjU1MzYsbi5wdXNoKGY+Pj4xMCYxMDIzfDU1Mjk2KSxmPTU2MzIwfDEwMjMmZiksbi5wdXNoKGYpLGkrPWx9cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGU8PTQwOTYpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLHQpO3ZhciByPVwiXCIsbj0wO2Zvcig7bjxlOylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyx0LnNsaWNlKG4sbis9NDA5NikpO3JldHVybiByfShuKX1lLkJ1ZmZlcj11LGUuU2xvd0J1ZmZlcj1mdW5jdGlvbih0KXsrdCE9dCYmKHQ9MCk7cmV0dXJuIHUuYWxsb2MoK3QpfSxlLklOU1BFQ1RfTUFYX0JZVEVTPTUwLHUuVFlQRURfQVJSQVlfU1VQUE9SVD12b2lkIDAhPT10LlRZUEVEX0FSUkFZX1NVUFBPUlQ/dC5UWVBFRF9BUlJBWV9TVVBQT1JUOmZ1bmN0aW9uKCl7dHJ5e3ZhciB0PW5ldyBVaW50OEFycmF5KDEpO3JldHVybiB0Ll9fcHJvdG9fXz17X19wcm90b19fOlVpbnQ4QXJyYXkucHJvdG90eXBlLGZvbzpmdW5jdGlvbigpe3JldHVybiA0Mn19LDQyPT09dC5mb28oKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5zdWJhcnJheSYmMD09PXQuc3ViYXJyYXkoMSwxKS5ieXRlTGVuZ3RofWNhdGNoKHQpe3JldHVybiExfX0oKSxlLmtNYXhMZW5ndGg9YSgpLHUucG9vbFNpemU9ODE5Mix1Ll9hdWdtZW50PWZ1bmN0aW9uKHQpe3JldHVybiB0Ll9fcHJvdG9fXz11LnByb3RvdHlwZSx0fSx1LmZyb209ZnVuY3Rpb24odCxlLHIpe3JldHVybiBjKG51bGwsdCxlLHIpfSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQmJih1LnByb3RvdHlwZS5fX3Byb3RvX189VWludDhBcnJheS5wcm90b3R5cGUsdS5fX3Byb3RvX189VWludDhBcnJheSxcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuc3BlY2llcyYmdVtTeW1ib2wuc3BlY2llc109PT11JiZPYmplY3QuZGVmaW5lUHJvcGVydHkodSxTeW1ib2wuc3BlY2llcyx7dmFsdWU6bnVsbCxjb25maWd1cmFibGU6ITB9KSksdS5hbGxvYz1mdW5jdGlvbih0LGUscil7cmV0dXJuIGZ1bmN0aW9uKHQsZSxyLG4pe3JldHVybiBmKGUpLGU8PTA/cyh0LGUpOnZvaWQgMCE9PXI/XCJzdHJpbmdcIj09dHlwZW9mIG4/cyh0LGUpLmZpbGwocixuKTpzKHQsZSkuZmlsbChyKTpzKHQsZSl9KG51bGwsdCxlLHIpfSx1LmFsbG9jVW5zYWZlPWZ1bmN0aW9uKHQpe3JldHVybiBsKG51bGwsdCl9LHUuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKHQpe3JldHVybiBsKG51bGwsdCl9LHUuaXNCdWZmZXI9ZnVuY3Rpb24odCl7cmV0dXJuIShudWxsPT10fHwhdC5faXNCdWZmZXIpfSx1LmNvbXBhcmU9ZnVuY3Rpb24odCxlKXtpZighdS5pc0J1ZmZlcih0KXx8IXUuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnNcIik7aWYodD09PWUpcmV0dXJuIDA7Zm9yKHZhciByPXQubGVuZ3RoLG49ZS5sZW5ndGgsaT0wLG89TWF0aC5taW4ocixuKTtpPG87KytpKWlmKHRbaV0hPT1lW2ldKXtyPXRbaV0sbj1lW2ldO2JyZWFrfXJldHVybiByPG4/LTE6bjxyPzE6MH0sdS5pc0VuY29kaW5nPWZ1bmN0aW9uKHQpe3N3aXRjaChTdHJpbmcodCkudG9Mb3dlckNhc2UoKSl7Y2FzZVwiaGV4XCI6Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpjYXNlXCJiYXNlNjRcIjpjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX0sdS5jb25jYXQ9ZnVuY3Rpb24odCxlKXtpZighbyh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKTtpZigwPT09dC5sZW5ndGgpcmV0dXJuIHUuYWxsb2MoMCk7dmFyIHI7aWYodm9pZCAwPT09ZSlmb3IoZT0wLHI9MDtyPHQubGVuZ3RoOysrcillKz10W3JdLmxlbmd0aDt2YXIgbj11LmFsbG9jVW5zYWZlKGUpLGk9MDtmb3Iocj0wO3I8dC5sZW5ndGg7KytyKXt2YXIgYT10W3JdO2lmKCF1LmlzQnVmZmVyKGEpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO2EuY29weShuLGkpLGkrPWEubGVuZ3RofXJldHVybiBufSx1LmJ5dGVMZW5ndGg9ZCx1LnByb3RvdHlwZS5faXNCdWZmZXI9ITAsdS5wcm90b3R5cGUuc3dhcDE2PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5sZW5ndGg7aWYodCUyIT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHNcIik7Zm9yKHZhciBlPTA7ZTx0O2UrPTIpZyh0aGlzLGUsZSsxKTtyZXR1cm4gdGhpc30sdS5wcm90b3R5cGUuc3dhcDMyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5sZW5ndGg7aWYodCU0IT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHNcIik7Zm9yKHZhciBlPTA7ZTx0O2UrPTQpZyh0aGlzLGUsZSszKSxnKHRoaXMsZSsxLGUrMik7cmV0dXJuIHRoaXN9LHUucHJvdG90eXBlLnN3YXA2ND1mdW5jdGlvbigpe3ZhciB0PXRoaXMubGVuZ3RoO2lmKHQlOCE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzXCIpO2Zvcih2YXIgZT0wO2U8dDtlKz04KWcodGhpcyxlLGUrNyksZyh0aGlzLGUrMSxlKzYpLGcodGhpcyxlKzIsZSs1KSxnKHRoaXMsZSszLGUrNCk7cmV0dXJuIHRoaXN9LHUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIHQ9MHx0aGlzLmxlbmd0aDtyZXR1cm4gMD09PXQ/XCJcIjowPT09YXJndW1lbnRzLmxlbmd0aD9qKHRoaXMsMCx0KTp2LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sdS5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uKHQpe2lmKCF1LmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO3JldHVybiB0aGlzPT09dHx8MD09PXUuY29tcGFyZSh0aGlzLHQpfSx1LnByb3RvdHlwZS5pbnNwZWN0PWZ1bmN0aW9uKCl7dmFyIHQ9XCJcIixyPWUuSU5TUEVDVF9NQVhfQllURVM7cmV0dXJuIHRoaXMubGVuZ3RoPjAmJih0PXRoaXMudG9TdHJpbmcoXCJoZXhcIiwwLHIpLm1hdGNoKC8uezJ9L2cpLmpvaW4oXCIgXCIpLHRoaXMubGVuZ3RoPnImJih0Kz1cIiAuLi4gXCIpKSxcIjxCdWZmZXIgXCIrdCtcIj5cIn0sdS5wcm90b3R5cGUuY29tcGFyZT1mdW5jdGlvbih0LGUscixuLGkpe2lmKCF1LmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyXCIpO2lmKHZvaWQgMD09PWUmJihlPTApLHZvaWQgMD09PXImJihyPXQ/dC5sZW5ndGg6MCksdm9pZCAwPT09biYmKG49MCksdm9pZCAwPT09aSYmKGk9dGhpcy5sZW5ndGgpLGU8MHx8cj50Lmxlbmd0aHx8bjwwfHxpPnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwib3V0IG9mIHJhbmdlIGluZGV4XCIpO2lmKG4+PWkmJmU+PXIpcmV0dXJuIDA7aWYobj49aSlyZXR1cm4tMTtpZihlPj1yKXJldHVybiAxO2lmKHRoaXM9PT10KXJldHVybiAwO2Zvcih2YXIgbz0oaT4+Pj0wKS0obj4+Pj0wKSxhPShyPj4+PTApLShlPj4+PTApLHM9TWF0aC5taW4obyxhKSxjPXRoaXMuc2xpY2UobixpKSxmPXQuc2xpY2UoZSxyKSxsPTA7bDxzOysrbClpZihjW2xdIT09ZltsXSl7bz1jW2xdLGE9ZltsXTticmVha31yZXR1cm4gbzxhPy0xOmE8bz8xOjB9LHUucHJvdG90eXBlLmluY2x1ZGVzPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4tMSE9PXRoaXMuaW5kZXhPZih0LGUscil9LHUucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB5KHRoaXMsdCxlLHIsITApfSx1LnByb3RvdHlwZS5sYXN0SW5kZXhPZj1mdW5jdGlvbih0LGUscil7cmV0dXJuIHkodGhpcyx0LGUsciwhMSl9LHUucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSxyLG4pe2lmKHZvaWQgMD09PWUpbj1cInV0ZjhcIixyPXRoaXMubGVuZ3RoLGU9MDtlbHNlIGlmKHZvaWQgMD09PXImJlwic3RyaW5nXCI9PXR5cGVvZiBlKW49ZSxyPXRoaXMubGVuZ3RoLGU9MDtlbHNle2lmKCFpc0Zpbml0ZShlKSl0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZFwiKTtlfD0wLGlzRmluaXRlKHIpPyhyfD0wLHZvaWQgMD09PW4mJihuPVwidXRmOFwiKSk6KG49cixyPXZvaWQgMCl9dmFyIGk9dGhpcy5sZW5ndGgtZTtpZigodm9pZCAwPT09cnx8cj5pKSYmKHI9aSksdC5sZW5ndGg+MCYmKHI8MHx8ZTwwKXx8ZT50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzXCIpO258fChuPVwidXRmOFwiKTtmb3IodmFyIG89ITE7Oylzd2l0Y2gobil7Y2FzZVwiaGV4XCI6cmV0dXJuIF8odGhpcyx0LGUscik7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIG0odGhpcyx0LGUscik7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gdyh0aGlzLHQsZSxyKTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4geCh0aGlzLHQsZSxyKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gayh0aGlzLHQsZSxyKTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gRSh0aGlzLHQsZSxyKTtkZWZhdWx0OmlmKG8pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK24pO249KFwiXCIrbikudG9Mb3dlckNhc2UoKSxvPSEwfX0sdS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6XCJCdWZmZXJcIixkYXRhOkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2Fycnx8dGhpcywwKX19O2Z1bmN0aW9uIFIodCxlLHIpe3ZhciBuPVwiXCI7cj1NYXRoLm1pbih0Lmxlbmd0aCxyKTtmb3IodmFyIGk9ZTtpPHI7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoMTI3JnRbaV0pO3JldHVybiBufWZ1bmN0aW9uIEModCxlLHIpe3ZhciBuPVwiXCI7cj1NYXRoLm1pbih0Lmxlbmd0aCxyKTtmb3IodmFyIGk9ZTtpPHI7KytpKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUodFtpXSk7cmV0dXJuIG59ZnVuY3Rpb24gSSh0LGUscil7dmFyIG49dC5sZW5ndGg7KCFlfHxlPDApJiYoZT0wKSwoIXJ8fHI8MHx8cj5uKSYmKHI9bik7Zm9yKHZhciBpPVwiXCIsbz1lO288cjsrK28paSs9RCh0W29dKTtyZXR1cm4gaX1mdW5jdGlvbiBPKHQsZSxyKXtmb3IodmFyIG49dC5zbGljZShlLHIpLGk9XCJcIixvPTA7bzxuLmxlbmd0aDtvKz0yKWkrPVN0cmluZy5mcm9tQ2hhckNvZGUobltvXSsyNTYqbltvKzFdKTtyZXR1cm4gaX1mdW5jdGlvbiBUKHQsZSxyKXtpZih0JTEhPTB8fHQ8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm9mZnNldCBpcyBub3QgdWludFwiKTtpZih0K2U+cil0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGhcIil9ZnVuY3Rpb24gUCh0LGUscixuLGksbyl7aWYoIXUuaXNCdWZmZXIodCkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7aWYoZT5pfHxlPG8pdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJyk7aWYocituPnQubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfWZ1bmN0aW9uIEEodCxlLHIsbil7ZTwwJiYoZT02NTUzNStlKzEpO2Zvcih2YXIgaT0wLG89TWF0aC5taW4odC5sZW5ndGgtciwyKTtpPG87KytpKXRbcitpXT0oZSYyNTU8PDgqKG4/aToxLWkpKT4+PjgqKG4/aToxLWkpfWZ1bmN0aW9uIEwodCxlLHIsbil7ZTwwJiYoZT00Mjk0OTY3Mjk1K2UrMSk7Zm9yKHZhciBpPTAsbz1NYXRoLm1pbih0Lmxlbmd0aC1yLDQpO2k8bzsrK2kpdFtyK2ldPWU+Pj44KihuP2k6My1pKSYyNTV9ZnVuY3Rpb24gRih0LGUscixuLGksbyl7aWYocituPnQubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKX1mdW5jdGlvbiBNKHQsZSxyLG4sbyl7cmV0dXJuIG98fEYodCwwLHIsNCksaS53cml0ZSh0LGUscixuLDIzLDQpLHIrNH1mdW5jdGlvbiBOKHQsZSxyLG4sbyl7cmV0dXJuIG98fEYodCwwLHIsOCksaS53cml0ZSh0LGUscixuLDUyLDgpLHIrOH11LnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbih0LGUpe3ZhciByLG49dGhpcy5sZW5ndGg7aWYoKHQ9fn50KTwwPyh0Kz1uKTwwJiYodD0wKTp0Pm4mJih0PW4pLChlPXZvaWQgMD09PWU/bjp+fmUpPDA/KGUrPW4pPDAmJihlPTApOmU+biYmKGU9biksZTx0JiYoZT10KSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQpKHI9dGhpcy5zdWJhcnJheSh0LGUpKS5fX3Byb3RvX189dS5wcm90b3R5cGU7ZWxzZXt2YXIgaT1lLXQ7cj1uZXcgdShpLHZvaWQgMCk7Zm9yKHZhciBvPTA7bzxpOysrbylyW29dPXRoaXNbbyt0XX1yZXR1cm4gcn0sdS5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbih0LGUscil7dHw9MCxlfD0wLHJ8fFQodCxlLHRoaXMubGVuZ3RoKTtmb3IodmFyIG49dGhpc1t0XSxpPTEsbz0wOysrbzxlJiYoaSo9MjU2KTspbis9dGhpc1t0K29dKmk7cmV0dXJuIG59LHUucHJvdG90eXBlLnJlYWRVSW50QkU9ZnVuY3Rpb24odCxlLHIpe3R8PTAsZXw9MCxyfHxUKHQsZSx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbdCstLWVdLGk9MTtlPjAmJihpKj0yNTYpOyluKz10aGlzW3QrLS1lXSppO3JldHVybiBufSx1LnByb3RvdHlwZS5yZWFkVUludDg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8VCh0LDEsdGhpcy5sZW5ndGgpLHRoaXNbdF19LHUucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbih0LGUpe3JldHVybiBlfHxUKHQsMix0aGlzLmxlbmd0aCksdGhpc1t0XXx0aGlzW3QrMV08PDh9LHUucHJvdG90eXBlLnJlYWRVSW50MTZCRT1mdW5jdGlvbih0LGUpe3JldHVybiBlfHxUKHQsMix0aGlzLmxlbmd0aCksdGhpc1t0XTw8OHx0aGlzW3QrMV19LHUucHJvdG90eXBlLnJlYWRVSW50MzJMRT1mdW5jdGlvbih0LGUpe3JldHVybiBlfHxUKHQsNCx0aGlzLmxlbmd0aCksKHRoaXNbdF18dGhpc1t0KzFdPDw4fHRoaXNbdCsyXTw8MTYpKzE2Nzc3MjE2KnRoaXNbdCszXX0sdS5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV8fFQodCw0LHRoaXMubGVuZ3RoKSwxNjc3NzIxNip0aGlzW3RdKyh0aGlzW3QrMV08PDE2fHRoaXNbdCsyXTw8OHx0aGlzW3QrM10pfSx1LnByb3RvdHlwZS5yZWFkSW50TEU9ZnVuY3Rpb24odCxlLHIpe3R8PTAsZXw9MCxyfHxUKHQsZSx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXRoaXNbdF0saT0xLG89MDsrK288ZSYmKGkqPTI1Nik7KW4rPXRoaXNbdCtvXSppO3JldHVybiBuPj0oaSo9MTI4KSYmKG4tPU1hdGgucG93KDIsOCplKSksbn0sdS5wcm90b3R5cGUucmVhZEludEJFPWZ1bmN0aW9uKHQsZSxyKXt0fD0wLGV8PTAscnx8VCh0LGUsdGhpcy5sZW5ndGgpO2Zvcih2YXIgbj1lLGk9MSxvPXRoaXNbdCstLW5dO24+MCYmKGkqPTI1Nik7KW8rPXRoaXNbdCstLW5dKmk7cmV0dXJuIG8+PShpKj0xMjgpJiYoby09TWF0aC5wb3coMiw4KmUpKSxvfSx1LnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbih0LGUpe3JldHVybiBlfHxUKHQsMSx0aGlzLmxlbmd0aCksMTI4JnRoaXNbdF0/LTEqKDI1NS10aGlzW3RdKzEpOnRoaXNbdF19LHUucHJvdG90eXBlLnJlYWRJbnQxNkxFPWZ1bmN0aW9uKHQsZSl7ZXx8VCh0LDIsdGhpcy5sZW5ndGgpO3ZhciByPXRoaXNbdF18dGhpc1t0KzFdPDw4O3JldHVybiAzMjc2OCZyPzQyOTQ5MDE3NjB8cjpyfSx1LnByb3RvdHlwZS5yZWFkSW50MTZCRT1mdW5jdGlvbih0LGUpe2V8fFQodCwyLHRoaXMubGVuZ3RoKTt2YXIgcj10aGlzW3QrMV18dGhpc1t0XTw8ODtyZXR1cm4gMzI3Njgmcj80Mjk0OTAxNzYwfHI6cn0sdS5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8VCh0LDQsdGhpcy5sZW5ndGgpLHRoaXNbdF18dGhpc1t0KzFdPDw4fHRoaXNbdCsyXTw8MTZ8dGhpc1t0KzNdPDwyNH0sdS5wcm90b3R5cGUucmVhZEludDMyQkU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8VCh0LDQsdGhpcy5sZW5ndGgpLHRoaXNbdF08PDI0fHRoaXNbdCsxXTw8MTZ8dGhpc1t0KzJdPDw4fHRoaXNbdCszXX0sdS5wcm90b3R5cGUucmVhZEZsb2F0TEU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8VCh0LDQsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLHQsITAsMjMsNCl9LHUucHJvdG90eXBlLnJlYWRGbG9hdEJFPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV8fFQodCw0LHRoaXMubGVuZ3RoKSxpLnJlYWQodGhpcyx0LCExLDIzLDQpfSx1LnByb3RvdHlwZS5yZWFkRG91YmxlTEU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8VCh0LDgsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLHQsITAsNTIsOCl9LHUucHJvdG90eXBlLnJlYWREb3VibGVCRT1mdW5jdGlvbih0LGUpe3JldHVybiBlfHxUKHQsOCx0aGlzLmxlbmd0aCksaS5yZWFkKHRoaXMsdCwhMSw1Miw4KX0sdS5wcm90b3R5cGUud3JpdGVVSW50TEU9ZnVuY3Rpb24odCxlLHIsbil7KHQ9K3QsZXw9MCxyfD0wLG4pfHxQKHRoaXMsdCxlLHIsTWF0aC5wb3coMiw4KnIpLTEsMCk7dmFyIGk9MSxvPTA7Zm9yKHRoaXNbZV09MjU1JnQ7KytvPHImJihpKj0yNTYpOyl0aGlzW2Urb109dC9pJjI1NTtyZXR1cm4gZStyfSx1LnByb3RvdHlwZS53cml0ZVVJbnRCRT1mdW5jdGlvbih0LGUscixuKXsodD0rdCxlfD0wLHJ8PTAsbil8fFAodGhpcyx0LGUscixNYXRoLnBvdygyLDgqciktMSwwKTt2YXIgaT1yLTEsbz0xO2Zvcih0aGlzW2UraV09MjU1JnQ7LS1pPj0wJiYobyo9MjU2KTspdGhpc1tlK2ldPXQvbyYyNTU7cmV0dXJuIGUrcn0sdS5wcm90b3R5cGUud3JpdGVVSW50OD1mdW5jdGlvbih0LGUscil7cmV0dXJuIHQ9K3QsZXw9MCxyfHxQKHRoaXMsdCxlLDEsMjU1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVHx8KHQ9TWF0aC5mbG9vcih0KSksdGhpc1tlXT0yNTUmdCxlKzF9LHUucHJvdG90eXBlLndyaXRlVUludDE2TEU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGV8PTAscnx8UCh0aGlzLHQsZSwyLDY1NTM1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tlXT0yNTUmdCx0aGlzW2UrMV09dD4+PjgpOkEodGhpcyx0LGUsITApLGUrMn0sdS5wcm90b3R5cGUud3JpdGVVSW50MTZCRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIHQ9K3QsZXw9MCxyfHxQKHRoaXMsdCxlLDIsNjU1MzUsMCksdS5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW2VdPXQ+Pj44LHRoaXNbZSsxXT0yNTUmdCk6QSh0aGlzLHQsZSwhMSksZSsyfSx1LnByb3RvdHlwZS53cml0ZVVJbnQzMkxFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdD0rdCxlfD0wLHJ8fFAodGhpcyx0LGUsNCw0Mjk0OTY3Mjk1LDApLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tlKzNdPXQ+Pj4yNCx0aGlzW2UrMl09dD4+PjE2LHRoaXNbZSsxXT10Pj4+OCx0aGlzW2VdPTI1NSZ0KTpMKHRoaXMsdCxlLCEwKSxlKzR9LHUucHJvdG90eXBlLndyaXRlVUludDMyQkU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGV8PTAscnx8UCh0aGlzLHQsZSw0LDQyOTQ5NjcyOTUsMCksdS5UWVBFRF9BUlJBWV9TVVBQT1JUPyh0aGlzW2VdPXQ+Pj4yNCx0aGlzW2UrMV09dD4+PjE2LHRoaXNbZSsyXT10Pj4+OCx0aGlzW2UrM109MjU1JnQpOkwodGhpcyx0LGUsITEpLGUrNH0sdS5wcm90b3R5cGUud3JpdGVJbnRMRT1mdW5jdGlvbih0LGUscixuKXtpZih0PSt0LGV8PTAsIW4pe3ZhciBpPU1hdGgucG93KDIsOCpyLTEpO1AodGhpcyx0LGUscixpLTEsLWkpfXZhciBvPTAsYT0xLHM9MDtmb3IodGhpc1tlXT0yNTUmdDsrK288ciYmKGEqPTI1Nik7KXQ8MCYmMD09PXMmJjAhPT10aGlzW2Urby0xXSYmKHM9MSksdGhpc1tlK29dPSh0L2E+PjApLXMmMjU1O3JldHVybiBlK3J9LHUucHJvdG90eXBlLndyaXRlSW50QkU9ZnVuY3Rpb24odCxlLHIsbil7aWYodD0rdCxlfD0wLCFuKXt2YXIgaT1NYXRoLnBvdygyLDgqci0xKTtQKHRoaXMsdCxlLHIsaS0xLC1pKX12YXIgbz1yLTEsYT0xLHM9MDtmb3IodGhpc1tlK29dPTI1NSZ0Oy0tbz49MCYmKGEqPTI1Nik7KXQ8MCYmMD09PXMmJjAhPT10aGlzW2UrbysxXSYmKHM9MSksdGhpc1tlK29dPSh0L2E+PjApLXMmMjU1O3JldHVybiBlK3J9LHUucHJvdG90eXBlLndyaXRlSW50OD1mdW5jdGlvbih0LGUscil7cmV0dXJuIHQ9K3QsZXw9MCxyfHxQKHRoaXMsdCxlLDEsMTI3LC0xMjgpLHUuVFlQRURfQVJSQVlfU1VQUE9SVHx8KHQ9TWF0aC5mbG9vcih0KSksdDwwJiYodD0yNTUrdCsxKSx0aGlzW2VdPTI1NSZ0LGUrMX0sdS5wcm90b3R5cGUud3JpdGVJbnQxNkxFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdD0rdCxlfD0wLHJ8fFAodGhpcyx0LGUsMiwzMjc2NywtMzI3NjgpLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tlXT0yNTUmdCx0aGlzW2UrMV09dD4+PjgpOkEodGhpcyx0LGUsITApLGUrMn0sdS5wcm90b3R5cGUud3JpdGVJbnQxNkJFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdD0rdCxlfD0wLHJ8fFAodGhpcyx0LGUsMiwzMjc2NywtMzI3NjgpLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tlXT10Pj4+OCx0aGlzW2UrMV09MjU1JnQpOkEodGhpcyx0LGUsITEpLGUrMn0sdS5wcm90b3R5cGUud3JpdGVJbnQzMkxFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdD0rdCxlfD0wLHJ8fFAodGhpcyx0LGUsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSx1LlRZUEVEX0FSUkFZX1NVUFBPUlQ/KHRoaXNbZV09MjU1JnQsdGhpc1tlKzFdPXQ+Pj44LHRoaXNbZSsyXT10Pj4+MTYsdGhpc1tlKzNdPXQ+Pj4yNCk6TCh0aGlzLHQsZSwhMCksZSs0fSx1LnByb3RvdHlwZS53cml0ZUludDMyQkU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGV8PTAscnx8UCh0aGlzLHQsZSw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLHQ8MCYmKHQ9NDI5NDk2NzI5NSt0KzEpLHUuVFlQRURfQVJSQVlfU1VQUE9SVD8odGhpc1tlXT10Pj4+MjQsdGhpc1tlKzFdPXQ+Pj4xNix0aGlzW2UrMl09dD4+PjgsdGhpc1tlKzNdPTI1NSZ0KTpMKHRoaXMsdCxlLCExKSxlKzR9LHUucHJvdG90eXBlLndyaXRlRmxvYXRMRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIE0odGhpcyx0LGUsITAscil9LHUucHJvdG90eXBlLndyaXRlRmxvYXRCRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIE0odGhpcyx0LGUsITEscil9LHUucHJvdG90eXBlLndyaXRlRG91YmxlTEU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBOKHRoaXMsdCxlLCEwLHIpfSx1LnByb3RvdHlwZS53cml0ZURvdWJsZUJFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gTih0aGlzLHQsZSwhMSxyKX0sdS5wcm90b3R5cGUuY29weT1mdW5jdGlvbih0LGUscixuKXtpZihyfHwocj0wKSxufHwwPT09bnx8KG49dGhpcy5sZW5ndGgpLGU+PXQubGVuZ3RoJiYoZT10Lmxlbmd0aCksZXx8KGU9MCksbj4wJiZuPHImJihuPXIpLG49PT1yKXJldHVybiAwO2lmKDA9PT10Lmxlbmd0aHx8MD09PXRoaXMubGVuZ3RoKXJldHVybiAwO2lmKGU8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInRhcmdldFN0YXJ0IG91dCBvZiBib3VuZHNcIik7aWYocjwwfHxyPj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInNvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHNcIik7aWYobjwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwic291cmNlRW5kIG91dCBvZiBib3VuZHNcIik7bj50aGlzLmxlbmd0aCYmKG49dGhpcy5sZW5ndGgpLHQubGVuZ3RoLWU8bi1yJiYobj10Lmxlbmd0aC1lK3IpO3ZhciBpLG89bi1yO2lmKHRoaXM9PT10JiZyPGUmJmU8bilmb3IoaT1vLTE7aT49MDstLWkpdFtpK2VdPXRoaXNbaStyXTtlbHNlIGlmKG88MWUzfHwhdS5UWVBFRF9BUlJBWV9TVVBQT1JUKWZvcihpPTA7aTxvOysraSl0W2krZV09dGhpc1tpK3JdO2Vsc2UgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwodCx0aGlzLnN1YmFycmF5KHIscitvKSxlKTtyZXR1cm4gb30sdS5wcm90b3R5cGUuZmlsbD1mdW5jdGlvbih0LGUscixuKXtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGU/KG49ZSxlPTAscj10aGlzLmxlbmd0aCk6XCJzdHJpbmdcIj09dHlwZW9mIHImJihuPXIscj10aGlzLmxlbmd0aCksMT09PXQubGVuZ3RoKXt2YXIgaT10LmNoYXJDb2RlQXQoMCk7aTwyNTYmJih0PWkpfWlmKHZvaWQgMCE9PW4mJlwic3RyaW5nXCIhPXR5cGVvZiBuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuJiYhdS5pc0VuY29kaW5nKG4pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIituKX1lbHNlXCJudW1iZXJcIj09dHlwZW9mIHQmJih0Jj0yNTUpO2lmKGU8MHx8dGhpcy5sZW5ndGg8ZXx8dGhpcy5sZW5ndGg8cil0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk91dCBvZiByYW5nZSBpbmRleFwiKTtpZihyPD1lKXJldHVybiB0aGlzO3ZhciBvO2lmKGU+Pj49MCxyPXZvaWQgMD09PXI/dGhpcy5sZW5ndGg6cj4+PjAsdHx8KHQ9MCksXCJudW1iZXJcIj09dHlwZW9mIHQpZm9yKG89ZTtvPHI7KytvKXRoaXNbb109dDtlbHNle3ZhciBhPXUuaXNCdWZmZXIodCk/dDpVKG5ldyB1KHQsbikudG9TdHJpbmcoKSkscz1hLmxlbmd0aDtmb3Iobz0wO288ci1lOysrbyl0aGlzW28rZV09YVtvJXNdfXJldHVybiB0aGlzfTt2YXIgQj0vW14rXFwvMC05QS1aYS16LV9dL2c7ZnVuY3Rpb24gRCh0KXtyZXR1cm4gdDwxNj9cIjBcIit0LnRvU3RyaW5nKDE2KTp0LnRvU3RyaW5nKDE2KX1mdW5jdGlvbiBVKHQsZSl7dmFyIHI7ZT1lfHwxLzA7Zm9yKHZhciBuPXQubGVuZ3RoLGk9bnVsbCxvPVtdLGE9MDthPG47KythKXtpZigocj10LmNoYXJDb2RlQXQoYSkpPjU1Mjk1JiZyPDU3MzQ0KXtpZighaSl7aWYocj41NjMxOSl7KGUtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWlmKGErMT09PW4peyhlLT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1pPXI7Y29udGludWV9aWYocjw1NjMyMCl7KGUtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpLGk9cjtjb250aW51ZX1yPTY1NTM2KyhpLTU1Mjk2PDwxMHxyLTU2MzIwKX1lbHNlIGkmJihlLT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtpZihpPW51bGwscjwxMjgpe2lmKChlLT0xKTwwKWJyZWFrO28ucHVzaChyKX1lbHNlIGlmKHI8MjA0OCl7aWYoKGUtPTIpPDApYnJlYWs7by5wdXNoKHI+PjZ8MTkyLDYzJnJ8MTI4KX1lbHNlIGlmKHI8NjU1MzYpe2lmKChlLT0zKTwwKWJyZWFrO28ucHVzaChyPj4xMnwyMjQscj4+NiY2M3wxMjgsNjMmcnwxMjgpfWVsc2V7aWYoIShyPDExMTQxMTIpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29kZSBwb2ludFwiKTtpZigoZS09NCk8MClicmVhaztvLnB1c2gocj4+MTh8MjQwLHI+PjEyJjYzfDEyOCxyPj42JjYzfDEyOCw2MyZyfDEyOCl9fXJldHVybiBvfWZ1bmN0aW9uIHEodCl7cmV0dXJuIG4udG9CeXRlQXJyYXkoZnVuY3Rpb24odCl7aWYoKHQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQudHJpbT90LnRyaW0oKTp0LnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIil9KHQpLnJlcGxhY2UoQixcIlwiKSkubGVuZ3RoPDIpcmV0dXJuXCJcIjtmb3IoO3QubGVuZ3RoJTQhPTA7KXQrPVwiPVwiO3JldHVybiB0fSh0KSl9ZnVuY3Rpb24gRyh0LGUscixuKXtmb3IodmFyIGk9MDtpPG4mJiEoaStyPj1lLmxlbmd0aHx8aT49dC5sZW5ndGgpOysraSllW2krcl09dFtpXTtyZXR1cm4gaX19KS5jYWxsKHRoaXMscigyMSkpfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saT1cIm9iamVjdFwiPT10eXBlb2YgUmVmbGVjdD9SZWZsZWN0Om51bGwsbz1pJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLmFwcGx5P2kuYXBwbHk6ZnVuY3Rpb24odCxlLHIpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0LGUscil9O249aSYmXCJmdW5jdGlvblwiPT10eXBlb2YgaS5vd25LZXlzP2kub3duS2V5czpPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KSl9OmZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KX07dmFyIGE9TnVtYmVyLmlzTmFOfHxmdW5jdGlvbih0KXtyZXR1cm4gdCE9dH07ZnVuY3Rpb24gcygpe3MuaW5pdC5jYWxsKHRoaXMpfXQuZXhwb3J0cz1zLHMuRXZlbnRFbWl0dGVyPXMscy5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAscy5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTAscy5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDA7dmFyIHU9MTA7ZnVuY3Rpb24gYyh0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHQpfWZ1bmN0aW9uIGYodCl7cmV0dXJuIHZvaWQgMD09PXQuX21heExpc3RlbmVycz9zLmRlZmF1bHRNYXhMaXN0ZW5lcnM6dC5fbWF4TGlzdGVuZXJzfWZ1bmN0aW9uIGwodCxlLHIsbil7dmFyIGksbyxhLHM7aWYoYyhyKSx2b2lkIDA9PT0obz10Ll9ldmVudHMpPyhvPXQuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHQuX2V2ZW50c0NvdW50PTApOih2b2lkIDAhPT1vLm5ld0xpc3RlbmVyJiYodC5lbWl0KFwibmV3TGlzdGVuZXJcIixlLHIubGlzdGVuZXI/ci5saXN0ZW5lcjpyKSxvPXQuX2V2ZW50cyksYT1vW2VdKSx2b2lkIDA9PT1hKWE9b1tlXT1yLCsrdC5fZXZlbnRzQ291bnQ7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2E9b1tlXT1uP1tyLGFdOlthLHJdOm4/YS51bnNoaWZ0KHIpOmEucHVzaChyKSwoaT1mKHQpKT4wJiZhLmxlbmd0aD5pJiYhYS53YXJuZWQpe2Eud2FybmVkPSEwO3ZhciB1PW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrYS5sZW5ndGgrXCIgXCIrU3RyaW5nKGUpK1wiIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXRcIik7dS5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCIsdS5lbWl0dGVyPXQsdS50eXBlPWUsdS5jb3VudD1hLmxlbmd0aCxzPXUsY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4ocyl9cmV0dXJuIHR9ZnVuY3Rpb24gaCgpe2lmKCF0aGlzLmZpcmVkKXJldHVybiB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsdGhpcy53cmFwRm4pLHRoaXMuZmlyZWQ9ITAsMD09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTp0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LGFyZ3VtZW50cyl9ZnVuY3Rpb24gcCh0LGUscil7dmFyIG49e2ZpcmVkOiExLHdyYXBGbjp2b2lkIDAsdGFyZ2V0OnQsdHlwZTplLGxpc3RlbmVyOnJ9LGk9aC5iaW5kKG4pO3JldHVybiBpLmxpc3RlbmVyPXIsbi53cmFwRm49aSxpfWZ1bmN0aW9uIGQodCxlLHIpe3ZhciBuPXQuX2V2ZW50cztpZih2b2lkIDA9PT1uKXJldHVybltdO3ZhciBpPW5bZV07cmV0dXJuIHZvaWQgMD09PWk/W106XCJmdW5jdGlvblwiPT10eXBlb2YgaT9yP1tpLmxpc3RlbmVyfHxpXTpbaV06cj9mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEFycmF5KHQubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpZVtyXT10W3JdLmxpc3RlbmVyfHx0W3JdO3JldHVybiBlfShpKTpnKGksaS5sZW5ndGgpfWZ1bmN0aW9uIHYodCl7dmFyIGU9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PWUpe3ZhciByPWVbdF07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgcilyZXR1cm4gMTtpZih2b2lkIDAhPT1yKXJldHVybiByLmxlbmd0aH1yZXR1cm4gMH1mdW5jdGlvbiBnKHQsZSl7Zm9yKHZhciByPW5ldyBBcnJheShlKSxuPTA7bjxlOysrbilyW25dPXRbbl07cmV0dXJuIHJ9T2JqZWN0LmRlZmluZVByb3BlcnR5KHMsXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9LHNldDpmdW5jdGlvbih0KXtpZihcIm51bWJlclwiIT10eXBlb2YgdHx8dDwwfHxhKHQpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyt0K1wiLlwiKTt1PXR9fSkscy5pbml0PWZ1bmN0aW9uKCl7dm9pZCAwIT09dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHMhPT1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXMuX21heExpc3RlbmVycz10aGlzLl9tYXhMaXN0ZW5lcnN8fHZvaWQgMH0scy5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzPWZ1bmN0aW9uKHQpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0fHx0PDB8fGEodCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK3QrXCIuXCIpO3JldHVybiB0aGlzLl9tYXhMaXN0ZW5lcnM9dCx0aGlzfSxzLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtyZXR1cm4gZih0aGlzKX0scy5wcm90b3R5cGUuZW1pdD1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10scj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspZS5wdXNoKGFyZ3VtZW50c1tyXSk7dmFyIG49XCJlcnJvclwiPT09dCxpPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1pKW49biYmdm9pZCAwPT09aS5lcnJvcjtlbHNlIGlmKCFuKXJldHVybiExO2lmKG4pe3ZhciBhO2lmKGUubGVuZ3RoPjAmJihhPWVbMF0pLGEgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBhO3ZhciBzPW5ldyBFcnJvcihcIlVuaGFuZGxlZCBlcnJvci5cIisoYT9cIiAoXCIrYS5tZXNzYWdlK1wiKVwiOlwiXCIpKTt0aHJvdyBzLmNvbnRleHQ9YSxzfXZhciB1PWlbdF07aWYodm9pZCAwPT09dSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB1KW8odSx0aGlzLGUpO2Vsc2V7dmFyIGM9dS5sZW5ndGgsZj1nKHUsYyk7Zm9yKHI9MDtyPGM7KytyKW8oZltyXSx0aGlzLGUpfXJldHVybiEwfSxzLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbih0LGUpe3JldHVybiBsKHRoaXMsdCxlLCExKX0scy5wcm90b3R5cGUub249cy5wcm90b3R5cGUuYWRkTGlzdGVuZXIscy5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGwodGhpcyx0LGUsITApfSxzLnByb3RvdHlwZS5vbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGMoZSksdGhpcy5vbih0LHAodGhpcyx0LGUpKSx0aGlzfSxzLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGMoZSksdGhpcy5wcmVwZW5kTGlzdGVuZXIodCxwKHRoaXMsdCxlKSksdGhpc30scy5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24odCxlKXt2YXIgcixuLGksbyxhO2lmKGMoZSksdm9pZCAwPT09KG49dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZih2b2lkIDA9PT0ocj1uW3RdKSlyZXR1cm4gdGhpcztpZihyPT09ZXx8ci5saXN0ZW5lcj09PWUpMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTooZGVsZXRlIG5bdF0sbi5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIix0LHIubGlzdGVuZXJ8fGUpKTtlbHNlIGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHIpe2ZvcihpPS0xLG89ci5sZW5ndGgtMTtvPj0wO28tLSlpZihyW29dPT09ZXx8cltvXS5saXN0ZW5lcj09PWUpe2E9cltvXS5saXN0ZW5lcixpPW87YnJlYWt9aWYoaTwwKXJldHVybiB0aGlzOzA9PT1pP3Iuc2hpZnQoKTpmdW5jdGlvbih0LGUpe2Zvcig7ZSsxPHQubGVuZ3RoO2UrKyl0W2VdPXRbZSsxXTt0LnBvcCgpfShyLGkpLDE9PT1yLmxlbmd0aCYmKG5bdF09clswXSksdm9pZCAwIT09bi5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KFwicmVtb3ZlTGlzdGVuZXJcIix0LGF8fGUpfXJldHVybiB0aGlzfSxzLnByb3RvdHlwZS5vZmY9cy5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIscy5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3ZhciBlLHIsbjtpZih2b2lkIDA9PT0ocj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PXIucmVtb3ZlTGlzdGVuZXIpcmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKTp2b2lkIDAhPT1yW3RdJiYoMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpkZWxldGUgclt0XSksdGhpcztpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIGksbz1PYmplY3Qua2V5cyhyKTtmb3Iobj0wO248by5sZW5ndGg7KytuKVwicmVtb3ZlTGlzdGVuZXJcIiE9PShpPW9bbl0pJiZ0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhpKTtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYoXCJmdW5jdGlvblwiPT10eXBlb2YoZT1yW3RdKSl0aGlzLnJlbW92ZUxpc3RlbmVyKHQsZSk7ZWxzZSBpZih2b2lkIDAhPT1lKWZvcihuPWUubGVuZ3RoLTE7bj49MDtuLS0pdGhpcy5yZW1vdmVMaXN0ZW5lcih0LGVbbl0pO3JldHVybiB0aGlzfSxzLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24odCl7cmV0dXJuIGQodGhpcyx0LCEwKX0scy5wcm90b3R5cGUucmF3TGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3JldHVybiBkKHRoaXMsdCwhMSl9LHMubGlzdGVuZXJDb3VudD1mdW5jdGlvbih0LGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQubGlzdGVuZXJDb3VudD90Lmxpc3RlbmVyQ291bnQoZSk6di5jYWxsKHQsZSl9LHMucHJvdG90eXBlLmxpc3RlbmVyQ291bnQ9dixzLnByb3RvdHlwZS5ldmVudE5hbWVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50PjA/bih0aGlzLl9ldmVudHMpOltdfX0sZnVuY3Rpb24odCxlLHIpeyhlPXQuZXhwb3J0cz1yKDEzOCkpLlN0cmVhbT1lLGUuUmVhZGFibGU9ZSxlLldyaXRhYmxlPXIoOTUpLGUuRHVwbGV4PXIoMjMpLGUuVHJhbnNmb3JtPXIoMTQyKSxlLlBhc3NUaHJvdWdoPXIoMTk2KX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiOyhmdW5jdGlvbihlLG4saSl7dmFyIG89cig1NSk7ZnVuY3Rpb24gYSh0KXt2YXIgZT10aGlzO3RoaXMubmV4dD1udWxsLHRoaXMuZW50cnk9bnVsbCx0aGlzLmZpbmlzaD1mdW5jdGlvbigpeyFmdW5jdGlvbih0LGUscil7dmFyIG49dC5lbnRyeTt0LmVudHJ5PW51bGw7Zm9yKDtuOyl7dmFyIGk9bi5jYWxsYmFjaztlLnBlbmRpbmdjYi0tLGkociksbj1uLm5leHR9ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU/ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dD10OmUuY29ya2VkUmVxdWVzdHNGcmVlPXR9KGUsdCl9fXQuZXhwb3J0cz1iO3ZhciBzLHU9IWUuYnJvd3NlciYmW1widjAuMTBcIixcInYwLjkuXCJdLmluZGV4T2YoZS52ZXJzaW9uLnNsaWNlKDAsNSkpPi0xP246by5uZXh0VGljaztiLldyaXRhYmxlU3RhdGU9eTt2YXIgYz1yKDM5KTtjLmluaGVyaXRzPXIoMjkpO3ZhciBmPXtkZXByZWNhdGU6cigxOTUpfSxsPXIoMTM5KSxoPXIoNTYpLkJ1ZmZlcixwPWkuVWludDhBcnJheXx8ZnVuY3Rpb24oKXt9O3ZhciBkLHY9cigxNDApO2Z1bmN0aW9uIGcoKXt9ZnVuY3Rpb24geSh0LGUpe3M9c3x8cigyMyksdD10fHx7fTt2YXIgbj1lIGluc3RhbmNlb2Ygczt0aGlzLm9iamVjdE1vZGU9ISF0Lm9iamVjdE1vZGUsbiYmKHRoaXMub2JqZWN0TW9kZT10aGlzLm9iamVjdE1vZGV8fCEhdC53cml0YWJsZU9iamVjdE1vZGUpO3ZhciBpPXQuaGlnaFdhdGVyTWFyayxjPXQud3JpdGFibGVIaWdoV2F0ZXJNYXJrLGY9dGhpcy5vYmplY3RNb2RlPzE2OjE2Mzg0O3RoaXMuaGlnaFdhdGVyTWFyaz1pfHwwPT09aT9pOm4mJihjfHwwPT09Yyk/YzpmLHRoaXMuaGlnaFdhdGVyTWFyaz1NYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayksdGhpcy5maW5hbENhbGxlZD0hMSx0aGlzLm5lZWREcmFpbj0hMSx0aGlzLmVuZGluZz0hMSx0aGlzLmVuZGVkPSExLHRoaXMuZmluaXNoZWQ9ITEsdGhpcy5kZXN0cm95ZWQ9ITE7dmFyIGw9ITE9PT10LmRlY29kZVN0cmluZ3M7dGhpcy5kZWNvZGVTdHJpbmdzPSFsLHRoaXMuZGVmYXVsdEVuY29kaW5nPXQuZGVmYXVsdEVuY29kaW5nfHxcInV0ZjhcIix0aGlzLmxlbmd0aD0wLHRoaXMud3JpdGluZz0hMSx0aGlzLmNvcmtlZD0wLHRoaXMuc3luYz0hMCx0aGlzLmJ1ZmZlclByb2Nlc3Npbmc9ITEsdGhpcy5vbndyaXRlPWZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUpe3ZhciByPXQuX3dyaXRhYmxlU3RhdGUsbj1yLnN5bmMsaT1yLndyaXRlY2I7aWYoZnVuY3Rpb24odCl7dC53cml0aW5nPSExLHQud3JpdGVjYj1udWxsLHQubGVuZ3RoLT10LndyaXRlbGVuLHQud3JpdGVsZW49MH0ociksZSkhZnVuY3Rpb24odCxlLHIsbixpKXstLWUucGVuZGluZ2NiLHI/KG8ubmV4dFRpY2soaSxuKSxvLm5leHRUaWNrKEUsdCxlKSx0Ll93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD0hMCx0LmVtaXQoXCJlcnJvclwiLG4pKTooaShuKSx0Ll93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD0hMCx0LmVtaXQoXCJlcnJvclwiLG4pLEUodCxlKSl9KHQscixuLGUsaSk7ZWxzZXt2YXIgYT14KHIpO2F8fHIuY29ya2VkfHxyLmJ1ZmZlclByb2Nlc3Npbmd8fCFyLmJ1ZmZlcmVkUmVxdWVzdHx8dyh0LHIpLG4/dShtLHQscixhLGkpOm0odCxyLGEsaSl9fShlLHQpfSx0aGlzLndyaXRlY2I9bnVsbCx0aGlzLndyaXRlbGVuPTAsdGhpcy5idWZmZXJlZFJlcXVlc3Q9bnVsbCx0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCx0aGlzLnBlbmRpbmdjYj0wLHRoaXMucHJlZmluaXNoZWQ9ITEsdGhpcy5lcnJvckVtaXR0ZWQ9ITEsdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudD0wLHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlPW5ldyBhKHRoaXMpfWZ1bmN0aW9uIGIodCl7aWYocz1zfHxyKDIzKSwhKGQuY2FsbChiLHRoaXMpfHx0aGlzIGluc3RhbmNlb2YgcykpcmV0dXJuIG5ldyBiKHQpO3RoaXMuX3dyaXRhYmxlU3RhdGU9bmV3IHkodCx0aGlzKSx0aGlzLndyaXRhYmxlPSEwLHQmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LndyaXRlJiYodGhpcy5fd3JpdGU9dC53cml0ZSksXCJmdW5jdGlvblwiPT10eXBlb2YgdC53cml0ZXYmJih0aGlzLl93cml0ZXY9dC53cml0ZXYpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuZGVzdHJveSYmKHRoaXMuX2Rlc3Ryb3k9dC5kZXN0cm95KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmZpbmFsJiYodGhpcy5fZmluYWw9dC5maW5hbCkpLGwuY2FsbCh0aGlzKX1mdW5jdGlvbiBfKHQsZSxyLG4saSxvLGEpe2Uud3JpdGVsZW49bixlLndyaXRlY2I9YSxlLndyaXRpbmc9ITAsZS5zeW5jPSEwLHI/dC5fd3JpdGV2KGksZS5vbndyaXRlKTp0Ll93cml0ZShpLG8sZS5vbndyaXRlKSxlLnN5bmM9ITF9ZnVuY3Rpb24gbSh0LGUscixuKXtyfHxmdW5jdGlvbih0LGUpezA9PT1lLmxlbmd0aCYmZS5uZWVkRHJhaW4mJihlLm5lZWREcmFpbj0hMSx0LmVtaXQoXCJkcmFpblwiKSl9KHQsZSksZS5wZW5kaW5nY2ItLSxuKCksRSh0LGUpfWZ1bmN0aW9uIHcodCxlKXtlLmJ1ZmZlclByb2Nlc3Npbmc9ITA7dmFyIHI9ZS5idWZmZXJlZFJlcXVlc3Q7aWYodC5fd3JpdGV2JiZyJiZyLm5leHQpe3ZhciBuPWUuYnVmZmVyZWRSZXF1ZXN0Q291bnQsaT1uZXcgQXJyYXkobiksbz1lLmNvcmtlZFJlcXVlc3RzRnJlZTtvLmVudHJ5PXI7Zm9yKHZhciBzPTAsdT0hMDtyOylpW3NdPXIsci5pc0J1Znx8KHU9ITEpLHI9ci5uZXh0LHMrPTE7aS5hbGxCdWZmZXJzPXUsXyh0LGUsITAsZS5sZW5ndGgsaSxcIlwiLG8uZmluaXNoKSxlLnBlbmRpbmdjYisrLGUubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsLG8ubmV4dD8oZS5jb3JrZWRSZXF1ZXN0c0ZyZWU9by5uZXh0LG8ubmV4dD1udWxsKTplLmNvcmtlZFJlcXVlc3RzRnJlZT1uZXcgYShlKSxlLmJ1ZmZlcmVkUmVxdWVzdENvdW50PTB9ZWxzZXtmb3IoO3I7KXt2YXIgYz1yLmNodW5rLGY9ci5lbmNvZGluZyxsPXIuY2FsbGJhY2s7aWYoXyh0LGUsITEsZS5vYmplY3RNb2RlPzE6Yy5sZW5ndGgsYyxmLGwpLHI9ci5uZXh0LGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLSxlLndyaXRpbmcpYnJlYWt9bnVsbD09PXImJihlLmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCl9ZS5idWZmZXJlZFJlcXVlc3Q9cixlLmJ1ZmZlclByb2Nlc3Npbmc9ITF9ZnVuY3Rpb24geCh0KXtyZXR1cm4gdC5lbmRpbmcmJjA9PT10Lmxlbmd0aCYmbnVsbD09PXQuYnVmZmVyZWRSZXF1ZXN0JiYhdC5maW5pc2hlZCYmIXQud3JpdGluZ31mdW5jdGlvbiBrKHQsZSl7dC5fZmluYWwoKGZ1bmN0aW9uKHIpe2UucGVuZGluZ2NiLS0sciYmdC5lbWl0KFwiZXJyb3JcIixyKSxlLnByZWZpbmlzaGVkPSEwLHQuZW1pdChcInByZWZpbmlzaFwiKSxFKHQsZSl9KSl9ZnVuY3Rpb24gRSh0LGUpe3ZhciByPXgoZSk7cmV0dXJuIHImJighZnVuY3Rpb24odCxlKXtlLnByZWZpbmlzaGVkfHxlLmZpbmFsQ2FsbGVkfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgdC5fZmluYWw/KGUucGVuZGluZ2NiKyssZS5maW5hbENhbGxlZD0hMCxvLm5leHRUaWNrKGssdCxlKSk6KGUucHJlZmluaXNoZWQ9ITAsdC5lbWl0KFwicHJlZmluaXNoXCIpKSl9KHQsZSksMD09PWUucGVuZGluZ2NiJiYoZS5maW5pc2hlZD0hMCx0LmVtaXQoXCJmaW5pc2hcIikpKSxyfWMuaW5oZXJpdHMoYixsKSx5LnByb3RvdHlwZS5nZXRCdWZmZXI9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5idWZmZXJlZFJlcXVlc3QsZT1bXTt0OyllLnB1c2godCksdD10Lm5leHQ7cmV0dXJuIGV9LGZ1bmN0aW9uKCl7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LnByb3RvdHlwZSxcImJ1ZmZlclwiLHtnZXQ6Zi5kZXByZWNhdGUoKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCl9KSxcIl93cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyIGluc3RlYWQuXCIsXCJERVAwMDAzXCIpfSl9Y2F0Y2godCl7fX0oKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5oYXNJbnN0YW5jZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0/KGQ9RnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4hIWQuY2FsbCh0aGlzLHQpfHx0aGlzPT09YiYmKHQmJnQuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiB5KX19KSk6ZD1mdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHRoaXN9LGIucHJvdG90eXBlLnBpcGU9ZnVuY3Rpb24oKXt0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkNhbm5vdCBwaXBlLCBub3QgcmVhZGFibGVcIikpfSxiLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0LGUscil7dmFyIG4saT10aGlzLl93cml0YWJsZVN0YXRlLGE9ITEscz0haS5vYmplY3RNb2RlJiYobj10LGguaXNCdWZmZXIobil8fG4gaW5zdGFuY2VvZiBwKTtyZXR1cm4gcyYmIWguaXNCdWZmZXIodCkmJih0PWZ1bmN0aW9uKHQpe3JldHVybiBoLmZyb20odCl9KHQpKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYocj1lLGU9bnVsbCkscz9lPVwiYnVmZmVyXCI6ZXx8KGU9aS5kZWZhdWx0RW5jb2RpbmcpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIHImJihyPWcpLGkuZW5kZWQ/ZnVuY3Rpb24odCxlKXt2YXIgcj1uZXcgRXJyb3IoXCJ3cml0ZSBhZnRlciBlbmRcIik7dC5lbWl0KFwiZXJyb3JcIixyKSxvLm5leHRUaWNrKGUscil9KHRoaXMscik6KHN8fGZ1bmN0aW9uKHQsZSxyLG4pe3ZhciBpPSEwLGE9ITE7cmV0dXJuIG51bGw9PT1yP2E9bmV3IFR5cGVFcnJvcihcIk1heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtXCIpOlwic3RyaW5nXCI9PXR5cGVvZiByfHx2b2lkIDA9PT1yfHxlLm9iamVjdE1vZGV8fChhPW5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rXCIpKSxhJiYodC5lbWl0KFwiZXJyb3JcIixhKSxvLm5leHRUaWNrKG4sYSksaT0hMSksaX0odGhpcyxpLHQscikpJiYoaS5wZW5kaW5nY2IrKyxhPWZ1bmN0aW9uKHQsZSxyLG4saSxvKXtpZighcil7dmFyIGE9ZnVuY3Rpb24odCxlLHIpe3Qub2JqZWN0TW9kZXx8ITE9PT10LmRlY29kZVN0cmluZ3N8fFwic3RyaW5nXCIhPXR5cGVvZiBlfHwoZT1oLmZyb20oZSxyKSk7cmV0dXJuIGV9KGUsbixpKTtuIT09YSYmKHI9ITAsaT1cImJ1ZmZlclwiLG49YSl9dmFyIHM9ZS5vYmplY3RNb2RlPzE6bi5sZW5ndGg7ZS5sZW5ndGgrPXM7dmFyIHU9ZS5sZW5ndGg8ZS5oaWdoV2F0ZXJNYXJrO3V8fChlLm5lZWREcmFpbj0hMCk7aWYoZS53cml0aW5nfHxlLmNvcmtlZCl7dmFyIGM9ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O2UubGFzdEJ1ZmZlcmVkUmVxdWVzdD17Y2h1bms6bixlbmNvZGluZzppLGlzQnVmOnIsY2FsbGJhY2s6byxuZXh0Om51bGx9LGM/Yy5uZXh0PWUubGFzdEJ1ZmZlcmVkUmVxdWVzdDplLmJ1ZmZlcmVkUmVxdWVzdD1lLmxhc3RCdWZmZXJlZFJlcXVlc3QsZS5idWZmZXJlZFJlcXVlc3RDb3VudCs9MX1lbHNlIF8odCxlLCExLHMsbixpLG8pO3JldHVybiB1fSh0aGlzLGkscyx0LGUscikpLGF9LGIucHJvdG90eXBlLmNvcms9ZnVuY3Rpb24oKXt0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrfSxiLnByb3RvdHlwZS51bmNvcms9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl93cml0YWJsZVN0YXRlO3QuY29ya2VkJiYodC5jb3JrZWQtLSx0LndyaXRpbmd8fHQuY29ya2VkfHx0LmZpbmlzaGVkfHx0LmJ1ZmZlclByb2Nlc3Npbmd8fCF0LmJ1ZmZlcmVkUmVxdWVzdHx8dyh0aGlzLHQpKX0sYi5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nPWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD10LnRvTG93ZXJDYXNlKCkpLCEoW1wiaGV4XCIsXCJ1dGY4XCIsXCJ1dGYtOFwiLFwiYXNjaWlcIixcImJpbmFyeVwiLFwiYmFzZTY0XCIsXCJ1Y3MyXCIsXCJ1Y3MtMlwiLFwidXRmMTZsZVwiLFwidXRmLTE2bGVcIixcInJhd1wiXS5pbmRleE9mKCh0K1wiXCIpLnRvTG93ZXJDYXNlKCkpPi0xKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrdCk7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nPXQsdGhpc30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwid3JpdGFibGVIaWdoV2F0ZXJNYXJrXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFya319KSxiLnByb3RvdHlwZS5fd3JpdGU9ZnVuY3Rpb24odCxlLHIpe3IobmV3IEVycm9yKFwiX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkXCIpKX0sYi5wcm90b3R5cGUuX3dyaXRldj1udWxsLGIucHJvdG90eXBlLmVuZD1mdW5jdGlvbih0LGUscil7dmFyIG49dGhpcy5fd3JpdGFibGVTdGF0ZTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0PyhyPXQsdD1udWxsLGU9bnVsbCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKHI9ZSxlPW51bGwpLG51bGwhPXQmJnRoaXMud3JpdGUodCxlKSxuLmNvcmtlZCYmKG4uY29ya2VkPTEsdGhpcy51bmNvcmsoKSksbi5lbmRpbmd8fG4uZmluaXNoZWR8fGZ1bmN0aW9uKHQsZSxyKXtlLmVuZGluZz0hMCxFKHQsZSksciYmKGUuZmluaXNoZWQ/by5uZXh0VGljayhyKTp0Lm9uY2UoXCJmaW5pc2hcIixyKSk7ZS5lbmRlZD0hMCx0LndyaXRhYmxlPSExfSh0aGlzLG4scil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fd3JpdGFibGVTdGF0ZSYmdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWR9LHNldDpmdW5jdGlvbih0KXt0aGlzLl93cml0YWJsZVN0YXRlJiYodGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ9dCl9fSksYi5wcm90b3R5cGUuZGVzdHJveT12LmRlc3Ryb3ksYi5wcm90b3R5cGUuX3VuZGVzdHJveT12LnVuZGVzdHJveSxiLnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbih0LGUpe3RoaXMuZW5kKCksZSh0KX19KS5jYWxsKHRoaXMscigzOCkscigxMzYpLnNldEltbWVkaWF0ZSxyKDIxKSl9LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gcihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/dC5leHBvcnRzPXI9ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTp0LmV4cG9ydHM9cj1mdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxyKGUpfXQuZXhwb3J0cz1yfSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxNiksaT1yKDgwKSxvPXIoMjAyKSxhPXIoMjAzKTtmdW5jdGlvbiBzKGUpe3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIE1hcD9uZXcgTWFwOnZvaWQgMDtyZXR1cm4gdC5leHBvcnRzPXM9ZnVuY3Rpb24odCl7aWYobnVsbD09PXR8fCFvKHQpKXJldHVybiB0O2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO2lmKHZvaWQgMCE9PXIpe2lmKHIuaGFzKHQpKXJldHVybiByLmdldCh0KTtyLnNldCh0LGUpfWZ1bmN0aW9uIGUoKXtyZXR1cm4gYSh0LGFyZ3VtZW50cyxuKHRoaXMpLmNvbnN0cnVjdG9yKX1yZXR1cm4gZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksaShlLHQpfSxzKGUpfXQuZXhwb3J0cz1zfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoNCksbz1yKDI2KSxhPXIoMjUpLHM9cig3KSx1PXIoNjkpLGM9cigxMDcpLGY9cig1KSxsPXIoMTMpLGg9cig0NykscD1yKDEwKSxkPXIoOCksdj1yKDI3KSxnPXIoMTIpLHk9cig0MyksYj1yKDMxKSxfPXIoNzApLG09cig0OCksdz1yKDQ2KSx4PXIoMTQ4KSxrPXIoMTA2KSxFPXIoMjIpLFM9cigxMSksaj1yKDU5KSxSPXIoMTQpLEM9cigxNyksST1yKDY0KSxPPXIoNDQpLFQ9cig0NSksUD1yKDY1KSxBPXIoMyksTD1yKDExMCksRj1yKDExMSksTT1yKDQ5KSxOPXIoMjQpLEI9cigzMykuZm9yRWFjaCxEPU8oXCJoaWRkZW5cIiksVT1BKFwidG9QcmltaXRpdmVcIikscT1OLnNldCxHPU4uZ2V0dGVyRm9yKFwiU3ltYm9sXCIpLFc9T2JqZWN0LnByb3RvdHlwZSx6PWkuU3ltYm9sLFk9byhcIkpTT05cIixcInN0cmluZ2lmeVwiKSxRPUUuZiwkPVMuZixIPXguZixLPWouZixWPUkoXCJzeW1ib2xzXCIpLFo9SShcIm9wLXN5bWJvbHNcIiksSj1JKFwic3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeVwiKSxYPUkoXCJzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5XCIpLHR0PUkoXCJ3a3NcIiksZXQ9aS5RT2JqZWN0LHJ0PSFldHx8IWV0LnByb3RvdHlwZXx8IWV0LnByb3RvdHlwZS5maW5kQ2hpbGQsbnQ9cyYmZigoZnVuY3Rpb24oKXtyZXR1cm4gNyE9XygkKHt9LFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gJCh0aGlzLFwiYVwiLHt2YWx1ZTo3fSkuYX19KSkuYX0pKT9mdW5jdGlvbih0LGUscil7dmFyIG49UShXLGUpO24mJmRlbGV0ZSBXW2VdLCQodCxlLHIpLG4mJnQhPT1XJiYkKFcsZSxuKX06JCxpdD1mdW5jdGlvbih0LGUpe3ZhciByPVZbdF09Xyh6LnByb3RvdHlwZSk7cmV0dXJuIHEocix7dHlwZTpcIlN5bWJvbFwiLHRhZzp0LGRlc2NyaXB0aW9uOmV9KSxzfHwoci5kZXNjcmlwdGlvbj1lKSxyfSxvdD1jP2Z1bmN0aW9uKHQpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0KHQpaW5zdGFuY2VvZiB6fSxhdD1mdW5jdGlvbih0LGUscil7dD09PVcmJmF0KFosZSxyKSxkKHQpO3ZhciBuPXkoZSwhMCk7cmV0dXJuIGQociksbChWLG4pPyhyLmVudW1lcmFibGU/KGwodCxEKSYmdFtEXVtuXSYmKHRbRF1bbl09ITEpLHI9XyhyLHtlbnVtZXJhYmxlOmIoMCwhMSl9KSk6KGwodCxEKXx8JCh0LEQsYigxLHt9KSksdFtEXVtuXT0hMCksbnQodCxuLHIpKTokKHQsbixyKX0sc3Q9ZnVuY3Rpb24odCxlKXtkKHQpO3ZhciByPWcoZSksbj1tKHIpLmNvbmNhdChsdChyKSk7cmV0dXJuIEIobiwoZnVuY3Rpb24oZSl7cyYmIXV0LmNhbGwocixlKXx8YXQodCxlLHJbZV0pfSkpLHR9LHV0PWZ1bmN0aW9uKHQpe3ZhciBlPXkodCwhMCkscj1LLmNhbGwodGhpcyxlKTtyZXR1cm4hKHRoaXM9PT1XJiZsKFYsZSkmJiFsKFosZSkpJiYoIShyfHwhbCh0aGlzLGUpfHwhbChWLGUpfHxsKHRoaXMsRCkmJnRoaXNbRF1bZV0pfHxyKX0sY3Q9ZnVuY3Rpb24odCxlKXt2YXIgcj1nKHQpLG49eShlLCEwKTtpZihyIT09V3x8IWwoVixuKXx8bChaLG4pKXt2YXIgaT1RKHIsbik7cmV0dXJuIWl8fCFsKFYsbil8fGwocixEKSYmcltEXVtuXXx8KGkuZW51bWVyYWJsZT0hMCksaX19LGZ0PWZ1bmN0aW9uKHQpe3ZhciBlPUgoZyh0KSkscj1bXTtyZXR1cm4gQihlLChmdW5jdGlvbih0KXtsKFYsdCl8fGwoVCx0KXx8ci5wdXNoKHQpfSkpLHJ9LGx0PWZ1bmN0aW9uKHQpe3ZhciBlPXQ9PT1XLHI9SChlP1o6Zyh0KSksbj1bXTtyZXR1cm4gQihyLChmdW5jdGlvbih0KXshbChWLHQpfHxlJiYhbChXLHQpfHxuLnB1c2goVlt0XSl9KSksbn07KHV8fChDKCh6PWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIHopdGhyb3cgVHlwZUVycm9yKFwiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yXCIpO3ZhciB0PWFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9TdHJpbmcoYXJndW1lbnRzWzBdKTp2b2lkIDAsZT1QKHQpLHI9ZnVuY3Rpb24odCl7dGhpcz09PVcmJnIuY2FsbChaLHQpLGwodGhpcyxEKSYmbCh0aGlzW0RdLGUpJiYodGhpc1tEXVtlXT0hMSksbnQodGhpcyxlLGIoMSx0KSl9O3JldHVybiBzJiZydCYmbnQoVyxlLHtjb25maWd1cmFibGU6ITAsc2V0OnJ9KSxpdChlLHQpfSkucHJvdG90eXBlLFwidG9TdHJpbmdcIiwoZnVuY3Rpb24oKXtyZXR1cm4gRyh0aGlzKS50YWd9KSksQyh6LFwid2l0aG91dFNldHRlclwiLChmdW5jdGlvbih0KXtyZXR1cm4gaXQoUCh0KSx0KX0pKSxqLmY9dXQsUy5mPWF0LEUuZj1jdCx3LmY9eC5mPWZ0LGsuZj1sdCxMLmY9ZnVuY3Rpb24odCl7cmV0dXJuIGl0KEEodCksdCl9LHMmJigkKHoucHJvdG90eXBlLFwiZGVzY3JpcHRpb25cIix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBHKHRoaXMpLmRlc2NyaXB0aW9ufX0pLGF8fEMoVyxcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsdXQse3Vuc2FmZTohMH0pKSksbih7Z2xvYmFsOiEwLHdyYXA6ITAsZm9yY2VkOiF1LHNoYW06IXV9LHtTeW1ib2w6en0pLEIobSh0dCksKGZ1bmN0aW9uKHQpe0YodCl9KSksbih7dGFyZ2V0OlwiU3ltYm9sXCIsc3RhdDohMCxmb3JjZWQ6IXV9LHtmb3I6ZnVuY3Rpb24odCl7dmFyIGU9U3RyaW5nKHQpO2lmKGwoSixlKSlyZXR1cm4gSltlXTt2YXIgcj16KGUpO3JldHVybiBKW2VdPXIsWFtyXT1lLHJ9LGtleUZvcjpmdW5jdGlvbih0KXtpZighb3QodCkpdGhyb3cgVHlwZUVycm9yKHQrXCIgaXMgbm90IGEgc3ltYm9sXCIpO2lmKGwoWCx0KSlyZXR1cm4gWFt0XX0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7cnQ9ITB9LHVzZVNpbXBsZTpmdW5jdGlvbigpe3J0PSExfX0pLG4oe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOiF1LHNoYW06IXN9LHtjcmVhdGU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZT9fKHQpOnN0KF8odCksZSl9LGRlZmluZVByb3BlcnR5OmF0LGRlZmluZVByb3BlcnRpZXM6c3QsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmN0fSksbih7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6IXV9LHtnZXRPd25Qcm9wZXJ0eU5hbWVzOmZ0LGdldE93blByb3BlcnR5U3ltYm9sczpsdH0pLG4oe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITAsZm9yY2VkOmYoKGZ1bmN0aW9uKCl7ay5mKDEpfSkpfSx7Z2V0T3duUHJvcGVydHlTeW1ib2xzOmZ1bmN0aW9uKHQpe3JldHVybiBrLmYodih0KSl9fSksWSkmJm4oe3RhcmdldDpcIkpTT05cIixzdGF0OiEwLGZvcmNlZDohdXx8ZigoZnVuY3Rpb24oKXt2YXIgdD16KCk7cmV0dXJuXCJbbnVsbF1cIiE9WShbdF0pfHxcInt9XCIhPVkoe2E6dH0pfHxcInt9XCIhPVkoT2JqZWN0KHQpKX0pKX0se3N0cmluZ2lmeTpmdW5jdGlvbih0LGUscil7Zm9yKHZhciBuLGk9W3RdLG89MTthcmd1bWVudHMubGVuZ3RoPm87KWkucHVzaChhcmd1bWVudHNbbysrXSk7aWYobj1lLChwKGUpfHx2b2lkIDAhPT10KSYmIW90KHQpKXJldHVybiBoKGUpfHwoZT1mdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihlPW4uY2FsbCh0aGlzLHQsZSkpLCFvdChlKSlyZXR1cm4gZX0pLGlbMV09ZSxZLmFwcGx5KG51bGwsaSl9fSk7ei5wcm90b3R5cGVbVV18fFIoei5wcm90b3R5cGUsVSx6LnByb3RvdHlwZS52YWx1ZU9mKSxNKHosXCJTeW1ib2xcIiksVFtEXT0hMH0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNyksaT1yKDUpLG89cig2MSk7dC5leHBvcnRzPSFuJiYhaSgoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KG8oXCJkaXZcIiksXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KSl9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDQpLGk9cig2Miksbz1uW1wiX19jb3JlLWpzX3NoYXJlZF9fXCJdfHxpKFwiX19jb3JlLWpzX3NoYXJlZF9fXCIse30pO3QuZXhwb3J0cz1vfSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxMyksaT1yKDEwMiksbz1yKDIyKSxhPXIoMTEpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgcj1pKGUpLHM9YS5mLHU9by5mLGM9MDtjPHIubGVuZ3RoO2MrKyl7dmFyIGY9cltjXTtuKHQsZil8fHModCxmLHUoZSxmKSl9fX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMjYpLGk9cig0Niksbz1yKDEwNiksYT1yKDgpO3QuZXhwb3J0cz1uKFwiUmVmbGVjdFwiLFwib3duS2V5c1wiKXx8ZnVuY3Rpb24odCl7dmFyIGU9aS5mKGEodCkpLHI9by5mO3JldHVybiByP2UuY29uY2F0KHIodCkpOmV9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cig0KTt0LmV4cG9ydHM9bn0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMTMpLGk9cigxMiksbz1yKDY2KS5pbmRleE9mLGE9cig0NSk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dmFyIHIscz1pKHQpLHU9MCxjPVtdO2ZvcihyIGluIHMpIW4oYSxyKSYmbihzLHIpJiZjLnB1c2gocik7Zm9yKDtlLmxlbmd0aD51OyluKHMscj1lW3UrK10pJiYofm8oYyxyKXx8Yy5wdXNoKHIpKTtyZXR1cm4gY319LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDMyKSxpPU1hdGgubWF4LG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dmFyIHI9bih0KTtyZXR1cm4gcjwwP2kocitlLDApOm8ocixlKX19LGZ1bmN0aW9uKHQsZSl7ZS5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHN9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDY5KTt0LmV4cG9ydHM9biYmIVN5bWJvbC5zaGFtJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yfSxmdW5jdGlvbih0LGUscil7dmFyIG49cig3KSxpPXIoMTEpLG89cig4KSxhPXIoNDgpO3QuZXhwb3J0cz1uP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzOmZ1bmN0aW9uKHQsZSl7byh0KTtmb3IodmFyIHIsbj1hKGUpLHM9bi5sZW5ndGgsdT0wO3M+dTspaS5mKHQscj1uW3UrK10sZVtyXSk7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigyNik7dC5leHBvcnRzPW4oXCJkb2N1bWVudFwiLFwiZG9jdW1lbnRFbGVtZW50XCIpfSxmdW5jdGlvbih0LGUscil7dmFyIG49cigzKTtlLmY9bn0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMTAzKSxpPXIoMTMpLG89cigxMTApLGE9cigxMSkuZjt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9bi5TeW1ib2x8fChuLlN5bWJvbD17fSk7aShlLHQpfHxhKGUsdCx7dmFsdWU6by5mKHQpfSl9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxMCksaT1yKDQ3KSxvPXIoMykoXCJzcGVjaWVzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciByO3JldHVybiBpKHQpJiYoXCJmdW5jdGlvblwiIT10eXBlb2Yocj10LmNvbnN0cnVjdG9yKXx8ciE9PUFycmF5JiYhaShyLnByb3RvdHlwZSk/bihyKSYmbnVsbD09PShyPXJbb10pJiYocj12b2lkIDApOnI9dm9pZCAwKSxuZXcodm9pZCAwPT09cj9BcnJheTpyKSgwPT09ZT8wOmUpfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMyksaT1yKDcwKSxvPXIoMTEpLGE9bihcInVuc2NvcGFibGVzXCIpLHM9QXJyYXkucHJvdG90eXBlO251bGw9PXNbYV0mJm8uZihzLGEse2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTppKG51bGwpfSksdC5leHBvcnRzPWZ1bmN0aW9uKHQpe3NbYV1bdF09ITB9fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoMTUxKSxvPXIoMTE2KSxhPXIoMTE3KSxzPXIoNDkpLHU9cigxNCksYz1yKDE3KSxmPXIoMyksbD1yKDI1KSxoPXIoMzQpLHA9cigxMTUpLGQ9cC5JdGVyYXRvclByb3RvdHlwZSx2PXAuQlVHR1lfU0FGQVJJX0lURVJBVE9SUyxnPWYoXCJpdGVyYXRvclwiKSx5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbih0LGUscixmLHAsYixfKXtpKHIsZSxmKTt2YXIgbSx3LHgsaz1mdW5jdGlvbih0KXtpZih0PT09cCYmQylyZXR1cm4gQztpZighdiYmdCBpbiBqKXJldHVybiBqW3RdO3N3aXRjaCh0KXtjYXNlXCJrZXlzXCI6Y2FzZVwidmFsdWVzXCI6Y2FzZVwiZW50cmllc1wiOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLHQpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyl9fSxFPWUrXCIgSXRlcmF0b3JcIixTPSExLGo9dC5wcm90b3R5cGUsUj1qW2ddfHxqW1wiQEBpdGVyYXRvclwiXXx8cCYmaltwXSxDPSF2JiZSfHxrKHApLEk9XCJBcnJheVwiPT1lJiZqLmVudHJpZXN8fFI7aWYoSSYmKG09byhJLmNhbGwobmV3IHQpKSxkIT09T2JqZWN0LnByb3RvdHlwZSYmbS5uZXh0JiYobHx8byhtKT09PWR8fChhP2EobSxkKTpcImZ1bmN0aW9uXCIhPXR5cGVvZiBtW2ddJiZ1KG0sZyx5KSkscyhtLEUsITAsITApLGwmJihoW0VdPXkpKSksXCJ2YWx1ZXNcIj09cCYmUiYmXCJ2YWx1ZXNcIiE9PVIubmFtZSYmKFM9ITAsQz1mdW5jdGlvbigpe3JldHVybiBSLmNhbGwodGhpcyl9KSxsJiYhX3x8altnXT09PUN8fHUoaixnLEMpLGhbZV09QyxwKWlmKHc9e3ZhbHVlczprKFwidmFsdWVzXCIpLGtleXM6Yj9DOmsoXCJrZXlzXCIpLGVudHJpZXM6ayhcImVudHJpZXNcIil9LF8pZm9yKHggaW4gdykodnx8U3x8ISh4IGluIGopKSYmYyhqLHgsd1t4XSk7ZWxzZSBuKHt0YXJnZXQ6ZSxwcm90bzohMCxmb3JjZWQ6dnx8U30sdyk7cmV0dXJuIHd9fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG4saSxvLGE9cigxMTYpLHM9cigxNCksdT1yKDEzKSxjPXIoMyksZj1yKDI1KSxsPWMoXCJpdGVyYXRvclwiKSxoPSExO1tdLmtleXMmJihcIm5leHRcImluKG89W10ua2V5cygpKT8oaT1hKGEobykpKSE9PU9iamVjdC5wcm90b3R5cGUmJihuPWkpOmg9ITApLG51bGw9PW4mJihuPXt9KSxmfHx1KG4sbCl8fHMobixsLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpLHQuZXhwb3J0cz17SXRlcmF0b3JQcm90b3R5cGU6bixCVUdHWV9TQUZBUklfSVRFUkFUT1JTOmh9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxMyksaT1yKDI3KSxvPXIoNDQpLGE9cigxNTIpLHM9byhcIklFX1BST1RPXCIpLHU9T2JqZWN0LnByb3RvdHlwZTt0LmV4cG9ydHM9YT9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24odCl7cmV0dXJuIHQ9aSh0KSxuKHQscyk/dFtzXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNvbnN0cnVjdG9yJiZ0IGluc3RhbmNlb2YgdC5jb25zdHJ1Y3Rvcj90LmNvbnN0cnVjdG9yLnByb3RvdHlwZTp0IGluc3RhbmNlb2YgT2JqZWN0P3U6bnVsbH19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDgpLGk9cigxNTMpO3QuZXhwb3J0cz1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fChcIl9fcHJvdG9fX1wiaW57fT9mdW5jdGlvbigpe3ZhciB0LGU9ITEscj17fTt0cnl7KHQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLFwiX19wcm90b19fXCIpLnNldCkuY2FsbChyLFtdKSxlPXIgaW5zdGFuY2VvZiBBcnJheX1jYXRjaCh0KXt9cmV0dXJuIGZ1bmN0aW9uKHIsbyl7cmV0dXJuIG4ociksaShvKSxlP3QuY2FsbChyLG8pOnIuX19wcm90b19fPW8scn19KCk6dm9pZCAwKX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNzIpLGk9cigxOSksbz1yKDMpKFwidG9TdHJpbmdUYWdcIiksYT1cIkFyZ3VtZW50c1wiPT1pKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSk7dC5leHBvcnRzPW4/aTpmdW5jdGlvbih0KXt2YXIgZSxyLG47cmV0dXJuIHZvaWQgMD09PXQ/XCJVbmRlZmluZWRcIjpudWxsPT09dD9cIk51bGxcIjpcInN0cmluZ1wiPT10eXBlb2Yocj1mdW5jdGlvbih0LGUpe3RyeXtyZXR1cm4gdFtlXX1jYXRjaCh0KXt9fShlPU9iamVjdCh0KSxvKSk/cjphP2koZSk6XCJPYmplY3RcIj09KG49aShlKSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY2FsbGVlP1wiQXJndW1lbnRzXCI6bn19LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDUpO2Z1bmN0aW9uIGkodCxlKXtyZXR1cm4gUmVnRXhwKHQsZSl9ZS5VTlNVUFBPUlRFRF9ZPW4oKGZ1bmN0aW9uKCl7dmFyIHQ9aShcImFcIixcInlcIik7cmV0dXJuIHQubGFzdEluZGV4PTIsbnVsbCE9dC5leGVjKFwiYWJjZFwiKX0pKSxlLkJST0tFTl9DQVJFVD1uKChmdW5jdGlvbigpe3ZhciB0PWkoXCJeclwiLFwiZ3lcIik7cmV0dXJuIHQubGFzdEluZGV4PTIsbnVsbCE9dC5leGVjKFwic3RyXCIpfSkpfSxmdW5jdGlvbih0LGUscil7dmFyIG49cigzMiksaT1yKDIwKSxvPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLHIpe3ZhciBvLGEscz1TdHJpbmcoaShlKSksdT1uKHIpLGM9cy5sZW5ndGg7cmV0dXJuIHU8MHx8dT49Yz90P1wiXCI6dm9pZCAwOihvPXMuY2hhckNvZGVBdCh1KSk8NTUyOTZ8fG8+NTYzMTl8fHUrMT09PWN8fChhPXMuY2hhckNvZGVBdCh1KzEpKTw1NjMyMHx8YT41NzM0Mz90P3MuY2hhckF0KHUpOm86dD9zLnNsaWNlKHUsdSsyKTphLTU2MzIwKyhvLTU1Mjk2PDwxMCkrNjU1MzZ9fTt0LmV4cG9ydHM9e2NvZGVBdDpvKCExKSxjaGFyQXQ6byghMCl9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17Q1NTUnVsZUxpc3Q6MCxDU1NTdHlsZURlY2xhcmF0aW9uOjAsQ1NTVmFsdWVMaXN0OjAsQ2xpZW50UmVjdExpc3Q6MCxET01SZWN0TGlzdDowLERPTVN0cmluZ0xpc3Q6MCxET01Ub2tlbkxpc3Q6MSxEYXRhVHJhbnNmZXJJdGVtTGlzdDowLEZpbGVMaXN0OjAsSFRNTEFsbENvbGxlY3Rpb246MCxIVE1MQ29sbGVjdGlvbjowLEhUTUxGb3JtRWxlbWVudDowLEhUTUxTZWxlY3RFbGVtZW50OjAsTWVkaWFMaXN0OjAsTWltZVR5cGVBcnJheTowLE5hbWVkTm9kZU1hcDowLE5vZGVMaXN0OjEsUGFpbnRSZXF1ZXN0TGlzdDowLFBsdWdpbjowLFBsdWdpbkFycmF5OjAsU1ZHTGVuZ3RoTGlzdDowLFNWR051bWJlckxpc3Q6MCxTVkdQYXRoU2VnTGlzdDowLFNWR1BvaW50TGlzdDowLFNWR1N0cmluZ0xpc3Q6MCxTVkdUcmFuc2Zvcm1MaXN0OjAsU291cmNlQnVmZmVyTGlzdDowLFN0eWxlU2hlZXRMaXN0OjAsVGV4dFRyYWNrQ3VlTGlzdDowLFRleHRUcmFja0xpc3Q6MCxUb3VjaExpc3Q6MH19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDI2KTt0LmV4cG9ydHM9bihcIm5hdmlnYXRvclwiLFwidXNlckFnZW50XCIpfHxcIlwifSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigzMykuZm9yRWFjaCxpPXIoMzYpO3QuZXhwb3J0cz1pKFwiZm9yRWFjaFwiKT9mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfTpbXS5mb3JFYWNofSxmdW5jdGlvbih0LGUscil7dmFyIG49cigyKSxpPXIoMjcpLG89cig0OCk7bih7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6cig1KSgoZnVuY3Rpb24oKXtvKDEpfSkpfSx7a2V5czpmdW5jdGlvbih0KXtyZXR1cm4gbyhpKHQpKX19KX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMjYpLGk9cigxMSksbz1yKDMpLGE9cig3KSxzPW8oXCJzcGVjaWVzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1uKHQpLHI9aS5mO2EmJmUmJiFlW3NdJiZyKGUscyx7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzfX0pfX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuLGk9cigyKSxvPXIoMjIpLmYsYT1yKDE1KSxzPXIoMTI3KSx1PXIoMjApLGM9cigxMjgpLGY9cigyNSksbD1cIlwiLmVuZHNXaXRoLGg9TWF0aC5taW4scD1jKFwiZW5kc1dpdGhcIik7aSh7dGFyZ2V0OlwiU3RyaW5nXCIscHJvdG86ITAsZm9yY2VkOiEhKGZ8fHB8fChuPW8oU3RyaW5nLnByb3RvdHlwZSxcImVuZHNXaXRoXCIpLCFufHxuLndyaXRhYmxlKSkmJiFwfSx7ZW5kc1dpdGg6ZnVuY3Rpb24odCl7dmFyIGU9U3RyaW5nKHUodGhpcykpO3ModCk7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsbj1hKGUubGVuZ3RoKSxpPXZvaWQgMD09PXI/bjpoKGEociksbiksbz1TdHJpbmcodCk7cmV0dXJuIGw/bC5jYWxsKGUsbyxpKTplLnNsaWNlKGktby5sZW5ndGgsaSk9PT1vfX0pfSxmdW5jdGlvbih0LGUscil7dmFyIG49cig4OCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKG4odCkpdGhyb3cgVHlwZUVycm9yKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO3JldHVybiB0fX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMykoXCJtYXRjaFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9Ly4vO3RyeXtcIi8uL1wiW3RdKGUpfWNhdGNoKHIpe3RyeXtyZXR1cm4gZVtuXT0hMSxcIi8uL1wiW3RdKGUpfWNhdGNoKHQpe319cmV0dXJuITF9fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoMTI3KSxvPXIoMjApO24oe3RhcmdldDpcIlN0cmluZ1wiLHByb3RvOiEwLGZvcmNlZDohcigxMjgpKFwiaW5jbHVkZXNcIil9LHtpbmNsdWRlczpmdW5jdGlvbih0KXtyZXR1cm4hIX5TdHJpbmcobyh0aGlzKSkuaW5kZXhPZihpKHQpLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMiksaT1yKDE3NSk7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6aSE9PVtdLmxhc3RJbmRleE9mfSx7bGFzdEluZGV4T2Y6aX0pfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoMTApLG89cig0NyksYT1yKDEwNSkscz1yKDE1KSx1PXIoMTIpLGM9cig4MiksZj1yKDU0KSxsPXIoMykoXCJzcGVjaWVzXCIpLGg9W10uc2xpY2UscD1NYXRoLm1heDtuKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDohZihcInNsaWNlXCIpfSx7c2xpY2U6ZnVuY3Rpb24odCxlKXt2YXIgcixuLGYsZD11KHRoaXMpLHY9cyhkLmxlbmd0aCksZz1hKHQsdikseT1hKHZvaWQgMD09PWU/djplLHYpO2lmKG8oZCkmJihcImZ1bmN0aW9uXCIhPXR5cGVvZihyPWQuY29uc3RydWN0b3IpfHxyIT09QXJyYXkmJiFvKHIucHJvdG90eXBlKT9pKHIpJiZudWxsPT09KHI9cltsXSkmJihyPXZvaWQgMCk6cj12b2lkIDAscj09PUFycmF5fHx2b2lkIDA9PT1yKSlyZXR1cm4gaC5jYWxsKGQsZyx5KTtmb3Iobj1uZXcodm9pZCAwPT09cj9BcnJheTpyKShwKHktZywwKSksZj0wO2c8eTtnKyssZisrKWcgaW4gZCYmYyhuLGYsZFtnXSk7cmV0dXJuIG4ubGVuZ3RoPWYsbn19KX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoOCksaT1yKDUwKSxvPXIoMykoXCJzcGVjaWVzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciByLGE9bih0KS5jb25zdHJ1Y3RvcjtyZXR1cm4gdm9pZCAwPT09YXx8bnVsbD09KHI9bihhKVtvXSk/ZTppKHIpfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuLGksbyxhPXIoNCkscz1yKDUpLHU9cigxOSksYz1yKDcxKSxmPXIoMTA5KSxsPXIoNjEpLGg9cigxMzQpLHA9YS5sb2NhdGlvbixkPWEuc2V0SW1tZWRpYXRlLHY9YS5jbGVhckltbWVkaWF0ZSxnPWEucHJvY2Vzcyx5PWEuTWVzc2FnZUNoYW5uZWwsYj1hLkRpc3BhdGNoLF89MCxtPXt9LHc9ZnVuY3Rpb24odCl7aWYobS5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIGU9bVt0XTtkZWxldGUgbVt0XSxlKCl9fSx4PWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3codCl9fSxrPWZ1bmN0aW9uKHQpe3codC5kYXRhKX0sRT1mdW5jdGlvbih0KXthLnBvc3RNZXNzYWdlKHQrXCJcIixwLnByb3RvY29sK1wiLy9cIitwLmhvc3QpfTtkJiZ2fHwoZD1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10scj0xO2FyZ3VtZW50cy5sZW5ndGg+cjspZS5wdXNoKGFyZ3VtZW50c1tyKytdKTtyZXR1cm4gbVsrK19dPWZ1bmN0aW9uKCl7KFwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dDpGdW5jdGlvbih0KSkuYXBwbHkodm9pZCAwLGUpfSxuKF8pLF99LHY9ZnVuY3Rpb24odCl7ZGVsZXRlIG1bdF19LFwicHJvY2Vzc1wiPT11KGcpP249ZnVuY3Rpb24odCl7Zy5uZXh0VGljayh4KHQpKX06YiYmYi5ub3c/bj1mdW5jdGlvbih0KXtiLm5vdyh4KHQpKX06eSYmIWg/KG89KGk9bmV3IHkpLnBvcnQyLGkucG9ydDEub25tZXNzYWdlPWssbj1jKG8ucG9zdE1lc3NhZ2UsbywxKSk6IWEuYWRkRXZlbnRMaXN0ZW5lcnx8XCJmdW5jdGlvblwiIT10eXBlb2YgcG9zdE1lc3NhZ2V8fGEuaW1wb3J0U2NyaXB0c3x8cyhFKT9uPVwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiBsKFwic2NyaXB0XCIpP2Z1bmN0aW9uKHQpe2YuYXBwZW5kQ2hpbGQobChcInNjcmlwdFwiKSkub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7Zi5yZW1vdmVDaGlsZCh0aGlzKSx3KHQpfX06ZnVuY3Rpb24odCl7c2V0VGltZW91dCh4KHQpLDApfToobj1FLGEuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixrLCExKSkpLHQuZXhwb3J0cz17c2V0OmQsY2xlYXI6dn19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDEyMik7dC5leHBvcnRzPS8oaXBob25lfGlwb2R8aXBhZCkuKmFwcGxld2Via2l0L2kudGVzdChuKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNTApLGk9ZnVuY3Rpb24odCl7dmFyIGUscjt0aGlzLnByb21pc2U9bmV3IHQoKGZ1bmN0aW9uKHQsbil7aWYodm9pZCAwIT09ZXx8dm9pZCAwIT09cil0aHJvdyBUeXBlRXJyb3IoXCJCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvclwiKTtlPXQscj1ufSkpLHRoaXMucmVzb2x2ZT1uKGUpLHRoaXMucmVqZWN0PW4ocil9O3QuZXhwb3J0cy5mPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgaSh0KX19LGZ1bmN0aW9uKHQsZSxyKXsoZnVuY3Rpb24odCl7dmFyIG49dm9pZCAwIT09dCYmdHx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGZ8fHdpbmRvdyxpPUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtmdW5jdGlvbiBvKHQsZSl7dGhpcy5faWQ9dCx0aGlzLl9jbGVhckZuPWV9ZS5zZXRUaW1lb3V0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBvKGkuY2FsbChzZXRUaW1lb3V0LG4sYXJndW1lbnRzKSxjbGVhclRpbWVvdXQpfSxlLnNldEludGVydmFsPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBvKGkuY2FsbChzZXRJbnRlcnZhbCxuLGFyZ3VtZW50cyksY2xlYXJJbnRlcnZhbCl9LGUuY2xlYXJUaW1lb3V0PWUuY2xlYXJJbnRlcnZhbD1mdW5jdGlvbih0KXt0JiZ0LmNsb3NlKCl9LG8ucHJvdG90eXBlLnVucmVmPW8ucHJvdG90eXBlLnJlZj1mdW5jdGlvbigpe30sby5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLl9jbGVhckZuLmNhbGwobix0aGlzLl9pZCl9LGUuZW5yb2xsPWZ1bmN0aW9uKHQsZSl7Y2xlYXJUaW1lb3V0KHQuX2lkbGVUaW1lb3V0SWQpLHQuX2lkbGVUaW1lb3V0PWV9LGUudW5lbnJvbGw9ZnVuY3Rpb24odCl7Y2xlYXJUaW1lb3V0KHQuX2lkbGVUaW1lb3V0SWQpLHQuX2lkbGVUaW1lb3V0PS0xfSxlLl91bnJlZkFjdGl2ZT1lLmFjdGl2ZT1mdW5jdGlvbih0KXtjbGVhclRpbWVvdXQodC5faWRsZVRpbWVvdXRJZCk7dmFyIGU9dC5faWRsZVRpbWVvdXQ7ZT49MCYmKHQuX2lkbGVUaW1lb3V0SWQ9c2V0VGltZW91dCgoZnVuY3Rpb24oKXt0Ll9vblRpbWVvdXQmJnQuX29uVGltZW91dCgpfSksZSkpfSxyKDE4OSksZS5zZXRJbW1lZGlhdGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYuc2V0SW1tZWRpYXRlfHx2b2lkIDAhPT10JiZ0LnNldEltbWVkaWF0ZXx8dGhpcyYmdGhpcy5zZXRJbW1lZGlhdGUsZS5jbGVhckltbWVkaWF0ZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5jbGVhckltbWVkaWF0ZXx8dm9pZCAwIT09dCYmdC5jbGVhckltbWVkaWF0ZXx8dGhpcyYmdGhpcy5jbGVhckltbWVkaWF0ZX0pLmNhbGwodGhpcyxyKDIxKSl9LGZ1bmN0aW9uKHQsZSl7dmFyIHI9e30udG9TdHJpbmc7dC5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKHQpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09ci5jYWxsKHQpfX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiOyhmdW5jdGlvbihlLG4pe3ZhciBpPXIoNTUpO3QuZXhwb3J0cz1fO3ZhciBvLGE9cigxMzcpO18uUmVhZGFibGVTdGF0ZT1iO3IoOTMpLkV2ZW50RW1pdHRlcjt2YXIgcz1mdW5jdGlvbih0LGUpe3JldHVybiB0Lmxpc3RlbmVycyhlKS5sZW5ndGh9LHU9cigxMzkpLGM9cig1NikuQnVmZmVyLGY9ZS5VaW50OEFycmF5fHxmdW5jdGlvbigpe307dmFyIGw9cigzOSk7bC5pbmhlcml0cz1yKDI5KTt2YXIgaD1yKDE5MikscD12b2lkIDA7cD1oJiZoLmRlYnVnbG9nP2guZGVidWdsb2coXCJzdHJlYW1cIik6ZnVuY3Rpb24oKXt9O3ZhciBkLHY9cigxOTMpLGc9cigxNDApO2wuaW5oZXJpdHMoXyx1KTt2YXIgeT1bXCJlcnJvclwiLFwiY2xvc2VcIixcImRlc3Ryb3lcIixcInBhdXNlXCIsXCJyZXN1bWVcIl07ZnVuY3Rpb24gYih0LGUpe3Q9dHx8e307dmFyIG49ZSBpbnN0YW5jZW9mKG89b3x8cigyMykpO3RoaXMub2JqZWN0TW9kZT0hIXQub2JqZWN0TW9kZSxuJiYodGhpcy5vYmplY3RNb2RlPXRoaXMub2JqZWN0TW9kZXx8ISF0LnJlYWRhYmxlT2JqZWN0TW9kZSk7dmFyIGk9dC5oaWdoV2F0ZXJNYXJrLGE9dC5yZWFkYWJsZUhpZ2hXYXRlck1hcmsscz10aGlzLm9iamVjdE1vZGU/MTY6MTYzODQ7dGhpcy5oaWdoV2F0ZXJNYXJrPWl8fDA9PT1pP2k6biYmKGF8fDA9PT1hKT9hOnMsdGhpcy5oaWdoV2F0ZXJNYXJrPU1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKSx0aGlzLmJ1ZmZlcj1uZXcgdix0aGlzLmxlbmd0aD0wLHRoaXMucGlwZXM9bnVsbCx0aGlzLnBpcGVzQ291bnQ9MCx0aGlzLmZsb3dpbmc9bnVsbCx0aGlzLmVuZGVkPSExLHRoaXMuZW5kRW1pdHRlZD0hMSx0aGlzLnJlYWRpbmc9ITEsdGhpcy5zeW5jPSEwLHRoaXMubmVlZFJlYWRhYmxlPSExLHRoaXMuZW1pdHRlZFJlYWRhYmxlPSExLHRoaXMucmVhZGFibGVMaXN0ZW5pbmc9ITEsdGhpcy5yZXN1bWVTY2hlZHVsZWQ9ITEsdGhpcy5kZXN0cm95ZWQ9ITEsdGhpcy5kZWZhdWx0RW5jb2Rpbmc9dC5kZWZhdWx0RW5jb2Rpbmd8fFwidXRmOFwiLHRoaXMuYXdhaXREcmFpbj0wLHRoaXMucmVhZGluZ01vcmU9ITEsdGhpcy5kZWNvZGVyPW51bGwsdGhpcy5lbmNvZGluZz1udWxsLHQuZW5jb2RpbmcmJihkfHwoZD1yKDE0MSkuU3RyaW5nRGVjb2RlciksdGhpcy5kZWNvZGVyPW5ldyBkKHQuZW5jb2RpbmcpLHRoaXMuZW5jb2Rpbmc9dC5lbmNvZGluZyl9ZnVuY3Rpb24gXyh0KXtpZihvPW98fHIoMjMpLCEodGhpcyBpbnN0YW5jZW9mIF8pKXJldHVybiBuZXcgXyh0KTt0aGlzLl9yZWFkYWJsZVN0YXRlPW5ldyBiKHQsdGhpcyksdGhpcy5yZWFkYWJsZT0hMCx0JiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdC5yZWFkJiYodGhpcy5fcmVhZD10LnJlYWQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuZGVzdHJveSYmKHRoaXMuX2Rlc3Ryb3k9dC5kZXN0cm95KSksdS5jYWxsKHRoaXMpfWZ1bmN0aW9uIG0odCxlLHIsbixpKXt2YXIgbyxhPXQuX3JlYWRhYmxlU3RhdGU7bnVsbD09PWU/KGEucmVhZGluZz0hMSxmdW5jdGlvbih0LGUpe2lmKGUuZW5kZWQpcmV0dXJuO2lmKGUuZGVjb2Rlcil7dmFyIHI9ZS5kZWNvZGVyLmVuZCgpO3ImJnIubGVuZ3RoJiYoZS5idWZmZXIucHVzaChyKSxlLmxlbmd0aCs9ZS5vYmplY3RNb2RlPzE6ci5sZW5ndGgpfWUuZW5kZWQ9ITAsayh0KX0odCxhKSk6KGl8fChvPWZ1bmN0aW9uKHQsZSl7dmFyIHI7bj1lLGMuaXNCdWZmZXIobil8fG4gaW5zdGFuY2VvZiBmfHxcInN0cmluZ1wiPT10eXBlb2YgZXx8dm9pZCAwPT09ZXx8dC5vYmplY3RNb2RlfHwocj1uZXcgVHlwZUVycm9yKFwiSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVua1wiKSk7dmFyIG47cmV0dXJuIHJ9KGEsZSkpLG8/dC5lbWl0KFwiZXJyb3JcIixvKTphLm9iamVjdE1vZGV8fGUmJmUubGVuZ3RoPjA/KFwic3RyaW5nXCI9PXR5cGVvZiBlfHxhLm9iamVjdE1vZGV8fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKT09PWMucHJvdG90eXBlfHwoZT1mdW5jdGlvbih0KXtyZXR1cm4gYy5mcm9tKHQpfShlKSksbj9hLmVuZEVtaXR0ZWQ/dC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudFwiKSk6dyh0LGEsZSwhMCk6YS5lbmRlZD90LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcInN0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GXCIpKTooYS5yZWFkaW5nPSExLGEuZGVjb2RlciYmIXI/KGU9YS5kZWNvZGVyLndyaXRlKGUpLGEub2JqZWN0TW9kZXx8MCE9PWUubGVuZ3RoP3codCxhLGUsITEpOlModCxhKSk6dyh0LGEsZSwhMSkpKTpufHwoYS5yZWFkaW5nPSExKSk7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiF0LmVuZGVkJiYodC5uZWVkUmVhZGFibGV8fHQubGVuZ3RoPHQuaGlnaFdhdGVyTWFya3x8MD09PXQubGVuZ3RoKX0oYSl9ZnVuY3Rpb24gdyh0LGUscixuKXtlLmZsb3dpbmcmJjA9PT1lLmxlbmd0aCYmIWUuc3luYz8odC5lbWl0KFwiZGF0YVwiLHIpLHQucmVhZCgwKSk6KGUubGVuZ3RoKz1lLm9iamVjdE1vZGU/MTpyLmxlbmd0aCxuP2UuYnVmZmVyLnVuc2hpZnQocik6ZS5idWZmZXIucHVzaChyKSxlLm5lZWRSZWFkYWJsZSYmayh0KSksUyh0LGUpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShfLnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fcmVhZGFibGVTdGF0ZSYmdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWR9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9dCl9fSksXy5wcm90b3R5cGUuZGVzdHJveT1nLmRlc3Ryb3ksXy5wcm90b3R5cGUuX3VuZGVzdHJveT1nLnVuZGVzdHJveSxfLnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbih0LGUpe3RoaXMucHVzaChudWxsKSxlKHQpfSxfLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbj10aGlzLl9yZWFkYWJsZVN0YXRlO3JldHVybiBuLm9iamVjdE1vZGU/cj0hMDpcInN0cmluZ1wiPT10eXBlb2YgdCYmKChlPWV8fG4uZGVmYXVsdEVuY29kaW5nKSE9PW4uZW5jb2RpbmcmJih0PWMuZnJvbSh0LGUpLGU9XCJcIikscj0hMCksbSh0aGlzLHQsZSwhMSxyKX0sXy5wcm90b3R5cGUudW5zaGlmdD1mdW5jdGlvbih0KXtyZXR1cm4gbSh0aGlzLHQsbnVsbCwhMCwhMSl9LF8ucHJvdG90eXBlLmlzUGF1c2VkPWZ1bmN0aW9uKCl7cmV0dXJuITE9PT10aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmd9LF8ucHJvdG90eXBlLnNldEVuY29kaW5nPWZ1bmN0aW9uKHQpe3JldHVybiBkfHwoZD1yKDE0MSkuU3RyaW5nRGVjb2RlciksdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyPW5ldyBkKHQpLHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2Rpbmc9dCx0aGlzfTtmdW5jdGlvbiB4KHQsZSl7cmV0dXJuIHQ8PTB8fDA9PT1lLmxlbmd0aCYmZS5lbmRlZD8wOmUub2JqZWN0TW9kZT8xOnQhPXQ/ZS5mbG93aW5nJiZlLmxlbmd0aD9lLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoOmUubGVuZ3RoOih0PmUuaGlnaFdhdGVyTWFyayYmKGUuaGlnaFdhdGVyTWFyaz1mdW5jdGlvbih0KXtyZXR1cm4gdD49ODM4ODYwOD90PTgzODg2MDg6KHQtLSx0fD10Pj4+MSx0fD10Pj4+Mix0fD10Pj4+NCx0fD10Pj4+OCx0fD10Pj4+MTYsdCsrKSx0fSh0KSksdDw9ZS5sZW5ndGg/dDplLmVuZGVkP2UubGVuZ3RoOihlLm5lZWRSZWFkYWJsZT0hMCwwKSl9ZnVuY3Rpb24gayh0KXt2YXIgZT10Ll9yZWFkYWJsZVN0YXRlO2UubmVlZFJlYWRhYmxlPSExLGUuZW1pdHRlZFJlYWRhYmxlfHwocChcImVtaXRSZWFkYWJsZVwiLGUuZmxvd2luZyksZS5lbWl0dGVkUmVhZGFibGU9ITAsZS5zeW5jP2kubmV4dFRpY2soRSx0KTpFKHQpKX1mdW5jdGlvbiBFKHQpe3AoXCJlbWl0IHJlYWRhYmxlXCIpLHQuZW1pdChcInJlYWRhYmxlXCIpLEkodCl9ZnVuY3Rpb24gUyh0LGUpe2UucmVhZGluZ01vcmV8fChlLnJlYWRpbmdNb3JlPSEwLGkubmV4dFRpY2soaix0LGUpKX1mdW5jdGlvbiBqKHQsZSl7Zm9yKHZhciByPWUubGVuZ3RoOyFlLnJlYWRpbmcmJiFlLmZsb3dpbmcmJiFlLmVuZGVkJiZlLmxlbmd0aDxlLmhpZ2hXYXRlck1hcmsmJihwKFwibWF5YmVSZWFkTW9yZSByZWFkIDBcIiksdC5yZWFkKDApLHIhPT1lLmxlbmd0aCk7KXI9ZS5sZW5ndGg7ZS5yZWFkaW5nTW9yZT0hMX1mdW5jdGlvbiBSKHQpe3AoXCJyZWFkYWJsZSBuZXh0dGljayByZWFkIDBcIiksdC5yZWFkKDApfWZ1bmN0aW9uIEModCxlKXtlLnJlYWRpbmd8fChwKFwicmVzdW1lIHJlYWQgMFwiKSx0LnJlYWQoMCkpLGUucmVzdW1lU2NoZWR1bGVkPSExLGUuYXdhaXREcmFpbj0wLHQuZW1pdChcInJlc3VtZVwiKSxJKHQpLGUuZmxvd2luZyYmIWUucmVhZGluZyYmdC5yZWFkKDApfWZ1bmN0aW9uIEkodCl7dmFyIGU9dC5fcmVhZGFibGVTdGF0ZTtmb3IocChcImZsb3dcIixlLmZsb3dpbmcpO2UuZmxvd2luZyYmbnVsbCE9PXQucmVhZCgpOyk7fWZ1bmN0aW9uIE8odCxlKXtyZXR1cm4gMD09PWUubGVuZ3RoP251bGw6KGUub2JqZWN0TW9kZT9yPWUuYnVmZmVyLnNoaWZ0KCk6IXR8fHQ+PWUubGVuZ3RoPyhyPWUuZGVjb2Rlcj9lLmJ1ZmZlci5qb2luKFwiXCIpOjE9PT1lLmJ1ZmZlci5sZW5ndGg/ZS5idWZmZXIuaGVhZC5kYXRhOmUuYnVmZmVyLmNvbmNhdChlLmxlbmd0aCksZS5idWZmZXIuY2xlYXIoKSk6cj1mdW5jdGlvbih0LGUscil7dmFyIG47dDxlLmhlYWQuZGF0YS5sZW5ndGg/KG49ZS5oZWFkLmRhdGEuc2xpY2UoMCx0KSxlLmhlYWQuZGF0YT1lLmhlYWQuZGF0YS5zbGljZSh0KSk6bj10PT09ZS5oZWFkLmRhdGEubGVuZ3RoP2Uuc2hpZnQoKTpyP2Z1bmN0aW9uKHQsZSl7dmFyIHI9ZS5oZWFkLG49MSxpPXIuZGF0YTt0LT1pLmxlbmd0aDtmb3IoO3I9ci5uZXh0Oyl7dmFyIG89ci5kYXRhLGE9dD5vLmxlbmd0aD9vLmxlbmd0aDp0O2lmKGE9PT1vLmxlbmd0aD9pKz1vOmkrPW8uc2xpY2UoMCx0KSwwPT09KHQtPWEpKXthPT09by5sZW5ndGg/KCsrbixyLm5leHQ/ZS5oZWFkPXIubmV4dDplLmhlYWQ9ZS50YWlsPW51bGwpOihlLmhlYWQ9cixyLmRhdGE9by5zbGljZShhKSk7YnJlYWt9KytufXJldHVybiBlLmxlbmd0aC09bixpfSh0LGUpOmZ1bmN0aW9uKHQsZSl7dmFyIHI9Yy5hbGxvY1Vuc2FmZSh0KSxuPWUuaGVhZCxpPTE7bi5kYXRhLmNvcHkociksdC09bi5kYXRhLmxlbmd0aDtmb3IoO249bi5uZXh0Oyl7dmFyIG89bi5kYXRhLGE9dD5vLmxlbmd0aD9vLmxlbmd0aDp0O2lmKG8uY29weShyLHIubGVuZ3RoLXQsMCxhKSwwPT09KHQtPWEpKXthPT09by5sZW5ndGg/KCsraSxuLm5leHQ/ZS5oZWFkPW4ubmV4dDplLmhlYWQ9ZS50YWlsPW51bGwpOihlLmhlYWQ9bixuLmRhdGE9by5zbGljZShhKSk7YnJlYWt9KytpfXJldHVybiBlLmxlbmd0aC09aSxyfSh0LGUpO3JldHVybiBufSh0LGUuYnVmZmVyLGUuZGVjb2Rlcikscik7dmFyIHJ9ZnVuY3Rpb24gVCh0KXt2YXIgZT10Ll9yZWFkYWJsZVN0YXRlO2lmKGUubGVuZ3RoPjApdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO2UuZW5kRW1pdHRlZHx8KGUuZW5kZWQ9ITAsaS5uZXh0VGljayhQLGUsdCkpfWZ1bmN0aW9uIFAodCxlKXt0LmVuZEVtaXR0ZWR8fDAhPT10Lmxlbmd0aHx8KHQuZW5kRW1pdHRlZD0hMCxlLnJlYWRhYmxlPSExLGUuZW1pdChcImVuZFwiKSl9ZnVuY3Rpb24gQSh0LGUpe2Zvcih2YXIgcj0wLG49dC5sZW5ndGg7cjxuO3IrKylpZih0W3JdPT09ZSlyZXR1cm4gcjtyZXR1cm4tMX1fLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3AoXCJyZWFkXCIsdCksdD1wYXJzZUludCh0LDEwKTt2YXIgZT10aGlzLl9yZWFkYWJsZVN0YXRlLHI9dDtpZigwIT09dCYmKGUuZW1pdHRlZFJlYWRhYmxlPSExKSwwPT09dCYmZS5uZWVkUmVhZGFibGUmJihlLmxlbmd0aD49ZS5oaWdoV2F0ZXJNYXJrfHxlLmVuZGVkKSlyZXR1cm4gcChcInJlYWQ6IGVtaXRSZWFkYWJsZVwiLGUubGVuZ3RoLGUuZW5kZWQpLDA9PT1lLmxlbmd0aCYmZS5lbmRlZD9UKHRoaXMpOmsodGhpcyksbnVsbDtpZigwPT09KHQ9eCh0LGUpKSYmZS5lbmRlZClyZXR1cm4gMD09PWUubGVuZ3RoJiZUKHRoaXMpLG51bGw7dmFyIG4saT1lLm5lZWRSZWFkYWJsZTtyZXR1cm4gcChcIm5lZWQgcmVhZGFibGVcIixpKSwoMD09PWUubGVuZ3RofHxlLmxlbmd0aC10PGUuaGlnaFdhdGVyTWFyaykmJnAoXCJsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFya1wiLGk9ITApLGUuZW5kZWR8fGUucmVhZGluZz9wKFwicmVhZGluZyBvciBlbmRlZFwiLGk9ITEpOmkmJihwKFwiZG8gcmVhZFwiKSxlLnJlYWRpbmc9ITAsZS5zeW5jPSEwLDA9PT1lLmxlbmd0aCYmKGUubmVlZFJlYWRhYmxlPSEwKSx0aGlzLl9yZWFkKGUuaGlnaFdhdGVyTWFyayksZS5zeW5jPSExLGUucmVhZGluZ3x8KHQ9eChyLGUpKSksbnVsbD09PShuPXQ+MD9PKHQsZSk6bnVsbCk/KGUubmVlZFJlYWRhYmxlPSEwLHQ9MCk6ZS5sZW5ndGgtPXQsMD09PWUubGVuZ3RoJiYoZS5lbmRlZHx8KGUubmVlZFJlYWRhYmxlPSEwKSxyIT09dCYmZS5lbmRlZCYmVCh0aGlzKSksbnVsbCE9PW4mJnRoaXMuZW1pdChcImRhdGFcIixuKSxufSxfLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbih0KXt0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIl9yZWFkKCkgaXMgbm90IGltcGxlbWVudGVkXCIpKX0sXy5wcm90b3R5cGUucGlwZT1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXMsbz10aGlzLl9yZWFkYWJsZVN0YXRlO3N3aXRjaChvLnBpcGVzQ291bnQpe2Nhc2UgMDpvLnBpcGVzPXQ7YnJlYWs7Y2FzZSAxOm8ucGlwZXM9W28ucGlwZXMsdF07YnJlYWs7ZGVmYXVsdDpvLnBpcGVzLnB1c2godCl9by5waXBlc0NvdW50Kz0xLHAoXCJwaXBlIGNvdW50PSVkIG9wdHM9JWpcIixvLnBpcGVzQ291bnQsZSk7dmFyIHU9KCFlfHwhMSE9PWUuZW5kKSYmdCE9PW4uc3Rkb3V0JiZ0IT09bi5zdGRlcnI/ZjpfO2Z1bmN0aW9uIGMoZSxuKXtwKFwib251bnBpcGVcIiksZT09PXImJm4mJiExPT09bi5oYXNVbnBpcGVkJiYobi5oYXNVbnBpcGVkPSEwLHAoXCJjbGVhbnVwXCIpLHQucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLHkpLHQucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixiKSx0LnJlbW92ZUxpc3RlbmVyKFwiZHJhaW5cIixsKSx0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixnKSx0LnJlbW92ZUxpc3RlbmVyKFwidW5waXBlXCIsYyksci5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLGYpLHIucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIixfKSxyLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLHYpLGg9ITAsIW8uYXdhaXREcmFpbnx8dC5fd3JpdGFibGVTdGF0ZSYmIXQuX3dyaXRhYmxlU3RhdGUubmVlZERyYWlufHxsKCkpfWZ1bmN0aW9uIGYoKXtwKFwib25lbmRcIiksdC5lbmQoKX1vLmVuZEVtaXR0ZWQ/aS5uZXh0VGljayh1KTpyLm9uY2UoXCJlbmRcIix1KSx0Lm9uKFwidW5waXBlXCIsYyk7dmFyIGw9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9dC5fcmVhZGFibGVTdGF0ZTtwKFwicGlwZU9uRHJhaW5cIixlLmF3YWl0RHJhaW4pLGUuYXdhaXREcmFpbiYmZS5hd2FpdERyYWluLS0sMD09PWUuYXdhaXREcmFpbiYmcyh0LFwiZGF0YVwiKSYmKGUuZmxvd2luZz0hMCxJKHQpKX19KHIpO3Qub24oXCJkcmFpblwiLGwpO3ZhciBoPSExO3ZhciBkPSExO2Z1bmN0aW9uIHYoZSl7cChcIm9uZGF0YVwiKSxkPSExLCExIT09dC53cml0ZShlKXx8ZHx8KCgxPT09by5waXBlc0NvdW50JiZvLnBpcGVzPT09dHx8by5waXBlc0NvdW50PjEmJi0xIT09QShvLnBpcGVzLHQpKSYmIWgmJihwKFwiZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlXCIsci5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKSxyLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKyxkPSEwKSxyLnBhdXNlKCkpfWZ1bmN0aW9uIGcoZSl7cChcIm9uZXJyb3JcIixlKSxfKCksdC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsZyksMD09PXModCxcImVycm9yXCIpJiZ0LmVtaXQoXCJlcnJvclwiLGUpfWZ1bmN0aW9uIHkoKXt0LnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsYiksXygpfWZ1bmN0aW9uIGIoKXtwKFwib25maW5pc2hcIiksdC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIseSksXygpfWZ1bmN0aW9uIF8oKXtwKFwidW5waXBlXCIpLHIudW5waXBlKHQpfXJldHVybiByLm9uKFwiZGF0YVwiLHYpLGZ1bmN0aW9uKHQsZSxyKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnByZXBlbmRMaXN0ZW5lcilyZXR1cm4gdC5wcmVwZW5kTGlzdGVuZXIoZSxyKTt0Ll9ldmVudHMmJnQuX2V2ZW50c1tlXT9hKHQuX2V2ZW50c1tlXSk/dC5fZXZlbnRzW2VdLnVuc2hpZnQocik6dC5fZXZlbnRzW2VdPVtyLHQuX2V2ZW50c1tlXV06dC5vbihlLHIpfSh0LFwiZXJyb3JcIixnKSx0Lm9uY2UoXCJjbG9zZVwiLHkpLHQub25jZShcImZpbmlzaFwiLGIpLHQuZW1pdChcInBpcGVcIixyKSxvLmZsb3dpbmd8fChwKFwicGlwZSByZXN1bWVcIiksci5yZXN1bWUoKSksdH0sXy5wcm90b3R5cGUudW5waXBlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX3JlYWRhYmxlU3RhdGUscj17aGFzVW5waXBlZDohMX07aWYoMD09PWUucGlwZXNDb3VudClyZXR1cm4gdGhpcztpZigxPT09ZS5waXBlc0NvdW50KXJldHVybiB0JiZ0IT09ZS5waXBlc3x8KHR8fCh0PWUucGlwZXMpLGUucGlwZXM9bnVsbCxlLnBpcGVzQ291bnQ9MCxlLmZsb3dpbmc9ITEsdCYmdC5lbWl0KFwidW5waXBlXCIsdGhpcyxyKSksdGhpcztpZighdCl7dmFyIG49ZS5waXBlcyxpPWUucGlwZXNDb3VudDtlLnBpcGVzPW51bGwsZS5waXBlc0NvdW50PTAsZS5mbG93aW5nPSExO2Zvcih2YXIgbz0wO288aTtvKyspbltvXS5lbWl0KFwidW5waXBlXCIsdGhpcyxyKTtyZXR1cm4gdGhpc312YXIgYT1BKGUucGlwZXMsdCk7cmV0dXJuLTE9PT1hfHwoZS5waXBlcy5zcGxpY2UoYSwxKSxlLnBpcGVzQ291bnQtPTEsMT09PWUucGlwZXNDb3VudCYmKGUucGlwZXM9ZS5waXBlc1swXSksdC5lbWl0KFwidW5waXBlXCIsdGhpcyxyKSksdGhpc30sXy5wcm90b3R5cGUub249ZnVuY3Rpb24odCxlKXt2YXIgcj11LnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsdCxlKTtpZihcImRhdGFcIj09PXQpITEhPT10aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcmJnRoaXMucmVzdW1lKCk7ZWxzZSBpZihcInJlYWRhYmxlXCI9PT10KXt2YXIgbj10aGlzLl9yZWFkYWJsZVN0YXRlO24uZW5kRW1pdHRlZHx8bi5yZWFkYWJsZUxpc3RlbmluZ3x8KG4ucmVhZGFibGVMaXN0ZW5pbmc9bi5uZWVkUmVhZGFibGU9ITAsbi5lbWl0dGVkUmVhZGFibGU9ITEsbi5yZWFkaW5nP24ubGVuZ3RoJiZrKHRoaXMpOmkubmV4dFRpY2soUix0aGlzKSl9cmV0dXJuIHJ9LF8ucHJvdG90eXBlLmFkZExpc3RlbmVyPV8ucHJvdG90eXBlLm9uLF8ucHJvdG90eXBlLnJlc3VtZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX3JlYWRhYmxlU3RhdGU7cmV0dXJuIHQuZmxvd2luZ3x8KHAoXCJyZXN1bWVcIiksdC5mbG93aW5nPSEwLGZ1bmN0aW9uKHQsZSl7ZS5yZXN1bWVTY2hlZHVsZWR8fChlLnJlc3VtZVNjaGVkdWxlZD0hMCxpLm5leHRUaWNrKEMsdCxlKSl9KHRoaXMsdCkpLHRoaXN9LF8ucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuIHAoXCJjYWxsIHBhdXNlIGZsb3dpbmc9JWpcIix0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpLCExIT09dGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nJiYocChcInBhdXNlXCIpLHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZz0hMSx0aGlzLmVtaXQoXCJwYXVzZVwiKSksdGhpc30sXy5wcm90b3R5cGUud3JhcD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLHI9dGhpcy5fcmVhZGFibGVTdGF0ZSxuPSExO2Zvcih2YXIgaSBpbiB0Lm9uKFwiZW5kXCIsKGZ1bmN0aW9uKCl7aWYocChcIndyYXBwZWQgZW5kXCIpLHIuZGVjb2RlciYmIXIuZW5kZWQpe3ZhciB0PXIuZGVjb2Rlci5lbmQoKTt0JiZ0Lmxlbmd0aCYmZS5wdXNoKHQpfWUucHVzaChudWxsKX0pKSx0Lm9uKFwiZGF0YVwiLChmdW5jdGlvbihpKXsocChcIndyYXBwZWQgZGF0YVwiKSxyLmRlY29kZXImJihpPXIuZGVjb2Rlci53cml0ZShpKSksci5vYmplY3RNb2RlJiZudWxsPT1pKXx8KHIub2JqZWN0TW9kZXx8aSYmaS5sZW5ndGgpJiYoZS5wdXNoKGkpfHwobj0hMCx0LnBhdXNlKCkpKX0pKSx0KXZvaWQgMD09PXRoaXNbaV0mJlwiZnVuY3Rpb25cIj09dHlwZW9mIHRbaV0mJih0aGlzW2ldPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0W2VdLmFwcGx5KHQsYXJndW1lbnRzKX19KGkpKTtmb3IodmFyIG89MDtvPHkubGVuZ3RoO28rKyl0Lm9uKHlbb10sdGhpcy5lbWl0LmJpbmQodGhpcyx5W29dKSk7cmV0dXJuIHRoaXMuX3JlYWQ9ZnVuY3Rpb24oZSl7cChcIndyYXBwZWQgX3JlYWRcIixlKSxuJiYobj0hMSx0LnJlc3VtZSgpKX0sdGhpc30sT2JqZWN0LmRlZmluZVByb3BlcnR5KF8ucHJvdG90eXBlLFwicmVhZGFibGVIaWdoV2F0ZXJNYXJrXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFya319KSxfLl9mcm9tTGlzdD1PfSkuY2FsbCh0aGlzLHIoMjEpLHIoMzgpKX0sZnVuY3Rpb24odCxlLHIpe3QuZXhwb3J0cz1yKDkzKS5FdmVudEVtaXR0ZXJ9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDU1KTtmdW5jdGlvbiBpKHQsZSl7dC5lbWl0KFwiZXJyb3JcIixlKX10LmV4cG9ydHM9e2Rlc3Ryb3k6ZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzLG89dGhpcy5fcmVhZGFibGVTdGF0ZSYmdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQsYT10aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtyZXR1cm4gb3x8YT8oZT9lKHQpOiF0fHx0aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZHx8bi5uZXh0VGljayhpLHRoaXMsdCksdGhpcyk6KHRoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD0hMCksdGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPSEwKSx0aGlzLl9kZXN0cm95KHR8fG51bGwsKGZ1bmN0aW9uKHQpeyFlJiZ0PyhuLm5leHRUaWNrKGkscix0KSxyLl93cml0YWJsZVN0YXRlJiYoci5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQ9ITApKTplJiZlKHQpfSkpLHRoaXMpfSx1bmRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9ITEsdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nPSExLHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQ9ITEsdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkPSExKSx0aGlzLl93cml0YWJsZVN0YXRlJiYodGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ9ITEsdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZD0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZz0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSExKX19fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig1NikuQnVmZmVyLGk9bi5pc0VuY29kaW5nfHxmdW5jdGlvbih0KXtzd2l0Y2goKHQ9XCJcIit0KSYmdC50b0xvd2VyQ2FzZSgpKXtjYXNlXCJoZXhcIjpjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpjYXNlXCJhc2NpaVwiOmNhc2VcImJpbmFyeVwiOmNhc2VcImJhc2U2NFwiOmNhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOmNhc2VcInJhd1wiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fTtmdW5jdGlvbiBvKHQpe3ZhciBlO3N3aXRjaCh0aGlzLmVuY29kaW5nPWZ1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uKHQpe2lmKCF0KXJldHVyblwidXRmOFwiO2Zvcih2YXIgZTs7KXN3aXRjaCh0KXtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm5cInV0ZjhcIjtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm5cInV0ZjE2bGVcIjtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm5cImxhdGluMVwiO2Nhc2VcImJhc2U2NFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwiaGV4XCI6cmV0dXJuIHQ7ZGVmYXVsdDppZihlKXJldHVybjt0PShcIlwiK3QpLnRvTG93ZXJDYXNlKCksZT0hMH19KHQpO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlJiYobi5pc0VuY29kaW5nPT09aXx8IWkodCkpKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK3QpO3JldHVybiBlfHx0fSh0KSx0aGlzLmVuY29kaW5nKXtjYXNlXCJ1dGYxNmxlXCI6dGhpcy50ZXh0PXUsdGhpcy5lbmQ9YyxlPTQ7YnJlYWs7Y2FzZVwidXRmOFwiOnRoaXMuZmlsbExhc3Q9cyxlPTQ7YnJlYWs7Y2FzZVwiYmFzZTY0XCI6dGhpcy50ZXh0PWYsdGhpcy5lbmQ9bCxlPTM7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gdGhpcy53cml0ZT1oLHZvaWQodGhpcy5lbmQ9cCl9dGhpcy5sYXN0TmVlZD0wLHRoaXMubGFzdFRvdGFsPTAsdGhpcy5sYXN0Q2hhcj1uLmFsbG9jVW5zYWZlKGUpfWZ1bmN0aW9uIGEodCl7cmV0dXJuIHQ8PTEyNz8wOnQ+PjU9PTY/Mjp0Pj40PT0xND8zOnQ+PjM9PTMwPzQ6dD4+Nj09Mj8tMTotMn1mdW5jdGlvbiBzKHQpe3ZhciBlPXRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQscj1mdW5jdGlvbih0LGUscil7aWYoMTI4IT0oMTkyJmVbMF0pKXJldHVybiB0Lmxhc3ROZWVkPTAsXCLvv71cIjtpZih0Lmxhc3ROZWVkPjEmJmUubGVuZ3RoPjEpe2lmKDEyOCE9KDE5MiZlWzFdKSlyZXR1cm4gdC5sYXN0TmVlZD0xLFwi77+9XCI7aWYodC5sYXN0TmVlZD4yJiZlLmxlbmd0aD4yJiYxMjghPSgxOTImZVsyXSkpcmV0dXJuIHQubGFzdE5lZWQ9MixcIu+/vVwifX0odGhpcyx0KTtyZXR1cm4gdm9pZCAwIT09cj9yOnRoaXMubGFzdE5lZWQ8PXQubGVuZ3RoPyh0LmNvcHkodGhpcy5sYXN0Q2hhcixlLDAsdGhpcy5sYXN0TmVlZCksdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLDAsdGhpcy5sYXN0VG90YWwpKToodC5jb3B5KHRoaXMubGFzdENoYXIsZSwwLHQubGVuZ3RoKSx2b2lkKHRoaXMubGFzdE5lZWQtPXQubGVuZ3RoKSl9ZnVuY3Rpb24gdSh0LGUpe2lmKCh0Lmxlbmd0aC1lKSUyPT0wKXt2YXIgcj10LnRvU3RyaW5nKFwidXRmMTZsZVwiLGUpO2lmKHIpe3ZhciBuPXIuY2hhckNvZGVBdChyLmxlbmd0aC0xKTtpZihuPj01NTI5NiYmbjw9NTYzMTkpcmV0dXJuIHRoaXMubGFzdE5lZWQ9Mix0aGlzLmxhc3RUb3RhbD00LHRoaXMubGFzdENoYXJbMF09dFt0Lmxlbmd0aC0yXSx0aGlzLmxhc3RDaGFyWzFdPXRbdC5sZW5ndGgtMV0sci5zbGljZSgwLC0xKX1yZXR1cm4gcn1yZXR1cm4gdGhpcy5sYXN0TmVlZD0xLHRoaXMubGFzdFRvdGFsPTIsdGhpcy5sYXN0Q2hhclswXT10W3QubGVuZ3RoLTFdLHQudG9TdHJpbmcoXCJ1dGYxNmxlXCIsZSx0Lmxlbmd0aC0xKX1mdW5jdGlvbiBjKHQpe3ZhciBlPXQmJnQubGVuZ3RoP3RoaXMud3JpdGUodCk6XCJcIjtpZih0aGlzLmxhc3ROZWVkKXt2YXIgcj10aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkO3JldHVybiBlK3RoaXMubGFzdENoYXIudG9TdHJpbmcoXCJ1dGYxNmxlXCIsMCxyKX1yZXR1cm4gZX1mdW5jdGlvbiBmKHQsZSl7dmFyIHI9KHQubGVuZ3RoLWUpJTM7cmV0dXJuIDA9PT1yP3QudG9TdHJpbmcoXCJiYXNlNjRcIixlKToodGhpcy5sYXN0TmVlZD0zLXIsdGhpcy5sYXN0VG90YWw9MywxPT09cj90aGlzLmxhc3RDaGFyWzBdPXRbdC5sZW5ndGgtMV06KHRoaXMubGFzdENoYXJbMF09dFt0Lmxlbmd0aC0yXSx0aGlzLmxhc3RDaGFyWzFdPXRbdC5sZW5ndGgtMV0pLHQudG9TdHJpbmcoXCJiYXNlNjRcIixlLHQubGVuZ3RoLXIpKX1mdW5jdGlvbiBsKHQpe3ZhciBlPXQmJnQubGVuZ3RoP3RoaXMud3JpdGUodCk6XCJcIjtyZXR1cm4gdGhpcy5sYXN0TmVlZD9lK3RoaXMubGFzdENoYXIudG9TdHJpbmcoXCJiYXNlNjRcIiwwLDMtdGhpcy5sYXN0TmVlZCk6ZX1mdW5jdGlvbiBoKHQpe3JldHVybiB0LnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpfWZ1bmN0aW9uIHAodCl7cmV0dXJuIHQmJnQubGVuZ3RoP3RoaXMud3JpdGUodCk6XCJcIn1lLlN0cmluZ0RlY29kZXI9byxvLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0KXtpZigwPT09dC5sZW5ndGgpcmV0dXJuXCJcIjt2YXIgZSxyO2lmKHRoaXMubGFzdE5lZWQpe2lmKHZvaWQgMD09PShlPXRoaXMuZmlsbExhc3QodCkpKXJldHVyblwiXCI7cj10aGlzLmxhc3ROZWVkLHRoaXMubGFzdE5lZWQ9MH1lbHNlIHI9MDtyZXR1cm4gcjx0Lmxlbmd0aD9lP2UrdGhpcy50ZXh0KHQscik6dGhpcy50ZXh0KHQscik6ZXx8XCJcIn0sby5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQubGVuZ3RoP3RoaXMud3JpdGUodCk6XCJcIjtyZXR1cm4gdGhpcy5sYXN0TmVlZD9lK1wi77+9XCI6ZX0sby5wcm90b3R5cGUudGV4dD1mdW5jdGlvbih0LGUpe3ZhciByPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1lLmxlbmd0aC0xO2lmKG48cilyZXR1cm4gMDt2YXIgaT1hKGVbbl0pO2lmKGk+PTApcmV0dXJuIGk+MCYmKHQubGFzdE5lZWQ9aS0xKSxpO2lmKC0tbjxyfHwtMj09PWkpcmV0dXJuIDA7aWYoKGk9YShlW25dKSk+PTApcmV0dXJuIGk+MCYmKHQubGFzdE5lZWQ9aS0yKSxpO2lmKC0tbjxyfHwtMj09PWkpcmV0dXJuIDA7aWYoKGk9YShlW25dKSk+PTApcmV0dXJuIGk+MCYmKDI9PT1pP2k9MDp0Lmxhc3ROZWVkPWktMyksaTtyZXR1cm4gMH0odGhpcyx0LGUpO2lmKCF0aGlzLmxhc3ROZWVkKXJldHVybiB0LnRvU3RyaW5nKFwidXRmOFwiLGUpO3RoaXMubGFzdFRvdGFsPXI7dmFyIG49dC5sZW5ndGgtKHItdGhpcy5sYXN0TmVlZCk7cmV0dXJuIHQuY29weSh0aGlzLmxhc3RDaGFyLDAsbiksdC50b1N0cmluZyhcInV0ZjhcIixlLG4pfSxvLnByb3RvdHlwZS5maWxsTGFzdD1mdW5jdGlvbih0KXtpZih0aGlzLmxhc3ROZWVkPD10Lmxlbmd0aClyZXR1cm4gdC5jb3B5KHRoaXMubGFzdENoYXIsdGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZCwwLHRoaXMubGFzdE5lZWQpLHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywwLHRoaXMubGFzdFRvdGFsKTt0LmNvcHkodGhpcy5sYXN0Q2hhcix0aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkLDAsdC5sZW5ndGgpLHRoaXMubGFzdE5lZWQtPXQubGVuZ3RofX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1hO3ZhciBuPXIoMjMpLGk9cigzOSk7ZnVuY3Rpb24gbyh0LGUpe3ZhciByPXRoaXMuX3RyYW5zZm9ybVN0YXRlO3IudHJhbnNmb3JtaW5nPSExO3ZhciBuPXIud3JpdGVjYjtpZighbilyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJ3cml0ZSBjYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXNcIikpO3Iud3JpdGVjaHVuaz1udWxsLHIud3JpdGVjYj1udWxsLG51bGwhPWUmJnRoaXMucHVzaChlKSxuKHQpO3ZhciBpPXRoaXMuX3JlYWRhYmxlU3RhdGU7aS5yZWFkaW5nPSExLChpLm5lZWRSZWFkYWJsZXx8aS5sZW5ndGg8aS5oaWdoV2F0ZXJNYXJrKSYmdGhpcy5fcmVhZChpLmhpZ2hXYXRlck1hcmspfWZ1bmN0aW9uIGEodCl7aWYoISh0aGlzIGluc3RhbmNlb2YgYSkpcmV0dXJuIG5ldyBhKHQpO24uY2FsbCh0aGlzLHQpLHRoaXMuX3RyYW5zZm9ybVN0YXRlPXthZnRlclRyYW5zZm9ybTpvLmJpbmQodGhpcyksbmVlZFRyYW5zZm9ybTohMSx0cmFuc2Zvcm1pbmc6ITEsd3JpdGVjYjpudWxsLHdyaXRlY2h1bms6bnVsbCx3cml0ZWVuY29kaW5nOm51bGx9LHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlPSEwLHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYz0hMSx0JiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdC50cmFuc2Zvcm0mJih0aGlzLl90cmFuc2Zvcm09dC50cmFuc2Zvcm0pLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuZmx1c2gmJih0aGlzLl9mbHVzaD10LmZsdXNoKSksdGhpcy5vbihcInByZWZpbmlzaFwiLHMpfWZ1bmN0aW9uIHMoKXt2YXIgdD10aGlzO1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuX2ZsdXNoP3RoaXMuX2ZsdXNoKChmdW5jdGlvbihlLHIpe3UodCxlLHIpfSkpOnUodGhpcyxudWxsLG51bGwpfWZ1bmN0aW9uIHUodCxlLHIpe2lmKGUpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsZSk7aWYobnVsbCE9ciYmdC5wdXNoKHIpLHQuX3dyaXRhYmxlU3RhdGUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkNhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMFwiKTtpZih0Ll90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpdGhyb3cgbmV3IEVycm9yKFwiQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZ1wiKTtyZXR1cm4gdC5wdXNoKG51bGwpfWkuaW5oZXJpdHM9cigyOSksaS5pbmhlcml0cyhhLG4pLGEucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybT0hMSxuLnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcyx0LGUpfSxhLnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKHQsZSxyKXt0aHJvdyBuZXcgRXJyb3IoXCJfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkXCIpfSxhLnByb3RvdHlwZS5fd3JpdGU9ZnVuY3Rpb24odCxlLHIpe3ZhciBuPXRoaXMuX3RyYW5zZm9ybVN0YXRlO2lmKG4ud3JpdGVjYj1yLG4ud3JpdGVjaHVuaz10LG4ud3JpdGVlbmNvZGluZz1lLCFuLnRyYW5zZm9ybWluZyl7dmFyIGk9dGhpcy5fcmVhZGFibGVTdGF0ZTsobi5uZWVkVHJhbnNmb3JtfHxpLm5lZWRSZWFkYWJsZXx8aS5sZW5ndGg8aS5oaWdoV2F0ZXJNYXJrKSYmdGhpcy5fcmVhZChpLmhpZ2hXYXRlck1hcmspfX0sYS5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fdHJhbnNmb3JtU3RhdGU7bnVsbCE9PWUud3JpdGVjaHVuayYmZS53cml0ZWNiJiYhZS50cmFuc2Zvcm1pbmc/KGUudHJhbnNmb3JtaW5nPSEwLHRoaXMuX3RyYW5zZm9ybShlLndyaXRlY2h1bmssZS53cml0ZWVuY29kaW5nLGUuYWZ0ZXJUcmFuc2Zvcm0pKTplLm5lZWRUcmFuc2Zvcm09ITB9LGEucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcztuLnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsdCwoZnVuY3Rpb24odCl7ZSh0KSxyLmVtaXQoXCJjbG9zZVwiKX0pKX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gZSBpbiB0P09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse3ZhbHVlOnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTp0W2VdPXIsdH19LGZ1bmN0aW9uKHQsZSl7Y29uc3Qgcj17YWNsOlwiaHR0cDovL3d3dy53My5vcmcvbnMvYXV0aC9hY2wjXCIsYXJnOlwiaHR0cDovL3d3dy53My5vcmcvbnMvcGltL2FyZyNcIixjYWw6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAyLzEyL2NhbC9pY2FsI1wiLGNvbnRhY3Q6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzEwL3N3YXAvcGltL2NvbnRhY3QjXCIsZGM6XCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiLGRjdDpcImh0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy9cIixkb2FwOlwiaHR0cDovL3VzZWZ1bGluYy5jb20vbnMvZG9hcCNcIixmb2FmOlwiaHR0cDovL3htbG5zLmNvbS9mb2FmLzAuMS9cIixodHRwOlwiaHR0cDovL3d3dy53My5vcmcvMjAwNy9vbnQvaHR0cCNcIixodHRwaDpcImh0dHA6Ly93d3cudzMub3JnLzIwMDcvb250L2h0dHBoI1wiLGljYWxUWjpcImh0dHA6Ly93d3cudzMub3JnLzIwMDIvMTIvY2FsL2ljYWx0emQjXCIsbGRwOlwiaHR0cDovL3d3dy53My5vcmcvbnMvbGRwI1wiLGxpbms6XCJodHRwOi8vd3d3LnczLm9yZy8yMDA3L29udC9saW5rI1wiLGxvZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvMTAvc3dhcC9sb2cjXCIsbWVldGluZzpcImh0dHA6Ly93d3cudzMub3JnL25zL3BpbS9tZWV0aW5nI1wiLG1vOlwiaHR0cDovL3B1cmwub3JnL29udG9sb2d5L21vL1wiLG93bDpcImh0dHA6Ly93d3cudzMub3JnLzIwMDIvMDcvb3dsI1wiLHBhZDpcImh0dHA6Ly93d3cudzMub3JnL25zL3BpbS9wYWQjXCIscGF0Y2g6XCJodHRwOi8vd3d3LnczLm9yZy9ucy9waW0vcGF0Y2gjXCIscXU6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzEwL3N3YXAvcGltL3FpZiNcIix0cmlwOlwiaHR0cDovL3d3dy53My5vcmcvbnMvcGltL3RyaXAjXCIscmRmOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI1wiLHJkZnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjXCIscnNzOlwiaHR0cDovL3B1cmwub3JnL3Jzcy8xLjAvXCIsc2NoZWQ6XCJodHRwOi8vd3d3LnczLm9yZy9ucy9waW0vc2NoZWR1bGUjXCIsc2NoZW1hOlwiaHR0cDovc2NoZW1hLm9yZy9cIixzaW9jOlwiaHR0cDovL3JkZnMub3JnL3Npb2MvbnMjXCIsc29saWQ6XCJodHRwOi8vd3d3LnczLm9yZy9ucy9zb2xpZC90ZXJtcyNcIixzcGFjZTpcImh0dHA6Ly93d3cudzMub3JnL25zL3BpbS9zcGFjZSNcIixzdGF0OlwiaHR0cDovL3d3dy53My5vcmcvbnMvcG9zaXgvc3RhdCNcIix0YWI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDA3L29udC9saW5rI1wiLHRhYm9udDpcImh0dHA6Ly93d3cudzMub3JnLzIwMDcvb250L2xpbmsjXCIsdWk6XCJodHRwOi8vd3d3LnczLm9yZy9ucy91aSNcIix2Y2FyZDpcImh0dHA6Ly93d3cudzMub3JnLzIwMDYvdmNhcmQvbnMjXCIsd2Y6XCJodHRwOi8vd3d3LnczLm9yZy8yMDA1LzAxL3dmL2Zsb3cjXCIseHNkOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjXCJ9O3QuZXhwb3J0cz1mdW5jdGlvbih0PXtuYW1lZE5vZGU6dD0+dH0pe2NvbnN0IGU9e307Zm9yKGNvbnN0IG4gaW4gcil7Y29uc3QgaT1yW25dO2Vbbl09ZnVuY3Rpb24oZT1cIlwiKXtyZXR1cm4gdC5uYW1lZE5vZGUoaStlKX19cmV0dXJuIGV9fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uKHQsbil7ci5kKGUsXCJhXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGh9KSk7dmFyIGk9cig2KTtjb25zdHt4c2Q6b309aS5hLHtmcm9tQ2hhckNvZGU6YX09U3RyaW5nO3ZhciBzPS9cXFxcdShbYS1mQS1GMC05XXs0fSl8XFxcXFUoW2EtZkEtRjAtOV17OH0pfFxcXFxbdVVdfFxcXFwoLikvZyx1PXtcIlxcXFxcIjpcIlxcXFxcIixcIidcIjpcIidcIiwnXCInOidcIicsbjpcIlxcblwiLHI6XCJcXHJcIix0OlwiXFx0XCIsZjpcIlxcZlwiLGI6XCJcXGJcIixfOlwiX1wiLFwiflwiOlwiflwiLFwiLlwiOlwiLlwiLFwiLVwiOlwiLVwiLFwiIVwiOlwiIVwiLCQ6XCIkXCIsXCImXCI6XCImXCIsXCIoXCI6XCIoXCIsXCIpXCI6XCIpXCIsXCIqXCI6XCIqXCIsXCIrXCI6XCIrXCIsXCIsXCI6XCIsXCIsXCI7XCI6XCI7XCIsXCI9XCI6XCI9XCIsXCIvXCI6XCIvXCIsXCI/XCI6XCI/XCIsXCIjXCI6XCIjXCIsXCJAXCI6XCJAXCIsXCIlXCI6XCIlXCJ9LGM9L1tcXHgwMC1cXHgyMDw+XFxcXFwiXFx7XFx9XFx8XFxeXFxgXS8sZj17X2lyaTohMCxfdW5lc2NhcGVkSXJpOiEwLF9zaW1wbGVRdW90ZWRTdHJpbmc6ITAsX2xhbmdjb2RlOiEwLF9ibGFuazohMCxfbmV3bGluZTohMCxfY29tbWVudDohMCxfd2hpdGVzcGFjZTohMCxfZW5kT2ZGaWxlOiEwfSxsPS8kMF4vO2NsYXNzIGh7Y29uc3RydWN0b3IodCl7aWYodGhpcy5faXJpPS9ePCgoPzpbXiA8Pnt9XFxcXF18XFxcXFt1VV0pKyk+WyBcXHRdKi8sdGhpcy5fdW5lc2NhcGVkSXJpPS9ePChbXlxceDAwLVxceDIwPD5cXFxcXCJcXHtcXH1cXHxcXF5cXGBdKik+WyBcXHRdKi8sdGhpcy5fc2ltcGxlUXVvdGVkU3RyaW5nPS9eXCIoW15cIlxcXFxcXHJcXG5dKilcIig/PVteXCJdKS8sdGhpcy5fc2ltcGxlQXBvc3Ryb3BoZVN0cmluZz0vXicoW14nXFxcXFxcclxcbl0qKScoPz1bXiddKS8sdGhpcy5fbGFuZ2NvZGU9L15AKFthLXpdKyg/Oi1bYS16MC05XSspKikoPz1bXmEtejAtOVxcLV0pL2ksdGhpcy5fcHJlZml4PS9eKCg/OltBLVphLXpcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDJmZlxcdTAzNzAtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSg/OlxcLj9bXFwtMC05QS1aX2EtelxceGI3XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwM2ZcXHUyMDQwXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSopPzooPz1bI1xcczxdKS8sdGhpcy5fcHJlZml4ZWQ9L14oKD86W0EtWmEtelxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmZmXFx1MDM3MC1cXHUwMzdkXFx1MDM3Zi1cXHUxZmZmXFx1MjAwY1xcdTIwMGRcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl0pKD86XFwuP1tcXC0wLTlBLVpfYS16XFx4YjdcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjAzZlxcdTIwNDBcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl0pKik/OigoPzooPzpbMC06QS1aX2EtelxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmZmXFx1MDM3MC1cXHUwMzdkXFx1MDM3Zi1cXHUxZmZmXFx1MjAwY1xcdTIwMGRcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl18JVswLTlhLWZBLUZdezJ9fFxcXFxbISMtXFwvOz0/XFwtQF9+XSkoPzooPzpbXFwuXFwtMC06QS1aX2EtelxceGI3XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwM2ZcXHUyMDQwXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdfCVbMC05YS1mQS1GXXsyfXxcXFxcWyEjLVxcLzs9P1xcLUBffl0pKig/OltcXC0wLTpBLVpfYS16XFx4YjdcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjAzZlxcdTIwNDBcXHUyMDcwLVxcdTIxOGZcXHUyYzAwLVxcdTJmZWZcXHUzMDAxLVxcdWQ3ZmZcXHVmOTAwLVxcdWZkY2ZcXHVmZGYwLVxcdWZmZmRdfFtcXHVkODAwLVxcdWRiN2ZdW1xcdWRjMDAtXFx1ZGZmZl18JVswLTlhLWZBLUZdezJ9fFxcXFxbISMtXFwvOz0/XFwtQF9+XSkpPyk/KSg/OlsgXFx0XSt8KD89XFwuP1ssOyFcXF5cXHMjKClcXFtcXF1cXHtcXH1cIic8XSkpLyx0aGlzLl92YXJpYWJsZT0vXlxcPyg/Oig/OltBLVpfYS16XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyZmZcXHUwMzcwLVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwNzAtXFx1MjE4ZlxcdTJjMDAtXFx1MmZlZlxcdTMwMDEtXFx1ZDdmZlxcdWY5MDAtXFx1ZmRjZlxcdWZkZjAtXFx1ZmZmZF18W1xcdWQ4MDAtXFx1ZGI3Zl1bXFx1ZGMwMC1cXHVkZmZmXSkoPzpbXFwtMC06QS1aX2EtelxceGI3XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwM2ZcXHUyMDQwXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSopKD89Wy4sOyFcXF5cXHMjKClcXFtcXF1cXHtcXH1cIic8XSkvLHRoaXMuX2JsYW5rPS9eXzooKD86WzAtOUEtWl9hLXpcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx1MDJmZlxcdTAzNzAtXFx1MDM3ZFxcdTAzN2YtXFx1MWZmZlxcdTIwMGNcXHUyMDBkXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSg/OlxcLj9bXFwtMC05QS1aX2EtelxceGI3XFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAzN2RcXHUwMzdmLVxcdTFmZmZcXHUyMDBjXFx1MjAwZFxcdTIwM2ZcXHUyMDQwXFx1MjA3MC1cXHUyMThmXFx1MmMwMC1cXHUyZmVmXFx1MzAwMS1cXHVkN2ZmXFx1ZjkwMC1cXHVmZGNmXFx1ZmRmMC1cXHVmZmZkXXxbXFx1ZDgwMC1cXHVkYjdmXVtcXHVkYzAwLVxcdWRmZmZdKSopKD86WyBcXHRdK3woPz1cXC4/Wyw7OlxccyMoKVxcW1xcXVxce1xcfVwiJzxdKSkvLHRoaXMuX251bWJlcj0vXltcXC0rXT8oPzpcXGQrXFwuP1xcZCooW2VFXSg/OltcXC1cXCtdKT9cXGQrKXxcXGQqXFwuP1xcZCspKD89XFwuP1ssOzpcXHMjKClcXFtcXF1cXHtcXH1cIic8XSkvLHRoaXMuX2Jvb2xlYW49L14oPzp0cnVlfGZhbHNlKSg/PVsuLDtcXHMjKClcXFtcXF1cXHtcXH1cIic8XSkvLHRoaXMuX2tleXdvcmQ9L15AW2Etel0rKD89W1xccyM8Ol0pL2ksdGhpcy5fc3BhcnFsS2V5d29yZD0vXig/OlBSRUZJWHxCQVNFfEdSQVBIKSg/PVtcXHMjPF0pL2ksdGhpcy5fc2hvcnRQcmVkaWNhdGVzPS9eYSg/PVtcXHMoKVxcW1xcXVxce1xcfVwiJzxdKS8sdGhpcy5fbmV3bGluZT0vXlsgXFx0XSooPzojW15cXG5cXHJdKik/KD86XFxyXFxufFxcbnxcXHIpWyBcXHRdKi8sdGhpcy5fY29tbWVudD0vIyhbXlxcblxccl0qKS8sdGhpcy5fd2hpdGVzcGFjZT0vXlsgXFx0XSsvLHRoaXMuX2VuZE9mRmlsZT0vXig/OiNbXlxcblxccl0qKT8kLyx0PXR8fHt9LHRoaXMuX2xpbmVNb2RlPSEhdC5saW5lTW9kZSlmb3IodmFyIGUgaW4gdGhpcy5fbjNNb2RlPSExLHRoaXMpIShlIGluIGYpJiZ0aGlzW2VdaW5zdGFuY2VvZiBSZWdFeHAmJih0aGlzW2VdPWwpO2Vsc2UgdGhpcy5fbjNNb2RlPSExIT09dC5uMzt0aGlzLl9jb21tZW50cz0hIXQuY29tbWVudHMsdGhpcy5fbGl0ZXJhbENsb3NpbmdQb3M9MH1fdG9rZW5pemVUb0VuZCh0LGUpe2Zvcih2YXIgcj10aGlzLl9pbnB1dCxuPXRoaXMuX2NvbW1lbnRzOzspe2Zvcih2YXIgaSxhO2k9dGhpcy5fbmV3bGluZS5leGVjKHIpOyluJiYoYT10aGlzLl9jb21tZW50LmV4ZWMoaVswXSkpJiZ0KG51bGwse2xpbmU6dGhpcy5fbGluZSx0eXBlOlwiY29tbWVudFwiLHZhbHVlOmFbMV0scHJlZml4OlwiXCJ9KSxyPXIuc3Vic3RyKGlbMF0ubGVuZ3RoLHIubGVuZ3RoKSx0aGlzLl9saW5lKys7aWYoIWkmJihpPXRoaXMuX3doaXRlc3BhY2UuZXhlYyhyKSkmJihyPXIuc3Vic3RyKGlbMF0ubGVuZ3RoLHIubGVuZ3RoKSksdGhpcy5fZW5kT2ZGaWxlLnRlc3QocikpcmV0dXJuIGUmJihuJiYoYT10aGlzLl9jb21tZW50LmV4ZWMocikpJiZ0KG51bGwse2xpbmU6dGhpcy5fbGluZSx0eXBlOlwiY29tbWVudFwiLHZhbHVlOmFbMV0scHJlZml4OlwiXCJ9KSx0KHI9bnVsbCx7bGluZTp0aGlzLl9saW5lLHR5cGU6XCJlb2ZcIix2YWx1ZTpcIlwiLHByZWZpeDpcIlwifSkpLHRoaXMuX2lucHV0PXI7dmFyIHM9dGhpcy5fbGluZSx1PVwiXCIsZj1cIlwiLGw9XCJcIixoPXJbMF0scD1udWxsLGQ9MCx2PSExO3N3aXRjaChoKXtjYXNlXCJeXCI6aWYoci5sZW5ndGg8MylicmVhaztpZihcIl5cIiE9PXJbMV0pe3RoaXMuX24zTW9kZSYmKGQ9MSx1PVwiXlwiKTticmVha31pZih0aGlzLl9wcmV2aW91c01hcmtlcj1cIl5eXCIsXCI8XCIhPT0ocj1yLnN1YnN0cigyKSlbMF0pe3Y9ITA7YnJlYWt9Y2FzZVwiPFwiOmlmKHA9dGhpcy5fdW5lc2NhcGVkSXJpLmV4ZWMocikpdT1cIklSSVwiLGY9cFsxXTtlbHNlIGlmKHA9dGhpcy5faXJpLmV4ZWMocikpe2lmKG51bGw9PT0oZj10aGlzLl91bmVzY2FwZShwWzFdKSl8fGMudGVzdChmKSlyZXR1cm4geSh0aGlzKTt1PVwiSVJJXCJ9ZWxzZSB0aGlzLl9uM01vZGUmJnIubGVuZ3RoPjEmJlwiPVwiPT09clsxXSYmKHU9XCJpbnZlcnNlXCIsZD0yLGY9XCI+XCIpO2JyZWFrO2Nhc2VcIl9cIjooKHA9dGhpcy5fYmxhbmsuZXhlYyhyKSl8fGUmJihwPXRoaXMuX2JsYW5rLmV4ZWMocitcIiBcIikpKSYmKHU9XCJibGFua1wiLGw9XCJfXCIsZj1wWzFdKTticmVhaztjYXNlJ1wiJzppZihwPXRoaXMuX3NpbXBsZVF1b3RlZFN0cmluZy5leGVjKHIpKWY9cFsxXTtlbHNlIGlmKCh7dmFsdWU6ZixtYXRjaExlbmd0aDpkfT10aGlzLl9wYXJzZUxpdGVyYWwocikpLG51bGw9PT1mKXJldHVybiB5KHRoaXMpO251bGw9PT1wJiYwPT09ZHx8KHU9XCJsaXRlcmFsXCIsdGhpcy5fbGl0ZXJhbENsb3NpbmdQb3M9MCk7YnJlYWs7Y2FzZVwiJ1wiOmlmKCF0aGlzLl9saW5lTW9kZSl7aWYocD10aGlzLl9zaW1wbGVBcG9zdHJvcGhlU3RyaW5nLmV4ZWMocikpZj1wWzFdO2Vsc2UgaWYoKHt2YWx1ZTpmLG1hdGNoTGVuZ3RoOmR9PXRoaXMuX3BhcnNlTGl0ZXJhbChyKSksbnVsbD09PWYpcmV0dXJuIHkodGhpcyk7bnVsbD09PXAmJjA9PT1kfHwodT1cImxpdGVyYWxcIix0aGlzLl9saXRlcmFsQ2xvc2luZ1Bvcz0wKX1icmVhaztjYXNlXCI/XCI6dGhpcy5fbjNNb2RlJiYocD10aGlzLl92YXJpYWJsZS5leGVjKHIpKSYmKHU9XCJ2YXJcIixmPXBbMF0pO2JyZWFrO2Nhc2VcIkBcIjpcImxpdGVyYWxcIj09PXRoaXMuX3ByZXZpb3VzTWFya2VyJiYocD10aGlzLl9sYW5nY29kZS5leGVjKHIpKT8odT1cImxhbmdjb2RlXCIsZj1wWzFdKToocD10aGlzLl9rZXl3b3JkLmV4ZWMocikpJiYodT1wWzBdKTticmVhaztjYXNlXCIuXCI6aWYoMT09PXIubGVuZ3RoP2U6clsxXTxcIjBcInx8clsxXT5cIjlcIil7dT1cIi5cIixkPTE7YnJlYWt9Y2FzZVwiMFwiOmNhc2VcIjFcIjpjYXNlXCIyXCI6Y2FzZVwiM1wiOmNhc2VcIjRcIjpjYXNlXCI1XCI6Y2FzZVwiNlwiOmNhc2VcIjdcIjpjYXNlXCI4XCI6Y2FzZVwiOVwiOmNhc2VcIitcIjpjYXNlXCItXCI6KHA9dGhpcy5fbnVtYmVyLmV4ZWMocil8fGUmJihwPXRoaXMuX251bWJlci5leGVjKHIrXCIgXCIpKSkmJih1PVwibGl0ZXJhbFwiLGY9cFswXSxsPXBbMV0/by5kb3VibGU6L15bK1xcLV0/XFxkKyQvLnRlc3QocFswXSk/by5pbnRlZ2VyOm8uZGVjaW1hbCk7YnJlYWs7Y2FzZVwiQlwiOmNhc2VcImJcIjpjYXNlXCJwXCI6Y2FzZVwiUFwiOmNhc2VcIkdcIjpjYXNlXCJnXCI6KHA9dGhpcy5fc3BhcnFsS2V5d29yZC5leGVjKHIpKT91PXBbMF0udG9VcHBlckNhc2UoKTp2PSEwO2JyZWFrO2Nhc2VcImZcIjpjYXNlXCJ0XCI6KHA9dGhpcy5fYm9vbGVhbi5leGVjKHIpKT8odT1cImxpdGVyYWxcIixmPXBbMF0sbD1vLmJvb2xlYW4pOnY9ITA7YnJlYWs7Y2FzZVwiYVwiOihwPXRoaXMuX3Nob3J0UHJlZGljYXRlcy5leGVjKHIpKT8odT1cImFiYnJldmlhdGlvblwiLGY9XCJhXCIpOnY9ITA7YnJlYWs7Y2FzZVwiPVwiOnRoaXMuX24zTW9kZSYmci5sZW5ndGg+MSYmKHU9XCJhYmJyZXZpYXRpb25cIixcIj5cIiE9PXJbMV0/KGQ9MSxmPVwiPVwiKTooZD0yLGY9XCI+XCIpKTticmVhaztjYXNlXCIhXCI6aWYoIXRoaXMuX24zTW9kZSlicmVhaztjYXNlXCIsXCI6Y2FzZVwiO1wiOmNhc2VcIltcIjpjYXNlXCJdXCI6Y2FzZVwiKFwiOmNhc2VcIilcIjpjYXNlXCJ7XCI6Y2FzZVwifVwiOnRoaXMuX2xpbmVNb2RlfHwoZD0xLHU9aCk7YnJlYWs7ZGVmYXVsdDp2PSEwfWlmKHYmJihcIkBwcmVmaXhcIiE9PXRoaXMuX3ByZXZpb3VzTWFya2VyJiZcIlBSRUZJWFwiIT09dGhpcy5fcHJldmlvdXNNYXJrZXJ8fCEocD10aGlzLl9wcmVmaXguZXhlYyhyKSk/KChwPXRoaXMuX3ByZWZpeGVkLmV4ZWMocikpfHxlJiYocD10aGlzLl9wcmVmaXhlZC5leGVjKHIrXCIgXCIpKSkmJih1PVwicHJlZml4ZWRcIixsPXBbMV18fFwiXCIsZj10aGlzLl91bmVzY2FwZShwWzJdKSk6KHU9XCJwcmVmaXhcIixmPXBbMV18fFwiXCIpKSxcIl5eXCI9PT10aGlzLl9wcmV2aW91c01hcmtlcilzd2l0Y2godSl7Y2FzZVwicHJlZml4ZWRcIjp1PVwidHlwZVwiO2JyZWFrO2Nhc2VcIklSSVwiOnU9XCJ0eXBlSVJJXCI7YnJlYWs7ZGVmYXVsdDp1PVwiXCJ9aWYoIXUpcmV0dXJuIGV8fCEvXicnJ3xeXCJcIlwiLy50ZXN0KHIpJiYvXFxufFxcci8udGVzdChyKT95KHRoaXMpOnRoaXMuX2lucHV0PXI7dmFyIGc9e2xpbmU6cyx0eXBlOnUsdmFsdWU6ZixwcmVmaXg6bH07dChudWxsLGcpLHRoaXMucHJldmlvdXNUb2tlbj1nLHRoaXMuX3ByZXZpb3VzTWFya2VyPXUscj1yLnN1YnN0cihkfHxwWzBdLmxlbmd0aCxyLmxlbmd0aCl9ZnVuY3Rpb24geShlKXt0KGUuX3N5bnRheEVycm9yKC9eXFxTKi8uZXhlYyhyKVswXSkpfX1fdW5lc2NhcGUodCl7dHJ5e3JldHVybiB0LnJlcGxhY2UocywoZnVuY3Rpb24odCxlLHIsbil7dmFyIGk7aWYoZSl7aWYoaT1wYXJzZUludChlLDE2KSxpc05hTihpKSl0aHJvdyBuZXcgRXJyb3I7cmV0dXJuIGEoaSl9aWYocil7aWYoaT1wYXJzZUludChyLDE2KSxpc05hTihpKSl0aHJvdyBuZXcgRXJyb3I7cmV0dXJuIGk8PTY1NTM1P2EoaSk6YSg1NTI5NisoaS09NjU1MzYpLzEwMjQsNTYzMjArKDEwMjMmaSkpfXZhciBvPXVbbl07aWYoIW8pdGhyb3cgbmV3IEVycm9yO3JldHVybiBvfSkpfWNhdGNoKHQpe3JldHVybiBudWxsfX1fcGFyc2VMaXRlcmFsKHQpe2lmKHQubGVuZ3RoPj0zKXtjb25zdCBlPXQubWF0Y2goL14oPzpcIlwiXCJ8XCJ8JycnfCd8KS8pWzBdLHI9ZS5sZW5ndGg7bGV0IG49TWF0aC5tYXgodGhpcy5fbGl0ZXJhbENsb3NpbmdQb3Mscik7Zm9yKDsobj10LmluZGV4T2YoZSxuKSk+MDspe2xldCBlPTA7Zm9yKDtcIlxcXFxcIj09PXRbbi1lLTFdOyllKys7aWYoZSUyPT0wKXtjb25zdCBlPXQuc3Vic3RyaW5nKHIsbiksaT1lLnNwbGl0KC9cXHJcXG58XFxyfFxcbi8pLmxlbmd0aC0xLG89bityO2lmKDE9PT1yJiYwIT09aXx8Mz09PXImJnRoaXMuX2xpbmVNb2RlKWJyZWFrO3JldHVybiB0aGlzLl9saW5lKz1pLHt2YWx1ZTp0aGlzLl91bmVzY2FwZShlKSxtYXRjaExlbmd0aDpvfX1uKyt9dGhpcy5fbGl0ZXJhbENsb3NpbmdQb3M9dC5sZW5ndGgtcisxfXJldHVybnt2YWx1ZTpcIlwiLG1hdGNoTGVuZ3RoOjB9fV9zeW50YXhFcnJvcih0KXt0aGlzLl9pbnB1dD1udWxsO3ZhciBlPW5ldyBFcnJvcignVW5leHBlY3RlZCBcIicrdCsnXCIgb24gbGluZSAnK3RoaXMuX2xpbmUrXCIuXCIpO3JldHVybiBlLmNvbnRleHQ9e3Rva2VuOnZvaWQgMCxsaW5lOnRoaXMuX2xpbmUscHJldmlvdXNUb2tlbjp0aGlzLnByZXZpb3VzVG9rZW59LGV9dG9rZW5pemUoZSxyKXt2YXIgaT10aGlzO2lmKHRoaXMuX2xpbmU9MSxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYodGhpcy5faW5wdXQ9ZSxcImZ1bmN0aW9uXCIhPXR5cGVvZiByKXt2YXIgbyxhPVtdO2lmKHRoaXMuX3Rva2VuaXplVG9FbmQoKGZ1bmN0aW9uKHQsZSl7dD9vPXQ6YS5wdXNoKGUpfSksITApLG8pdGhyb3cgbztyZXR1cm4gYX10KChmdW5jdGlvbigpe2kuX3Rva2VuaXplVG9FbmQociwhMCl9KSl9ZWxzZSB0aGlzLl9pbnB1dD1cIlwiLHRoaXMuX3BlbmRpbmdCdWZmZXI9bnVsbCxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnNldEVuY29kaW5nJiZlLnNldEVuY29kaW5nKFwidXRmOFwiKSxlLm9uKFwiZGF0YVwiLChmdW5jdGlvbih0KXtudWxsIT09aS5faW5wdXQmJjAhPT10Lmxlbmd0aCYmKGkuX3BlbmRpbmdCdWZmZXImJih0PW4uY29uY2F0KFtpLl9wZW5kaW5nQnVmZmVyLHRdKSxpLl9wZW5kaW5nQnVmZmVyPW51bGwpLDEyOCZ0W3QubGVuZ3RoLTFdP2kuX3BlbmRpbmdCdWZmZXI9dDooaS5faW5wdXQrPXQsaS5fdG9rZW5pemVUb0VuZChyLCExKSkpfSkpLGUub24oXCJlbmRcIiwoZnVuY3Rpb24oKXtudWxsIT09aS5faW5wdXQmJmkuX3Rva2VuaXplVG9FbmQociwhMCl9KSksZS5vbihcImVycm9yXCIscil9fX0pLmNhbGwodGhpcyxyKDEzNikuc2V0SW1tZWRpYXRlLHIoOTIpLkJ1ZmZlcil9LGZ1bmN0aW9uKHQsZSxyKXt0LmV4cG9ydHM9aTt2YXIgbj1yKDkzKS5FdmVudEVtaXR0ZXI7ZnVuY3Rpb24gaSgpe24uY2FsbCh0aGlzKX1yKDI5KShpLG4pLGkuUmVhZGFibGU9cig5NCksaS5Xcml0YWJsZT1yKDE5NyksaS5EdXBsZXg9cigxOTgpLGkuVHJhbnNmb3JtPXIoMTk5KSxpLlBhc3NUaHJvdWdoPXIoMjAwKSxpLlN0cmVhbT1pLGkucHJvdG90eXBlLnBpcGU9ZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzO2Z1bmN0aW9uIGkoZSl7dC53cml0YWJsZSYmITE9PT10LndyaXRlKGUpJiZyLnBhdXNlJiZyLnBhdXNlKCl9ZnVuY3Rpb24gbygpe3IucmVhZGFibGUmJnIucmVzdW1lJiZyLnJlc3VtZSgpfXIub24oXCJkYXRhXCIsaSksdC5vbihcImRyYWluXCIsbyksdC5faXNTdGRpb3x8ZSYmITE9PT1lLmVuZHx8KHIub24oXCJlbmRcIixzKSxyLm9uKFwiY2xvc2VcIix1KSk7dmFyIGE9ITE7ZnVuY3Rpb24gcygpe2F8fChhPSEwLHQuZW5kKCkpfWZ1bmN0aW9uIHUoKXthfHwoYT0hMCxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmRlc3Ryb3kmJnQuZGVzdHJveSgpKX1mdW5jdGlvbiBjKHQpe2lmKGYoKSwwPT09bi5saXN0ZW5lckNvdW50KHRoaXMsXCJlcnJvclwiKSl0aHJvdyB0fWZ1bmN0aW9uIGYoKXtyLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLGkpLHQucmVtb3ZlTGlzdGVuZXIoXCJkcmFpblwiLG8pLHIucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIixzKSxyLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIix1KSxyLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixjKSx0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixjKSxyLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsZiksci5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsZiksdC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsZil9cmV0dXJuIHIub24oXCJlcnJvclwiLGMpLHQub24oXCJlcnJvclwiLGMpLHIub24oXCJlbmRcIixmKSxyLm9uKFwiY2xvc2VcIixmKSx0Lm9uKFwiY2xvc2VcIixmKSx0LmVtaXQoXCJwaXBlXCIsciksdH19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDQpLGk9cig2Myksbz1uLldlYWtNYXA7dC5leHBvcnRzPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8mJi9uYXRpdmUgY29kZS8udGVzdChpKG8pKX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoMTIpLGk9cig0NikuZixvPXt9LnRvU3RyaW5nLGE9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdO3QuZXhwb3J0cy5mPWZ1bmN0aW9uKHQpe3JldHVybiBhJiZcIltvYmplY3QgV2luZG93XVwiPT1vLmNhbGwodCk/ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBpKHQpfWNhdGNoKHQpe3JldHVybiBhLnNsaWNlKCl9fSh0KTppKG4odCkpfX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoMiksaT1yKDcpLG89cig0KSxhPXIoMTMpLHM9cigxMCksdT1yKDExKS5mLGM9cigxMDEpLGY9by5TeW1ib2w7aWYoaSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZiYmKCEoXCJkZXNjcmlwdGlvblwiaW4gZi5wcm90b3R5cGUpfHx2b2lkIDAhPT1mKCkuZGVzY3JpcHRpb24pKXt2YXIgbD17fSxoPWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aDwxfHx2b2lkIDA9PT1hcmd1bWVudHNbMF0/dm9pZCAwOlN0cmluZyhhcmd1bWVudHNbMF0pLGU9dGhpcyBpbnN0YW5jZW9mIGg/bmV3IGYodCk6dm9pZCAwPT09dD9mKCk6Zih0KTtyZXR1cm5cIlwiPT09dCYmKGxbZV09ITApLGV9O2MoaCxmKTt2YXIgcD1oLnByb3RvdHlwZT1mLnByb3RvdHlwZTtwLmNvbnN0cnVjdG9yPWg7dmFyIGQ9cC50b1N0cmluZyx2PVwiU3ltYm9sKHRlc3QpXCI9PVN0cmluZyhmKFwidGVzdFwiKSksZz0vXlN5bWJvbFxcKCguKilcXClbXildKyQvO3UocCxcImRlc2NyaXB0aW9uXCIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXt2YXIgdD1zKHRoaXMpP3RoaXMudmFsdWVPZigpOnRoaXMsZT1kLmNhbGwodCk7aWYoYShsLHQpKXJldHVyblwiXCI7dmFyIHI9dj9lLnNsaWNlKDcsLTEpOmUucmVwbGFjZShnLFwiJDFcIik7cmV0dXJuXCJcIj09PXI/dm9pZCAwOnJ9fSksbih7Z2xvYmFsOiEwLGZvcmNlZDohMH0se1N5bWJvbDpofSl9fSxmdW5jdGlvbih0LGUscil7cigxMTEpKFwiaXRlcmF0b3JcIil9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDExNSkuSXRlcmF0b3JQcm90b3R5cGUsaT1yKDcwKSxvPXIoMzEpLGE9cig0OSkscz1yKDM0KSx1PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbih0LGUscil7dmFyIGM9ZStcIiBJdGVyYXRvclwiO3JldHVybiB0LnByb3RvdHlwZT1pKG4se25leHQ6bygxLHIpfSksYSh0LGMsITEsITApLHNbY109dSx0fX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNSk7dC5leHBvcnRzPSFuKChmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPW51bGwsT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyB0KSE9PXQucHJvdG90eXBlfSkpfSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxMCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCFuKHQpJiZudWxsIT09dCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIrU3RyaW5nKHQpK1wiIGFzIGEgcHJvdG90eXBlXCIpO3JldHVybiB0fX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNzIpLGk9cigxMTgpO3QuZXhwb3J0cz1uP3t9LnRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IFwiK2kodGhpcykrXCJdXCJ9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDE2KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtmb3IoOyFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKSYmbnVsbCE9PSh0PW4odCkpOyk7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigyKSxpPXIoNyk7bih7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6IWksc2hhbTohaX0se2RlZmluZVByb3BlcnRpZXM6cigxMDgpfSl9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDIpLGk9cig3KTtuKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLGZvcmNlZDohaSxzaGFtOiFpfSx7ZGVmaW5lUHJvcGVydHk6cigxMSkuZn0pfSxmdW5jdGlvbih0LGUscil7dmFyIG49cigyKSxpPXIoMTYwKS5lbnRyaWVzO24oe3RhcmdldDpcIk9iamVjdFwiLHN0YXQ6ITB9LHtlbnRyaWVzOmZ1bmN0aW9uKHQpe3JldHVybiBpKHQpfX0pfSxmdW5jdGlvbih0LGUscil7dmFyIG49cig3KSxpPXIoNDgpLG89cigxMiksYT1yKDU5KS5mLHM9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgcixzPW8oZSksdT1pKHMpLGM9dS5sZW5ndGgsZj0wLGw9W107Yz5mOylyPXVbZisrXSxuJiYhYS5jYWxsKHMscil8fGwucHVzaCh0P1tyLHNbcl1dOnNbcl0pO3JldHVybiBsfX07dC5leHBvcnRzPXtlbnRyaWVzOnMoITApLHZhbHVlczpzKCExKX19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDIpLGk9cig1KSxvPXIoMTIpLGE9cigyMikuZixzPXIoNyksdT1pKChmdW5jdGlvbigpe2EoMSl9KSk7bih7dGFyZ2V0OlwiT2JqZWN0XCIsc3RhdDohMCxmb3JjZWQ6IXN8fHUsc2hhbTohc30se2dldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbih0LGUpe3JldHVybiBhKG8odCksZSl9fSl9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDIpLGk9cig3KSxvPXIoMTAyKSxhPXIoMTIpLHM9cigyMiksdT1yKDgyKTtuKHt0YXJnZXQ6XCJPYmplY3RcIixzdGF0OiEwLHNoYW06IWl9LHtnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxyLG49YSh0KSxpPXMuZixjPW8obiksZj17fSxsPTA7Yy5sZW5ndGg+bDspdm9pZCAwIT09KHI9aShuLGU9Y1tsKytdKSkmJnUoZixlLHIpO3JldHVybiBmfX0pfSxmdW5jdGlvbih0LGUscil7dmFyIG49cig3KSxpPXIoNCksbz1yKDY4KSxhPXIoMTY0KSxzPXIoMTEpLmYsdT1yKDQ2KS5mLGM9cig4OCksZj1yKDczKSxsPXIoMTE5KSxoPXIoMTcpLHA9cig1KSxkPXIoMjQpLnNldCx2PXIoMTI1KSxnPXIoMykoXCJtYXRjaFwiKSx5PWkuUmVnRXhwLGI9eS5wcm90b3R5cGUsXz0vYS9nLG09L2EvZyx3PW5ldyB5KF8pIT09Xyx4PWwuVU5TVVBQT1JURURfWTtpZihuJiZvKFwiUmVnRXhwXCIsIXd8fHh8fHAoKGZ1bmN0aW9uKCl7cmV0dXJuIG1bZ109ITEseShfKSE9X3x8eShtKT09bXx8XCIvYS9pXCIhPXkoXyxcImlcIil9KSkpKXtmb3IodmFyIGs9ZnVuY3Rpb24odCxlKXt2YXIgcixuPXRoaXMgaW5zdGFuY2VvZiBrLGk9Yyh0KSxvPXZvaWQgMD09PWU7aWYoIW4mJmkmJnQuY29uc3RydWN0b3I9PT1rJiZvKXJldHVybiB0O3c/aSYmIW8mJih0PXQuc291cmNlKTp0IGluc3RhbmNlb2YgayYmKG8mJihlPWYuY2FsbCh0KSksdD10LnNvdXJjZSkseCYmKHI9ISFlJiZlLmluZGV4T2YoXCJ5XCIpPi0xKSYmKGU9ZS5yZXBsYWNlKC95L2csXCJcIikpO3ZhciBzPWEodz9uZXcgeSh0LGUpOnkodCxlKSxuP3RoaXM6YixrKTtyZXR1cm4geCYmciYmZChzLHtzdGlja3k6cn0pLHN9LEU9ZnVuY3Rpb24odCl7dCBpbiBrfHxzKGssdCx7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB5W3RdfSxzZXQ6ZnVuY3Rpb24oZSl7eVt0XT1lfX0pfSxTPXUoeSksaj0wO1MubGVuZ3RoPmo7KUUoU1tqKytdKTtiLmNvbnN0cnVjdG9yPWssay5wcm90b3R5cGU9YixoKGksXCJSZWdFeHBcIixrKX12KFwiUmVnRXhwXCIpfSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxMCksaT1yKDExNyk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbyxhO3JldHVybiBpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihvPWUuY29uc3RydWN0b3IpJiZvIT09ciYmbihhPW8ucHJvdG90eXBlKSYmYSE9PXIucHJvdG90eXBlJiZpKHQsYSksdH19LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDE3KSxpPXIoOCksbz1yKDUpLGE9cig3Mykscz1SZWdFeHAucHJvdG90eXBlLHU9cy50b1N0cmluZyxjPW8oKGZ1bmN0aW9uKCl7cmV0dXJuXCIvYS9iXCIhPXUuY2FsbCh7c291cmNlOlwiYVwiLGZsYWdzOlwiYlwifSl9KSksZj1cInRvU3RyaW5nXCIhPXUubmFtZTsoY3x8ZikmJm4oUmVnRXhwLnByb3RvdHlwZSxcInRvU3RyaW5nXCIsKGZ1bmN0aW9uKCl7dmFyIHQ9aSh0aGlzKSxlPVN0cmluZyh0LnNvdXJjZSkscj10LmZsYWdzO3JldHVyblwiL1wiK2UrXCIvXCIrU3RyaW5nKHZvaWQgMD09PXImJnQgaW5zdGFuY2VvZiBSZWdFeHAmJiEoXCJmbGFnc1wiaW4gcyk/YS5jYWxsKHQpOnIpfSkse3Vuc2FmZTohMH0pfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiB0fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KHQpfHxcIltvYmplY3QgQXJndW1lbnRzXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKXt2YXIgcj1bXSxuPSEwLGk9ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgYSxzPXRbU3ltYm9sLml0ZXJhdG9yXSgpOyEobj0oYT1zLm5leHQoKSkuZG9uZSkmJihyLnB1c2goYS52YWx1ZSksIWV8fHIubGVuZ3RoIT09ZSk7bj0hMCk7fWNhdGNoKHQpe2k9ITAsbz10fWZpbmFsbHl7dHJ5e258fG51bGw9PXMucmV0dXJufHxzLnJldHVybigpfWZpbmFsbHl7aWYoaSl0aHJvdyBvfX1yZXR1cm4gcn19fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHZhciBlPTAscj1uZXcgQXJyYXkodC5sZW5ndGgpO2U8dC5sZW5ndGg7ZSsrKXJbZV09dFtlXTtyZXR1cm4gcn19fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KHQpfHxcIltvYmplY3QgQXJndW1lbnRzXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKXJldHVybiBBcnJheS5mcm9tKHQpfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIil9fSxmdW5jdGlvbih0LGUscil7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCl7bGV0IGU9MDtmb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKyllPShlPDw1KS1lK3QuY2hhckNvZGVBdChyKSxlfD0wO3JldHVybiBuLmNvbG9yc1tNYXRoLmFicyhlKSVuLmNvbG9ycy5sZW5ndGhdfWZ1bmN0aW9uIG4odCl7bGV0IHI7ZnVuY3Rpb24gYSguLi50KXtpZighYS5lbmFibGVkKXJldHVybjtjb25zdCBlPWEsaT1OdW1iZXIobmV3IERhdGUpLG89aS0ocnx8aSk7ZS5kaWZmPW8sZS5wcmV2PXIsZS5jdXJyPWkscj1pLHRbMF09bi5jb2VyY2UodFswXSksXCJzdHJpbmdcIiE9dHlwZW9mIHRbMF0mJnQudW5zaGlmdChcIiVPXCIpO2xldCBzPTA7dFswXT10WzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLChyLGkpPT57aWYoXCIlJVwiPT09cilyZXR1cm4gcjtzKys7Y29uc3Qgbz1uLmZvcm1hdHRlcnNbaV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygbyl7Y29uc3Qgbj10W3NdO3I9by5jYWxsKGUsbiksdC5zcGxpY2UocywxKSxzLS19cmV0dXJuIHJ9KSxuLmZvcm1hdEFyZ3MuY2FsbChlLHQpLChlLmxvZ3x8bi5sb2cpLmFwcGx5KGUsdCl9cmV0dXJuIGEubmFtZXNwYWNlPXQsYS5lbmFibGVkPW4uZW5hYmxlZCh0KSxhLnVzZUNvbG9ycz1uLnVzZUNvbG9ycygpLGEuY29sb3I9ZSh0KSxhLmRlc3Ryb3k9aSxhLmV4dGVuZD1vLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4uaW5pdCYmbi5pbml0KGEpLG4uaW5zdGFuY2VzLnB1c2goYSksYX1mdW5jdGlvbiBpKCl7Y29uc3QgdD1uLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO3JldHVybi0xIT09dCYmKG4uaW5zdGFuY2VzLnNwbGljZSh0LDEpLCEwKX1mdW5jdGlvbiBvKHQsZSl7Y29uc3Qgcj1uKHRoaXMubmFtZXNwYWNlKyh2b2lkIDA9PT1lP1wiOlwiOmUpK3QpO3JldHVybiByLmxvZz10aGlzLmxvZyxyfWZ1bmN0aW9uIGEodCl7cmV0dXJuIHQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMix0LnRvU3RyaW5nKCkubGVuZ3RoLTIpLnJlcGxhY2UoL1xcLlxcKlxcPyQvLFwiKlwiKX1yZXR1cm4gbi5kZWJ1Zz1uLG4uZGVmYXVsdD1uLG4uY29lcmNlPWZ1bmN0aW9uKHQpe2lmKHQgaW5zdGFuY2VvZiBFcnJvcilyZXR1cm4gdC5zdGFja3x8dC5tZXNzYWdlO3JldHVybiB0fSxuLmRpc2FibGU9ZnVuY3Rpb24oKXtjb25zdCB0PVsuLi5uLm5hbWVzLm1hcChhKSwuLi5uLnNraXBzLm1hcChhKS5tYXAodD0+XCItXCIrdCldLmpvaW4oXCIsXCIpO3JldHVybiBuLmVuYWJsZShcIlwiKSx0fSxuLmVuYWJsZT1mdW5jdGlvbih0KXtsZXQgZTtuLnNhdmUodCksbi5uYW1lcz1bXSxuLnNraXBzPVtdO2NvbnN0IHI9KFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6XCJcIikuc3BsaXQoL1tcXHMsXSsvKSxpPXIubGVuZ3RoO2ZvcihlPTA7ZTxpO2UrKylyW2VdJiYoXCItXCI9PT0odD1yW2VdLnJlcGxhY2UoL1xcKi9nLFwiLio/XCIpKVswXT9uLnNraXBzLnB1c2gobmV3IFJlZ0V4cChcIl5cIit0LnN1YnN0cigxKStcIiRcIikpOm4ubmFtZXMucHVzaChuZXcgUmVnRXhwKFwiXlwiK3QrXCIkXCIpKSk7Zm9yKGU9MDtlPG4uaW5zdGFuY2VzLmxlbmd0aDtlKyspe2NvbnN0IHQ9bi5pbnN0YW5jZXNbZV07dC5lbmFibGVkPW4uZW5hYmxlZCh0Lm5hbWVzcGFjZSl9fSxuLmVuYWJsZWQ9ZnVuY3Rpb24odCl7aWYoXCIqXCI9PT10W3QubGVuZ3RoLTFdKXJldHVybiEwO2xldCBlLHI7Zm9yKGU9MCxyPW4uc2tpcHMubGVuZ3RoO2U8cjtlKyspaWYobi5za2lwc1tlXS50ZXN0KHQpKXJldHVybiExO2ZvcihlPTAscj1uLm5hbWVzLmxlbmd0aDtlPHI7ZSsrKWlmKG4ubmFtZXNbZV0udGVzdCh0KSlyZXR1cm4hMDtyZXR1cm4hMX0sbi5odW1hbml6ZT1yKDE3MyksT2JqZWN0LmtleXModCkuZm9yRWFjaChlPT57bltlXT10W2VdfSksbi5pbnN0YW5jZXM9W10sbi5uYW1lcz1bXSxuLnNraXBzPVtdLG4uZm9ybWF0dGVycz17fSxuLnNlbGVjdENvbG9yPWUsbi5lbmFibGUobi5sb2FkKCkpLG59fSxmdW5jdGlvbih0LGUpe3ZhciByPTFlMyxuPTZlNCxpPTYwKm4sbz0yNCppO2Z1bmN0aW9uIGEodCxlLHIsbil7dmFyIGk9ZT49MS41KnI7cmV0dXJuIE1hdGgucm91bmQodC9yKStcIiBcIituKyhpP1wic1wiOlwiXCIpfXQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2U9ZXx8e307dmFyIHM9dHlwZW9mIHQ7aWYoXCJzdHJpbmdcIj09PXMmJnQubGVuZ3RoPjApcmV0dXJuIGZ1bmN0aW9uKHQpe2lmKCh0PVN0cmluZyh0KSkubGVuZ3RoPjEwMClyZXR1cm47dmFyIGU9L14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKHQpO2lmKCFlKXJldHVybjt2YXIgYT1wYXJzZUZsb2F0KGVbMV0pO3N3aXRjaCgoZVsyXXx8XCJtc1wiKS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJ5ZWFyc1wiOmNhc2VcInllYXJcIjpjYXNlXCJ5cnNcIjpjYXNlXCJ5clwiOmNhc2VcInlcIjpyZXR1cm4gMzE1NTc2ZTUqYTtjYXNlXCJ3ZWVrc1wiOmNhc2VcIndlZWtcIjpjYXNlXCJ3XCI6cmV0dXJuIDYwNDhlNSphO2Nhc2VcImRheXNcIjpjYXNlXCJkYXlcIjpjYXNlXCJkXCI6cmV0dXJuIGEqbztjYXNlXCJob3Vyc1wiOmNhc2VcImhvdXJcIjpjYXNlXCJocnNcIjpjYXNlXCJoclwiOmNhc2VcImhcIjpyZXR1cm4gYSppO2Nhc2VcIm1pbnV0ZXNcIjpjYXNlXCJtaW51dGVcIjpjYXNlXCJtaW5zXCI6Y2FzZVwibWluXCI6Y2FzZVwibVwiOnJldHVybiBhKm47Y2FzZVwic2Vjb25kc1wiOmNhc2VcInNlY29uZFwiOmNhc2VcInNlY3NcIjpjYXNlXCJzZWNcIjpjYXNlXCJzXCI6cmV0dXJuIGEqcjtjYXNlXCJtaWxsaXNlY29uZHNcIjpjYXNlXCJtaWxsaXNlY29uZFwiOmNhc2VcIm1zZWNzXCI6Y2FzZVwibXNlY1wiOmNhc2VcIm1zXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm59fSh0KTtpZihcIm51bWJlclwiPT09cyYmaXNGaW5pdGUodCkpcmV0dXJuIGUubG9uZz9mdW5jdGlvbih0KXt2YXIgZT1NYXRoLmFicyh0KTtpZihlPj1vKXJldHVybiBhKHQsZSxvLFwiZGF5XCIpO2lmKGU+PWkpcmV0dXJuIGEodCxlLGksXCJob3VyXCIpO2lmKGU+PW4pcmV0dXJuIGEodCxlLG4sXCJtaW51dGVcIik7aWYoZT49cilyZXR1cm4gYSh0LGUscixcInNlY29uZFwiKTtyZXR1cm4gdCtcIiBtc1wifSh0KTpmdW5jdGlvbih0KXt2YXIgZT1NYXRoLmFicyh0KTtpZihlPj1vKXJldHVybiBNYXRoLnJvdW5kKHQvbykrXCJkXCI7aWYoZT49aSlyZXR1cm4gTWF0aC5yb3VuZCh0L2kpK1wiaFwiO2lmKGU+PW4pcmV0dXJuIE1hdGgucm91bmQodC9uKStcIm1cIjtpZihlPj1yKXJldHVybiBNYXRoLnJvdW5kKHQvcikrXCJzXCI7cmV0dXJuIHQrXCJtc1wifSh0KTt0aHJvdyBuZXcgRXJyb3IoXCJ2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPVwiK0pTT04uc3RyaW5naWZ5KHQpKX19LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDIpLGk9cigzMykuZXZlcnk7bih7dGFyZ2V0OlwiQXJyYXlcIixwcm90bzohMCxmb3JjZWQ6cigzNikoXCJldmVyeVwiKX0se2V2ZXJ5OmZ1bmN0aW9uKHQpe3JldHVybiBpKHRoaXMsdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LGZ1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDEyKSxpPXIoMzIpLG89cigxNSksYT1yKDM2KSxzPU1hdGgubWluLHU9W10ubGFzdEluZGV4T2YsYz0hIXUmJjEvWzFdLmxhc3RJbmRleE9mKDEsLTApPDAsZj1hKFwibGFzdEluZGV4T2ZcIik7dC5leHBvcnRzPWN8fGY/ZnVuY3Rpb24odCl7aWYoYylyZXR1cm4gdS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fDA7dmFyIGU9bih0aGlzKSxyPW8oZS5sZW5ndGgpLGE9ci0xO2Zvcihhcmd1bWVudHMubGVuZ3RoPjEmJihhPXMoYSxpKGFyZ3VtZW50c1sxXSkpKSxhPDAmJihhPXIrYSk7YT49MDthLS0paWYoYSBpbiBlJiZlW2FdPT09dClyZXR1cm4gYXx8MDtyZXR1cm4tMX06dX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNzYpLGk9cig4OCksbz1yKDgpLGE9cigyMCkscz1yKDEzMiksdT1yKDc3KSxjPXIoMTUpLGY9cig3OCksbD1yKDUzKSxoPXIoNSkscD1bXS5wdXNoLGQ9TWF0aC5taW4sdj0haCgoZnVuY3Rpb24oKXtyZXR1cm4hUmVnRXhwKDQyOTQ5NjcyOTUsXCJ5XCIpfSkpO24oXCJzcGxpdFwiLDIsKGZ1bmN0aW9uKHQsZSxyKXt2YXIgbjtyZXR1cm4gbj1cImNcIj09XCJhYmJjXCIuc3BsaXQoLyhiKSovKVsxXXx8NCE9XCJ0ZXN0XCIuc3BsaXQoLyg/OikvLC0xKS5sZW5ndGh8fDIhPVwiYWJcIi5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aHx8NCE9XCIuXCIuc3BsaXQoLyguPykoLj8pLykubGVuZ3RofHxcIi5cIi5zcGxpdCgvKCkoKS8pLmxlbmd0aD4xfHxcIlwiLnNwbGl0KC8uPy8pLmxlbmd0aD9mdW5jdGlvbih0LHIpe3ZhciBuPVN0cmluZyhhKHRoaXMpKSxvPXZvaWQgMD09PXI/NDI5NDk2NzI5NTpyPj4+MDtpZigwPT09bylyZXR1cm5bXTtpZih2b2lkIDA9PT10KXJldHVybltuXTtpZighaSh0KSlyZXR1cm4gZS5jYWxsKG4sdCxvKTtmb3IodmFyIHMsdSxjLGY9W10saD0odC5pZ25vcmVDYXNlP1wiaVwiOlwiXCIpKyh0Lm11bHRpbGluZT9cIm1cIjpcIlwiKSsodC51bmljb2RlP1widVwiOlwiXCIpKyh0LnN0aWNreT9cInlcIjpcIlwiKSxkPTAsdj1uZXcgUmVnRXhwKHQuc291cmNlLGgrXCJnXCIpOyhzPWwuY2FsbCh2LG4pKSYmISgodT12Lmxhc3RJbmRleCk+ZCYmKGYucHVzaChuLnNsaWNlKGQscy5pbmRleCkpLHMubGVuZ3RoPjEmJnMuaW5kZXg8bi5sZW5ndGgmJnAuYXBwbHkoZixzLnNsaWNlKDEpKSxjPXNbMF0ubGVuZ3RoLGQ9dSxmLmxlbmd0aD49bykpOyl2Lmxhc3RJbmRleD09PXMuaW5kZXgmJnYubGFzdEluZGV4Kys7cmV0dXJuIGQ9PT1uLmxlbmd0aD8hYyYmdi50ZXN0KFwiXCIpfHxmLnB1c2goXCJcIik6Zi5wdXNoKG4uc2xpY2UoZCkpLGYubGVuZ3RoPm8/Zi5zbGljZSgwLG8pOmZ9OlwiMFwiLnNwbGl0KHZvaWQgMCwwKS5sZW5ndGg/ZnVuY3Rpb24odCxyKXtyZXR1cm4gdm9pZCAwPT09dCYmMD09PXI/W106ZS5jYWxsKHRoaXMsdCxyKX06ZSxbZnVuY3Rpb24oZSxyKXt2YXIgaT1hKHRoaXMpLG89bnVsbD09ZT92b2lkIDA6ZVt0XTtyZXR1cm4gdm9pZCAwIT09bz9vLmNhbGwoZSxpLHIpOm4uY2FsbChTdHJpbmcoaSksZSxyKX0sZnVuY3Rpb24odCxpKXt2YXIgYT1yKG4sdCx0aGlzLGksbiE9PWUpO2lmKGEuZG9uZSlyZXR1cm4gYS52YWx1ZTt2YXIgbD1vKHQpLGg9U3RyaW5nKHRoaXMpLHA9cyhsLFJlZ0V4cCksZz1sLnVuaWNvZGUseT0obC5pZ25vcmVDYXNlP1wiaVwiOlwiXCIpKyhsLm11bHRpbGluZT9cIm1cIjpcIlwiKSsobC51bmljb2RlP1widVwiOlwiXCIpKyh2P1wieVwiOlwiZ1wiKSxiPW5ldyBwKHY/bDpcIl4oPzpcIitsLnNvdXJjZStcIilcIix5KSxfPXZvaWQgMD09PWk/NDI5NDk2NzI5NTppPj4+MDtpZigwPT09XylyZXR1cm5bXTtpZigwPT09aC5sZW5ndGgpcmV0dXJuIG51bGw9PT1mKGIsaCk/W2hdOltdO2Zvcih2YXIgbT0wLHc9MCx4PVtdO3c8aC5sZW5ndGg7KXtiLmxhc3RJbmRleD12P3c6MDt2YXIgayxFPWYoYix2P2g6aC5zbGljZSh3KSk7aWYobnVsbD09PUV8fChrPWQoYyhiLmxhc3RJbmRleCsodj8wOncpKSxoLmxlbmd0aCkpPT09bSl3PXUoaCx3LGcpO2Vsc2V7aWYoeC5wdXNoKGguc2xpY2UobSx3KSkseC5sZW5ndGg9PT1fKXJldHVybiB4O2Zvcih2YXIgUz0xO1M8PUUubGVuZ3RoLTE7UysrKWlmKHgucHVzaChFW1NdKSx4Lmxlbmd0aD09PV8pcmV0dXJuIHg7dz1tPWt9fXJldHVybiB4LnB1c2goaC5zbGljZShtKSkseH1dfSksIXYpfSxmdW5jdGlvbih0LGUscil7dmFyIG49cig0KTt0LmV4cG9ydHM9bi5Qcm9taXNlfSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxNyk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyKXtmb3IodmFyIGkgaW4gZSluKHQsaSxlW2ldLHIpO3JldHVybiB0fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IFR5cGVFcnJvcihcIkluY29ycmVjdCBcIisocj9yK1wiIFwiOlwiXCIpK1wiaW52b2NhdGlvblwiKTtyZXR1cm4gdH19LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1yKDgpLGk9cigxODEpLG89cigxNSksYT1yKDcxKSxzPXIoMTgyKSx1PXIoMTgzKSxjPWZ1bmN0aW9uKHQsZSl7dGhpcy5zdG9wcGVkPXQsdGhpcy5yZXN1bHQ9ZX07KHQuZXhwb3J0cz1mdW5jdGlvbih0LGUscixmLGwpe3ZhciBoLHAsZCx2LGcseSxiLF89YShlLHIsZj8yOjEpO2lmKGwpaD10O2Vsc2V7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YocD1zKHQpKSl0aHJvdyBUeXBlRXJyb3IoXCJUYXJnZXQgaXMgbm90IGl0ZXJhYmxlXCIpO2lmKGkocCkpe2ZvcihkPTAsdj1vKHQubGVuZ3RoKTt2PmQ7ZCsrKWlmKChnPWY/XyhuKGI9dFtkXSlbMF0sYlsxXSk6Xyh0W2RdKSkmJmcgaW5zdGFuY2VvZiBjKXJldHVybiBnO3JldHVybiBuZXcgYyghMSl9aD1wLmNhbGwodCl9Zm9yKHk9aC5uZXh0OyEoYj15LmNhbGwoaCkpLmRvbmU7KWlmKFwib2JqZWN0XCI9PXR5cGVvZihnPXUoaCxfLGIudmFsdWUsZikpJiZnJiZnIGluc3RhbmNlb2YgYylyZXR1cm4gZztyZXR1cm4gbmV3IGMoITEpfSkuc3RvcD1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGMoITAsdCl9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigzKSxpPXIoMzQpLG89bihcIml0ZXJhdG9yXCIpLGE9QXJyYXkucHJvdG90eXBlO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmKGkuQXJyYXk9PT10fHxhW29dPT09dCl9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigxMTgpLGk9cigzNCksbz1yKDMpKFwiaXRlcmF0b3JcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKG51bGwhPXQpcmV0dXJuIHRbb118fHRbXCJAQGl0ZXJhdG9yXCJdfHxpW24odCldfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoOCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyLGkpe3RyeXtyZXR1cm4gaT9lKG4ocilbMF0sclsxXSk6ZShyKX1jYXRjaChlKXt2YXIgbz10LnJldHVybjt0aHJvdyB2b2lkIDAhPT1vJiZuKG8uY2FsbCh0KSksZX19fSxmdW5jdGlvbih0LGUscil7dmFyIG49cigzKShcIml0ZXJhdG9yXCIpLGk9ITE7dHJ5e3ZhciBvPTAsYT17bmV4dDpmdW5jdGlvbigpe3JldHVybntkb25lOiEhbysrfX0scmV0dXJuOmZ1bmN0aW9uKCl7aT0hMH19O2Fbbl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sQXJyYXkuZnJvbShhLChmdW5jdGlvbigpe3Rocm93IDJ9KSl9Y2F0Y2godCl7fXQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKCFlJiYhaSlyZXR1cm4hMTt2YXIgcj0hMTt0cnl7dmFyIG89e307b1tuXT1mdW5jdGlvbigpe3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6cj0hMH19fX0sdChvKX1jYXRjaCh0KXt9cmV0dXJuIHJ9fSxmdW5jdGlvbih0LGUscil7dmFyIG4saSxvLGEscyx1LGMsZixsPXIoNCksaD1yKDIyKS5mLHA9cigxOSksZD1yKDEzMykuc2V0LHY9cigxMzQpLGc9bC5NdXRhdGlvbk9ic2VydmVyfHxsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIseT1sLnByb2Nlc3MsYj1sLlByb21pc2UsXz1cInByb2Nlc3NcIj09cCh5KSxtPWgobCxcInF1ZXVlTWljcm90YXNrXCIpLHc9bSYmbS52YWx1ZTt3fHwobj1mdW5jdGlvbigpe3ZhciB0LGU7Zm9yKF8mJih0PXkuZG9tYWluKSYmdC5leGl0KCk7aTspe2U9aS5mbixpPWkubmV4dDt0cnl7ZSgpfWNhdGNoKHQpe3Rocm93IGk/YSgpOm89dm9pZCAwLHR9fW89dm9pZCAwLHQmJnQuZW50ZXIoKX0sXz9hPWZ1bmN0aW9uKCl7eS5uZXh0VGljayhuKX06ZyYmIXY/KHM9ITAsdT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKSxuZXcgZyhuKS5vYnNlcnZlKHUse2NoYXJhY3RlckRhdGE6ITB9KSxhPWZ1bmN0aW9uKCl7dS5kYXRhPXM9IXN9KTpiJiZiLnJlc29sdmU/KGM9Yi5yZXNvbHZlKHZvaWQgMCksZj1jLnRoZW4sYT1mdW5jdGlvbigpe2YuY2FsbChjLG4pfSk6YT1mdW5jdGlvbigpe2QuY2FsbChsLG4pfSksdC5leHBvcnRzPXd8fGZ1bmN0aW9uKHQpe3ZhciBlPXtmbjp0LG5leHQ6dm9pZCAwfTtvJiYoby5uZXh0PWUpLGl8fChpPWUsYSgpKSxvPWV9fSxmdW5jdGlvbih0LGUscil7dmFyIG49cig4KSxpPXIoMTApLG89cigxMzUpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKG4odCksaShlKSYmZS5jb25zdHJ1Y3Rvcj09PXQpcmV0dXJuIGU7dmFyIHI9by5mKHQpO3JldHVybigwLHIucmVzb2x2ZSkoZSksci5wcm9taXNlfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoNCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dmFyIHI9bi5jb25zb2xlO3ImJnIuZXJyb3ImJigxPT09YXJndW1lbnRzLmxlbmd0aD9yLmVycm9yKHQpOnIuZXJyb3IodCxlKSl9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt0cnl7cmV0dXJue2Vycm9yOiExLHZhbHVlOnQoKX19Y2F0Y2godCl7cmV0dXJue2Vycm9yOiEwLHZhbHVlOnR9fX19LGZ1bmN0aW9uKHQsZSxyKXsoZnVuY3Rpb24odCxlKXshZnVuY3Rpb24odCxyKXtcInVzZSBzdHJpY3RcIjtpZighdC5zZXRJbW1lZGlhdGUpe3ZhciBuLGksbyxhLHMsdT0xLGM9e30sZj0hMSxsPXQuZG9jdW1lbnQsaD1PYmplY3QuZ2V0UHJvdG90eXBlT2YmJk9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtoPWgmJmguc2V0VGltZW91dD9oOnQsXCJbb2JqZWN0IHByb2Nlc3NdXCI9PT17fS50b1N0cmluZy5jYWxsKHQucHJvY2Vzcyk/bj1mdW5jdGlvbih0KXtlLm5leHRUaWNrKChmdW5jdGlvbigpe2QodCl9KSl9OiFmdW5jdGlvbigpe2lmKHQucG9zdE1lc3NhZ2UmJiF0LmltcG9ydFNjcmlwdHMpe3ZhciBlPSEwLHI9dC5vbm1lc3NhZ2U7cmV0dXJuIHQub25tZXNzYWdlPWZ1bmN0aW9uKCl7ZT0hMX0sdC5wb3N0TWVzc2FnZShcIlwiLFwiKlwiKSx0Lm9ubWVzc2FnZT1yLGV9fSgpP3QuTWVzc2FnZUNoYW5uZWw/KChvPW5ldyBNZXNzYWdlQ2hhbm5lbCkucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKHQpe2QodC5kYXRhKX0sbj1mdW5jdGlvbih0KXtvLnBvcnQyLnBvc3RNZXNzYWdlKHQpfSk6bCYmXCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIGwuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKT8oaT1sLmRvY3VtZW50RWxlbWVudCxuPWZ1bmN0aW9uKHQpe3ZhciBlPWwuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtlLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2QodCksZS5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxpLnJlbW92ZUNoaWxkKGUpLGU9bnVsbH0saS5hcHBlbmRDaGlsZChlKX0pOm49ZnVuY3Rpb24odCl7c2V0VGltZW91dChkLDAsdCl9OihhPVwic2V0SW1tZWRpYXRlJFwiK01hdGgucmFuZG9tKCkrXCIkXCIscz1mdW5jdGlvbihlKXtlLnNvdXJjZT09PXQmJlwic3RyaW5nXCI9PXR5cGVvZiBlLmRhdGEmJjA9PT1lLmRhdGEuaW5kZXhPZihhKSYmZCgrZS5kYXRhLnNsaWNlKGEubGVuZ3RoKSl9LHQuYWRkRXZlbnRMaXN0ZW5lcj90LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIscywhMSk6dC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLHMpLG49ZnVuY3Rpb24oZSl7dC5wb3N0TWVzc2FnZShhK2UsXCIqXCIpfSksaC5zZXRJbW1lZGlhdGU9ZnVuY3Rpb24odCl7XCJmdW5jdGlvblwiIT10eXBlb2YgdCYmKHQ9bmV3IEZ1bmN0aW9uKFwiXCIrdCkpO2Zvcih2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKSxyPTA7cjxlLmxlbmd0aDtyKyspZVtyXT1hcmd1bWVudHNbcisxXTt2YXIgaT17Y2FsbGJhY2s6dCxhcmdzOmV9O3JldHVybiBjW3VdPWksbih1KSx1Kyt9LGguY2xlYXJJbW1lZGlhdGU9cH1mdW5jdGlvbiBwKHQpe2RlbGV0ZSBjW3RdfWZ1bmN0aW9uIGQodCl7aWYoZilzZXRUaW1lb3V0KGQsMCx0KTtlbHNle3ZhciBlPWNbdF07aWYoZSl7Zj0hMDt0cnl7IWZ1bmN0aW9uKHQpe3ZhciBlPXQuY2FsbGJhY2sscj10LmFyZ3M7c3dpdGNoKHIubGVuZ3RoKXtjYXNlIDA6ZSgpO2JyZWFrO2Nhc2UgMTplKHJbMF0pO2JyZWFrO2Nhc2UgMjplKHJbMF0sclsxXSk7YnJlYWs7Y2FzZSAzOmUoclswXSxyWzFdLHJbMl0pO2JyZWFrO2RlZmF1bHQ6ZS5hcHBseSh2b2lkIDAscil9fShlKX1maW5hbGx5e3AodCksZj0hMX19fX19KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzZWxmP3ZvaWQgMD09PXQ/dGhpczp0OnNlbGYpfSkuY2FsbCh0aGlzLHIoMjEpLHIoMzgpKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuYnl0ZUxlbmd0aD1mdW5jdGlvbih0KXt2YXIgZT1jKHQpLHI9ZVswXSxuPWVbMV07cmV0dXJuIDMqKHIrbikvNC1ufSxlLnRvQnl0ZUFycmF5PWZ1bmN0aW9uKHQpe3ZhciBlLHIsbj1jKHQpLGE9blswXSxzPW5bMV0sdT1uZXcgbyhmdW5jdGlvbih0LGUscil7cmV0dXJuIDMqKGUrcikvNC1yfSgwLGEscykpLGY9MCxsPXM+MD9hLTQ6YTtmb3Iocj0wO3I8bDtyKz00KWU9aVt0LmNoYXJDb2RlQXQocildPDwxOHxpW3QuY2hhckNvZGVBdChyKzEpXTw8MTJ8aVt0LmNoYXJDb2RlQXQocisyKV08PDZ8aVt0LmNoYXJDb2RlQXQociszKV0sdVtmKytdPWU+PjE2JjI1NSx1W2YrK109ZT4+OCYyNTUsdVtmKytdPTI1NSZlOzI9PT1zJiYoZT1pW3QuY2hhckNvZGVBdChyKV08PDJ8aVt0LmNoYXJDb2RlQXQocisxKV0+PjQsdVtmKytdPTI1NSZlKTsxPT09cyYmKGU9aVt0LmNoYXJDb2RlQXQocildPDwxMHxpW3QuY2hhckNvZGVBdChyKzEpXTw8NHxpW3QuY2hhckNvZGVBdChyKzIpXT4+Mix1W2YrK109ZT4+OCYyNTUsdVtmKytdPTI1NSZlKTtyZXR1cm4gdX0sZS5mcm9tQnl0ZUFycmF5PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxyPXQubGVuZ3RoLGk9ciUzLG89W10sYT0wLHM9ci1pO2E8czthKz0xNjM4MylvLnB1c2goZih0LGEsYSsxNjM4Mz5zP3M6YSsxNjM4MykpOzE9PT1pPyhlPXRbci0xXSxvLnB1c2gobltlPj4yXStuW2U8PDQmNjNdK1wiPT1cIikpOjI9PT1pJiYoZT0odFtyLTJdPDw4KSt0W3ItMV0sby5wdXNoKG5bZT4+MTBdK25bZT4+NCY2M10rbltlPDwyJjYzXStcIj1cIikpO3JldHVybiBvLmpvaW4oXCJcIil9O2Zvcih2YXIgbj1bXSxpPVtdLG89XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXk/VWludDhBcnJheTpBcnJheSxhPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiLHM9MCx1PWEubGVuZ3RoO3M8dTsrK3MpbltzXT1hW3NdLGlbYS5jaGFyQ29kZUF0KHMpXT1zO2Z1bmN0aW9uIGModCl7dmFyIGU9dC5sZW5ndGg7aWYoZSU0PjApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNFwiKTt2YXIgcj10LmluZGV4T2YoXCI9XCIpO3JldHVybi0xPT09ciYmKHI9ZSksW3Iscj09PWU/MDo0LXIlNF19ZnVuY3Rpb24gZih0LGUscil7Zm9yKHZhciBpLG8sYT1bXSxzPWU7czxyO3MrPTMpaT0odFtzXTw8MTYmMTY3MTE2ODApKyh0W3MrMV08PDgmNjUyODApKygyNTUmdFtzKzJdKSxhLnB1c2goblsobz1pKT4+MTgmNjNdK25bbz4+MTImNjNdK25bbz4+NiY2M10rbls2MyZvXSk7cmV0dXJuIGEuam9pbihcIlwiKX1pW1wiLVwiLmNoYXJDb2RlQXQoMCldPTYyLGlbXCJfXCIuY2hhckNvZGVBdCgwKV09NjN9LGZ1bmN0aW9uKHQsZSl7ZS5yZWFkPWZ1bmN0aW9uKHQsZSxyLG4saSl7dmFyIG8sYSxzPTgqaS1uLTEsdT0oMTw8cyktMSxjPXU+PjEsZj0tNyxsPXI/aS0xOjAsaD1yPy0xOjEscD10W2UrbF07Zm9yKGwrPWgsbz1wJigxPDwtZiktMSxwPj49LWYsZis9cztmPjA7bz0yNTYqbyt0W2UrbF0sbCs9aCxmLT04KTtmb3IoYT1vJigxPDwtZiktMSxvPj49LWYsZis9bjtmPjA7YT0yNTYqYSt0W2UrbF0sbCs9aCxmLT04KTtpZigwPT09bylvPTEtYztlbHNle2lmKG89PT11KXJldHVybiBhP05hTjoxLzAqKHA/LTE6MSk7YSs9TWF0aC5wb3coMixuKSxvLT1jfXJldHVybihwPy0xOjEpKmEqTWF0aC5wb3coMixvLW4pfSxlLndyaXRlPWZ1bmN0aW9uKHQsZSxyLG4saSxvKXt2YXIgYSxzLHUsYz04Km8taS0xLGY9KDE8PGMpLTEsbD1mPj4xLGg9MjM9PT1pP01hdGgucG93KDIsLTI0KS1NYXRoLnBvdygyLC03Nyk6MCxwPW4/MDpvLTEsZD1uPzE6LTEsdj1lPDB8fDA9PT1lJiYxL2U8MD8xOjA7Zm9yKGU9TWF0aC5hYnMoZSksaXNOYU4oZSl8fGU9PT0xLzA/KHM9aXNOYU4oZSk/MTowLGE9Zik6KGE9TWF0aC5mbG9vcihNYXRoLmxvZyhlKS9NYXRoLkxOMiksZSoodT1NYXRoLnBvdygyLC1hKSk8MSYmKGEtLSx1Kj0yKSwoZSs9YStsPj0xP2gvdTpoKk1hdGgucG93KDIsMS1sKSkqdT49MiYmKGErKyx1Lz0yKSxhK2w+PWY/KHM9MCxhPWYpOmErbD49MT8ocz0oZSp1LTEpKk1hdGgucG93KDIsaSksYSs9bCk6KHM9ZSpNYXRoLnBvdygyLGwtMSkqTWF0aC5wb3coMixpKSxhPTApKTtpPj04O3RbcitwXT0yNTUmcyxwKz1kLHMvPTI1NixpLT04KTtmb3IoYT1hPDxpfHMsYys9aTtjPjA7dFtyK3BdPTI1NSZhLHArPWQsYS89MjU2LGMtPTgpO3RbcitwLWRdfD0xMjgqdn19LGZ1bmN0aW9uKHQsZSl7fSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cig1NikuQnVmZmVyLGk9cigxOTQpO3QuZXhwb3J0cz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuaGVhZD1udWxsLHRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTB9cmV0dXJuIHQucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24odCl7dmFyIGU9e2RhdGE6dCxuZXh0Om51bGx9O3RoaXMubGVuZ3RoPjA/dGhpcy50YWlsLm5leHQ9ZTp0aGlzLmhlYWQ9ZSx0aGlzLnRhaWw9ZSwrK3RoaXMubGVuZ3RofSx0LnByb3RvdHlwZS51bnNoaWZ0PWZ1bmN0aW9uKHQpe3ZhciBlPXtkYXRhOnQsbmV4dDp0aGlzLmhlYWR9OzA9PT10aGlzLmxlbmd0aCYmKHRoaXMudGFpbD1lKSx0aGlzLmhlYWQ9ZSwrK3RoaXMubGVuZ3RofSx0LnByb3RvdHlwZS5zaGlmdD1mdW5jdGlvbigpe2lmKDAhPT10aGlzLmxlbmd0aCl7dmFyIHQ9dGhpcy5oZWFkLmRhdGE7cmV0dXJuIDE9PT10aGlzLmxlbmd0aD90aGlzLmhlYWQ9dGhpcy50YWlsPW51bGw6dGhpcy5oZWFkPXRoaXMuaGVhZC5uZXh0LC0tdGhpcy5sZW5ndGgsdH19LHQucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTB9LHQucHJvdG90eXBlLmpvaW49ZnVuY3Rpb24odCl7aWYoMD09PXRoaXMubGVuZ3RoKXJldHVyblwiXCI7Zm9yKHZhciBlPXRoaXMuaGVhZCxyPVwiXCIrZS5kYXRhO2U9ZS5uZXh0OylyKz10K2UuZGF0YTtyZXR1cm4gcn0sdC5wcm90b3R5cGUuY29uY2F0PWZ1bmN0aW9uKHQpe2lmKDA9PT10aGlzLmxlbmd0aClyZXR1cm4gbi5hbGxvYygwKTtpZigxPT09dGhpcy5sZW5ndGgpcmV0dXJuIHRoaXMuaGVhZC5kYXRhO2Zvcih2YXIgZSxyLGksbz1uLmFsbG9jVW5zYWZlKHQ+Pj4wKSxhPXRoaXMuaGVhZCxzPTA7YTspZT1hLmRhdGEscj1vLGk9cyxlLmNvcHkocixpKSxzKz1hLmRhdGEubGVuZ3RoLGE9YS5uZXh0O3JldHVybiBvfSx0fSgpLGkmJmkuaW5zcGVjdCYmaS5pbnNwZWN0LmN1c3RvbSYmKHQuZXhwb3J0cy5wcm90b3R5cGVbaS5pbnNwZWN0LmN1c3RvbV09ZnVuY3Rpb24oKXt2YXIgdD1pLmluc3BlY3Qoe2xlbmd0aDp0aGlzLmxlbmd0aH0pO3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUrXCIgXCIrdH0pfSxmdW5jdGlvbih0LGUpe30sZnVuY3Rpb24odCxlLHIpeyhmdW5jdGlvbihlKXtmdW5jdGlvbiByKHQpe3RyeXtpZighZS5sb2NhbFN0b3JhZ2UpcmV0dXJuITF9Y2F0Y2godCl7cmV0dXJuITF9dmFyIHI9ZS5sb2NhbFN0b3JhZ2VbdF07cmV0dXJuIG51bGwhPXImJlwidHJ1ZVwiPT09U3RyaW5nKHIpLnRvTG93ZXJDYXNlKCl9dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYocihcIm5vRGVwcmVjYXRpb25cIikpcmV0dXJuIHQ7dmFyIG49ITE7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoIW4pe2lmKHIoXCJ0aHJvd0RlcHJlY2F0aW9uXCIpKXRocm93IG5ldyBFcnJvcihlKTtyKFwidHJhY2VEZXByZWNhdGlvblwiKT9jb25zb2xlLnRyYWNlKGUpOmNvbnNvbGUud2FybihlKSxuPSEwfXJldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19fSkuY2FsbCh0aGlzLHIoMjEpKX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz1vO3ZhciBuPXIoMTQyKSxpPXIoMzkpO2Z1bmN0aW9uIG8odCl7aWYoISh0aGlzIGluc3RhbmNlb2YgbykpcmV0dXJuIG5ldyBvKHQpO24uY2FsbCh0aGlzLHQpfWkuaW5oZXJpdHM9cigyOSksaS5pbmhlcml0cyhvLG4pLG8ucHJvdG90eXBlLl90cmFuc2Zvcm09ZnVuY3Rpb24odCxlLHIpe3IobnVsbCx0KX19LGZ1bmN0aW9uKHQsZSxyKXt0LmV4cG9ydHM9cig5NSl9LGZ1bmN0aW9uKHQsZSxyKXt0LmV4cG9ydHM9cigyMyl9LGZ1bmN0aW9uKHQsZSxyKXt0LmV4cG9ydHM9cig5NCkuVHJhbnNmb3JtfSxmdW5jdGlvbih0LGUscil7dC5leHBvcnRzPXIoOTQpLlBhc3NUaHJvdWdofSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoNjApLG89cigxMiksYT1yKDM2KSxzPVtdLmpvaW4sdT1pIT1PYmplY3QsYz1hKFwiam9pblwiLFwiLFwiKTtuKHt0YXJnZXQ6XCJBcnJheVwiLHByb3RvOiEwLGZvcmNlZDp1fHxjfSx7am9pbjpmdW5jdGlvbih0KXtyZXR1cm4gcy5jYWxsKG8odGhpcyksdm9pZCAwPT09dD9cIixcIjp0KX19KX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuLTEhPT1GdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpfX0sZnVuY3Rpb24odCxlLHIpe3ZhciBuPXIoODApO2Z1bmN0aW9uIGkoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19ZnVuY3Rpb24gbyhlLHIsYSl7cmV0dXJuIGkoKT90LmV4cG9ydHM9bz1SZWZsZWN0LmNvbnN0cnVjdDp0LmV4cG9ydHM9bz1mdW5jdGlvbih0LGUscil7dmFyIGk9W251bGxdO2kucHVzaC5hcHBseShpLGUpO3ZhciBvPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KHQsaSkpO3JldHVybiByJiZuKG8sci5wcm90b3R5cGUpLG99LG8uYXBwbHkobnVsbCxhcmd1bWVudHMpfXQuZXhwb3J0cz1vfSxmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49cigyKSxpPXIoNjYpLmluZGV4T2Ysbz1yKDM2KSxhPVtdLmluZGV4T2Yscz0hIWEmJjEvWzFdLmluZGV4T2YoMSwtMCk8MCx1PW8oXCJpbmRleE9mXCIpO24oe3RhcmdldDpcIkFycmF5XCIscHJvdG86ITAsZm9yY2VkOnN8fHV9LHtpbmRleE9mOmZ1bmN0aW9uKHQpe3JldHVybiBzP2EuYXBwbHkodGhpcyxhcmd1bWVudHMpfHwwOmkodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3IucihlKTtyKDk4KSxyKDE0OSkscigxNTApLHIoNTEpLHIoNTIpLHIoMzUpLHIoNzQpLHIoNzUpLHIoNzkpO3ZhciBuPXIoMCksaT1yLm4obiksbz0ocigyOCkscigxKSksYT1yLm4obykscz1yKDE4KSx1PXIubihzKSxjPXIoMzApLGY9ci5uKGMpLGw9cig0MCksaD1yLm4obCkscD1yKDE2KSxkPXIubihwKSx2PXIoNTcpLGc9ci5uKHYpLHk9cig0MSksYj1yLm4oeSksXz0ocig4MSkscig4NCkscig4NSkscig4NikscigzNykscig4NykscigxNTcpLHIoMTU4KSxyKDE1OSkscigxNjEpLHIoMTYyKSxyKDEyNCkscigxNjMpLHIoMTY1KSxyKDEyNikscigxMjkpLHIoODkpLHIoOTApLHIoNDIpKSxtPXIubihfKSx3PXIoOSkseD1yLm4odyksaz1yKDE0MyksRT1yLm4oayksUz1yKDU4KSxqPXIubihTKSxSPShyKDE3NCkscigxMzApLHIoMTMxKSxyKDE3NiksZnVuY3Rpb24odCl7Zm9yKDt0LmVuZHNXaXRoKFwiL1wiKTspdD10LnNsaWNlKDAsLTEpO3JldHVybiB0fSksQz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5zcGxpdChcIi9cIikscj1lWzBdLG49MCxpPTE7aTxlLmxlbmd0aC0xO2krKyl7bj1pLFwiXCI9PT1lW2ldJiYocis9XCIvXCIpO2JyZWFrfXJldHVybiByPXIrXCIvXCIrZVtuKzFdK1wiL1wifSxJPWZ1bmN0aW9uKHQpe3JldHVybih0PVIodCkpLnN1YnN0cmluZygwLHQubGFzdEluZGV4T2YoXCIvXCIpKzEpfSxPPWZ1bmN0aW9uKHQpe3JldHVybih0PVIodCkpLnN1YnN0cih0Lmxhc3RJbmRleE9mKFwiL1wiKSsxKX0sVD1mdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KHQpLHI9MDtyPHQ7cisrKWVbcl09YXJndW1lbnRzW3JdO3JldHVybiBlLmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gdC5lbmRzV2l0aChcIi9cIil9KSl9LFA9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPW5ldyBBcnJheSh0KSxyPTA7cjx0O3IrKyllW3JdPWFyZ3VtZW50c1tyXTtyZXR1cm4gZS5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIXQuZW5kc1dpdGgoXCIvXCIpfSkpfSxBPXtDT05UQUlORVI6JzxodHRwOi8vd3d3LnczLm9yZy9ucy9sZHAjQmFzaWNDb250YWluZXI+OyByZWw9XCJ0eXBlXCInLFJFU09VUkNFOic8aHR0cDovL3d3dy53My5vcmcvbnMvbGRwI1Jlc291cmNlPjsgcmVsPVwidHlwZVwiJ30sTD0ocig5MSkscig5NikpLEY9ci5uKEwpLE09cig2KTtjb25zdHtyZGY6Tix4c2Q6Qn09TS5hO3ZhciBELFUscT0wO2NsYXNzIEd7Y29uc3RydWN0b3IodCl7dGhpcy5pZD10fWdldCB2YWx1ZSgpe3JldHVybiB0aGlzLmlkfWVxdWFscyh0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIEc/dGhpcy5pZD09PXQuaWQ6ISF0JiZ0aGlzLnRlcm1UeXBlPT09dC50ZXJtVHlwZSYmdGhpcy52YWx1ZT09PXQudmFsdWV9dG9KU09OKCl7cmV0dXJue3Rlcm1UeXBlOnRoaXMudGVybVR5cGUsdmFsdWU6dGhpcy52YWx1ZX19fWNsYXNzIFcgZXh0ZW5kcyBHe2dldCB0ZXJtVHlwZSgpe3JldHVyblwiTmFtZWROb2RlXCJ9fWNsYXNzIHogZXh0ZW5kcyBHe2dldCB0ZXJtVHlwZSgpe3JldHVyblwiTGl0ZXJhbFwifWdldCB2YWx1ZSgpe3JldHVybiB0aGlzLmlkLnN1YnN0cmluZygxLHRoaXMuaWQubGFzdEluZGV4T2YoJ1wiJykpfWdldCBsYW5ndWFnZSgpe3ZhciB0PXRoaXMuaWQsZT10Lmxhc3RJbmRleE9mKCdcIicpKzE7cmV0dXJuIGU8dC5sZW5ndGgmJlwiQFwiPT09dFtlKytdP3Quc3Vic3RyKGUpLnRvTG93ZXJDYXNlKCk6XCJcIn1nZXQgZGF0YXR5cGUoKXtyZXR1cm4gbmV3IFcodGhpcy5kYXRhdHlwZVN0cmluZyl9Z2V0IGRhdGF0eXBlU3RyaW5nKCl7dmFyIHQsZT10aGlzLmlkLHI9ZS5sYXN0SW5kZXhPZignXCInKSsxO3JldHVybiByPGUubGVuZ3RoJiZcIl5cIj09PSh0PWVbcl0pP2Uuc3Vic3RyKHIrMik6XCJAXCIhPT10P0Iuc3RyaW5nOk4ubGFuZ1N0cmluZ31lcXVhbHModCl7cmV0dXJuIHQgaW5zdGFuY2VvZiB6P3RoaXMuaWQ9PT10LmlkOiEhdCYmISF0LmRhdGF0eXBlJiZ0aGlzLnRlcm1UeXBlPT09dC50ZXJtVHlwZSYmdGhpcy52YWx1ZT09PXQudmFsdWUmJnRoaXMubGFuZ3VhZ2U9PT10Lmxhbmd1YWdlJiZ0aGlzLmRhdGF0eXBlLnZhbHVlPT09dC5kYXRhdHlwZS52YWx1ZX10b0pTT04oKXtyZXR1cm57dGVybVR5cGU6dGhpcy50ZXJtVHlwZSx2YWx1ZTp0aGlzLnZhbHVlLGxhbmd1YWdlOnRoaXMubGFuZ3VhZ2UsZGF0YXR5cGU6e3Rlcm1UeXBlOlwiTmFtZWROb2RlXCIsdmFsdWU6dGhpcy5kYXRhdHlwZVN0cmluZ319fX1jbGFzcyBZIGV4dGVuZHMgR3tjb25zdHJ1Y3Rvcih0KXtzdXBlcihcIl86XCIrdCl9Z2V0IHRlcm1UeXBlKCl7cmV0dXJuXCJCbGFua05vZGVcIn1nZXQgdmFsdWUoKXtyZXR1cm4gdGhpcy5pZC5zdWJzdHIoMil9fWNsYXNzIFEgZXh0ZW5kcyBHe2NvbnN0cnVjdG9yKHQpe3N1cGVyKFwiP1wiK3QpfWdldCB0ZXJtVHlwZSgpe3JldHVyblwiVmFyaWFibGVcIn1nZXQgdmFsdWUoKXtyZXR1cm4gdGhpcy5pZC5zdWJzdHIoMSl9fWNsYXNzICQgZXh0ZW5kcyBHe2NvbnN0cnVjdG9yKCl7cmV0dXJuIHN1cGVyKFwiXCIpLFV8fHRoaXN9Z2V0IHRlcm1UeXBlKCl7cmV0dXJuXCJEZWZhdWx0R3JhcGhcIn1lcXVhbHModCl7cmV0dXJuIHRoaXM9PT10fHwhIXQmJnRoaXMudGVybVR5cGU9PT10LnRlcm1UeXBlfX1VPW5ldyAkO2NsYXNzIEh7Y29uc3RydWN0b3IodCxlLHIsbil7dGhpcy5zdWJqZWN0PXQsdGhpcy5wcmVkaWNhdGU9ZSx0aGlzLm9iamVjdD1yLHRoaXMuZ3JhcGg9bnx8VX10b0pTT04oKXtyZXR1cm57c3ViamVjdDp0aGlzLnN1YmplY3QudG9KU09OKCkscHJlZGljYXRlOnRoaXMucHJlZGljYXRlLnRvSlNPTigpLG9iamVjdDp0aGlzLm9iamVjdC50b0pTT04oKSxncmFwaDp0aGlzLmdyYXBoLnRvSlNPTigpfX1lcXVhbHModCl7cmV0dXJuISF0JiZ0aGlzLnN1YmplY3QuZXF1YWxzKHQuc3ViamVjdCkmJnRoaXMucHJlZGljYXRlLmVxdWFscyh0LnByZWRpY2F0ZSkmJnRoaXMub2JqZWN0LmVxdWFscyh0Lm9iamVjdCkmJnRoaXMuZ3JhcGguZXF1YWxzKHQuZ3JhcGgpfX12YXIgSz1EPXtuYW1lZE5vZGU6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBXKHQpfSxibGFua05vZGU6ZnVuY3Rpb24odCl7dHx8KHQ9XCJuMy1cIitxKyspO3JldHVybiBuZXcgWSh0KX0sdmFyaWFibGU6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBRKHQpfSxsaXRlcmFsOmZ1bmN0aW9uKHQsZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIG5ldyB6KCdcIicrdCsnXCJAJytlLnRvTG93ZXJDYXNlKCkpO2xldCByPWU/ZS52YWx1ZTpcIlwiO1wiXCI9PT1yJiYoXCJib29sZWFuXCI9PXR5cGVvZiB0P3I9Qi5ib29sZWFuOlwibnVtYmVyXCI9PXR5cGVvZiB0JiYoTnVtYmVyLmlzRmluaXRlKHQpP3I9TnVtYmVyLmlzSW50ZWdlcih0KT9CLmludGVnZXI6Qi5kb3VibGU6KHI9Qi5kb3VibGUsTnVtYmVyLmlzTmFOKHQpfHwodD10PjA/XCJJTkZcIjpcIi1JTkZcIikpKSk7cmV0dXJuXCJcIj09PXJ8fHI9PT1CLnN0cmluZz9uZXcgeignXCInK3QrJ1wiJyk6bmV3IHooJ1wiJyt0KydcIl5eJytyKX0sZGVmYXVsdEdyYXBoOmZ1bmN0aW9uKCl7cmV0dXJuIFV9LHF1YWQ6Vix0cmlwbGU6VixpbnRlcm5hbDp7VGVybTpHLE5hbWVkTm9kZTpXLEJsYW5rTm9kZTpZLFZhcmlhYmxlOlEsTGl0ZXJhbDp6LERlZmF1bHRHcmFwaDokLFF1YWQ6SCxUcmlwbGU6SCxmcm9tSWQ6ZnVuY3Rpb24odCxlKXtpZihlPWV8fEQsIXQpcmV0dXJuIGUuZGVmYXVsdEdyYXBoKCk7c3dpdGNoKHRbMF0pe2Nhc2VcIl9cIjpyZXR1cm4gZS5ibGFua05vZGUodC5zdWJzdHIoMikpO2Nhc2VcIj9cIjpyZXR1cm4gZS52YXJpYWJsZSh0LnN1YnN0cigxKSk7Y2FzZSdcIic6aWYoZT09PUQpcmV0dXJuIG5ldyB6KHQpO2lmKCdcIic9PT10W3QubGVuZ3RoLTFdKXJldHVybiBlLmxpdGVyYWwodC5zdWJzdHIoMSx0Lmxlbmd0aC0yKSk7dmFyIHI9dC5sYXN0SW5kZXhPZignXCInLHQubGVuZ3RoLTEpO3JldHVybiBlLmxpdGVyYWwodC5zdWJzdHIoMSxyLTEpLFwiQFwiPT09dFtyKzFdP3Quc3Vic3RyKHIrMik6ZS5uYW1lZE5vZGUodC5zdWJzdHIociszKSkpO2RlZmF1bHQ6cmV0dXJuIGUubmFtZWROb2RlKHQpfX0sdG9JZDpmdW5jdGlvbih0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gdDtpZih0IGluc3RhbmNlb2YgRylyZXR1cm4gdC5pZDtpZighdClyZXR1cm4gVS5pZDtzd2l0Y2godC50ZXJtVHlwZSl7Y2FzZVwiTmFtZWROb2RlXCI6cmV0dXJuIHQudmFsdWU7Y2FzZVwiQmxhbmtOb2RlXCI6cmV0dXJuXCJfOlwiK3QudmFsdWU7Y2FzZVwiVmFyaWFibGVcIjpyZXR1cm5cIj9cIit0LnZhbHVlO2Nhc2VcIkRlZmF1bHRHcmFwaFwiOnJldHVyblwiXCI7Y2FzZVwiTGl0ZXJhbFwiOnJldHVybidcIicrdC52YWx1ZSsnXCInKyh0Lmxhbmd1YWdlP1wiQFwiK3QubGFuZ3VhZ2U6dC5kYXRhdHlwZSYmdC5kYXRhdHlwZS52YWx1ZSE9PUIuc3RyaW5nP1wiXl5cIit0LmRhdGF0eXBlLnZhbHVlOlwiXCIpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCB0ZXJtVHlwZTogXCIrdC50ZXJtVHlwZSl9fX19O2Z1bmN0aW9uIFYodCxlLHIsbil7cmV0dXJuIG5ldyBIKHQsZSxyLG4pfXZhciBaPXIoMTQ1KSxKPTAsWD0wO2NsYXNzIHR0e2NvbnN0cnVjdG9yKHQpe3RoaXMuX2NvbnRleHRTdGFjaz1bXSx0aGlzLl9ncmFwaD1udWxsLHQ9dHx8e30sdGhpcy5fc2V0QmFzZSh0LmJhc2VJUkkpLHQuZmFjdG9yeSYmcnQodGhpcyx0LmZhY3RvcnkpO3ZhciBlPVwic3RyaW5nXCI9PXR5cGVvZiB0LmZvcm1hdD90LmZvcm1hdC5tYXRjaCgvXFx3KiQvKVswXS50b0xvd2VyQ2FzZSgpOlwiXCIscj1cInR1cnRsZVwiPT09ZSxuPVwidHJpZ1wiPT09ZSxpPS90cmlwbGUvLnRlc3QoZSksbz0vcXVhZC8udGVzdChlKSxhPXRoaXMuX24zTW9kZT0vbjMvLnRlc3QoZSkscz1pfHxvOyh0aGlzLl9zdXBwb3J0c05hbWVkR3JhcGhzPSEocnx8YSkpfHwodGhpcy5fcmVhZFByZWRpY2F0ZU9yTmFtZWRHcmFwaD10aGlzLl9yZWFkUHJlZGljYXRlKSx0aGlzLl9zdXBwb3J0c1F1YWRzPSEocnx8bnx8aXx8YSkscyYmKHRoaXMuX3Jlc29sdmVSZWxhdGl2ZUlSST1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbH0pLHRoaXMuX2JsYW5rTm9kZVByZWZpeD1cInN0cmluZ1wiIT10eXBlb2YgdC5ibGFua05vZGVQcmVmaXg/XCJcIjp0LmJsYW5rTm9kZVByZWZpeC5yZXBsYWNlKC9eKD8hXzopLyxcIl86XCIpLHRoaXMuX2xleGVyPXQubGV4ZXJ8fG5ldyBaLmEoe2xpbmVNb2RlOnMsbjM6YX0pLHRoaXMuX2V4cGxpY2l0UXVhbnRpZmllcnM9ISF0LmV4cGxpY2l0UXVhbnRpZmllcnN9c3RhdGljIF9yZXNldEJsYW5rTm9kZUlkcygpe0o9WD0wfV9ibGFuaygpe3JldHVybiB0aGlzLl9ibGFua05vZGUoXCJiXCIrWCsrKX1fc2V0QmFzZSh0KXtpZih0KXt2YXIgZT10LmluZGV4T2YoXCIjXCIpO2U+PTAmJih0PXQuc3Vic3RyKDAsZSkpLHRoaXMuX2Jhc2U9dCx0aGlzLl9iYXNlUGF0aD10LmluZGV4T2YoXCIvXCIpPDA/dDp0LnJlcGxhY2UoL1teXFwvP10qKD86XFw/LiopPyQvLFwiXCIpLHQ9dC5tYXRjaCgvXig/OihbYS16XVthLXowLTkrLi1dKjopKT8oPzpcXC9cXC9bXlxcL10qKT8vaSksdGhpcy5fYmFzZVJvb3Q9dFswXSx0aGlzLl9iYXNlU2NoZW1lPXRbMV19ZWxzZSB0aGlzLl9iYXNlPVwiXCIsdGhpcy5fYmFzZVBhdGg9XCJcIn1fc2F2ZUNvbnRleHQodCxlLHIsbixpKXt2YXIgbz10aGlzLl9uM01vZGU7dGhpcy5fY29udGV4dFN0YWNrLnB1c2goe3N1YmplY3Q6cixwcmVkaWNhdGU6bixvYmplY3Q6aSxncmFwaDplLHR5cGU6dCxpbnZlcnNlOiEhbyYmdGhpcy5faW52ZXJzZVByZWRpY2F0ZSxibGFua1ByZWZpeDpvP3RoaXMuX3ByZWZpeGVzLl86XCJcIixxdWFudGlmaWVkOm8/dGhpcy5fcXVhbnRpZmllZDpudWxsfSksbyYmKHRoaXMuX2ludmVyc2VQcmVkaWNhdGU9ITEsdGhpcy5fcHJlZml4ZXMuXz10aGlzLl9ncmFwaD90aGlzLl9ncmFwaC5pZC5zdWJzdHIoMikrXCIuXCI6XCIuXCIsdGhpcy5fcXVhbnRpZmllZD1PYmplY3QuY3JlYXRlKHRoaXMuX3F1YW50aWZpZWQpKX1fcmVzdG9yZUNvbnRleHQoKXt2YXIgdD10aGlzLl9jb250ZXh0U3RhY2sucG9wKCksZT10aGlzLl9uM01vZGU7dGhpcy5fc3ViamVjdD10LnN1YmplY3QsdGhpcy5fcHJlZGljYXRlPXQucHJlZGljYXRlLHRoaXMuX29iamVjdD10Lm9iamVjdCx0aGlzLl9ncmFwaD10LmdyYXBoLGUmJih0aGlzLl9pbnZlcnNlUHJlZGljYXRlPXQuaW52ZXJzZSx0aGlzLl9wcmVmaXhlcy5fPXQuYmxhbmtQcmVmaXgsdGhpcy5fcXVhbnRpZmllZD10LnF1YW50aWZpZWQpfV9yZWFkSW5Ub3BDb250ZXh0KHQpe3N3aXRjaCh0LnR5cGUpe2Nhc2VcImVvZlwiOnJldHVybiBudWxsIT09dGhpcy5fZ3JhcGg/dGhpcy5fZXJyb3IoXCJVbmNsb3NlZCBncmFwaFwiLHQpOihkZWxldGUgdGhpcy5fcHJlZml4ZXMuXyx0aGlzLl9jYWxsYmFjayhudWxsLG51bGwsdGhpcy5fcHJlZml4ZXMpKTtjYXNlXCJQUkVGSVhcIjp0aGlzLl9zcGFycWxTdHlsZT0hMDtjYXNlXCJAcHJlZml4XCI6cmV0dXJuIHRoaXMuX3JlYWRQcmVmaXg7Y2FzZVwiQkFTRVwiOnRoaXMuX3NwYXJxbFN0eWxlPSEwO2Nhc2VcIkBiYXNlXCI6cmV0dXJuIHRoaXMuX3JlYWRCYXNlSVJJO2Nhc2VcIntcIjppZih0aGlzLl9zdXBwb3J0c05hbWVkR3JhcGhzKXJldHVybiB0aGlzLl9ncmFwaD1cIlwiLHRoaXMuX3N1YmplY3Q9bnVsbCx0aGlzLl9yZWFkU3ViamVjdDtjYXNlXCJHUkFQSFwiOmlmKHRoaXMuX3N1cHBvcnRzTmFtZWRHcmFwaHMpcmV0dXJuIHRoaXMuX3JlYWROYW1lZEdyYXBoTGFiZWw7ZGVmYXVsdDpyZXR1cm4gdGhpcy5fcmVhZFN1YmplY3QodCl9fV9yZWFkRW50aXR5KHQsZSl7dmFyIHI7c3dpdGNoKHQudHlwZSl7Y2FzZVwiSVJJXCI6Y2FzZVwidHlwZUlSSVwiOnZhciBuPXRoaXMuX3Jlc29sdmVJUkkodC52YWx1ZSk7aWYobnVsbD09PW4pcmV0dXJuIHRoaXMuX2Vycm9yKFwiSW52YWxpZCBJUklcIix0KTtyPXRoaXMuX25hbWVkTm9kZShuKTticmVhaztjYXNlXCJ0eXBlXCI6Y2FzZVwicHJlZml4ZWRcIjp2YXIgaT10aGlzLl9wcmVmaXhlc1t0LnByZWZpeF07aWYodm9pZCAwPT09aSlyZXR1cm4gdGhpcy5fZXJyb3IoJ1VuZGVmaW5lZCBwcmVmaXggXCInK3QucHJlZml4Kyc6XCInLHQpO3I9dGhpcy5fbmFtZWROb2RlKGkrdC52YWx1ZSk7YnJlYWs7Y2FzZVwiYmxhbmtcIjpyPXRoaXMuX2JsYW5rTm9kZSh0aGlzLl9wcmVmaXhlc1t0LnByZWZpeF0rdC52YWx1ZSk7YnJlYWs7Y2FzZVwidmFyXCI6cj10aGlzLl92YXJpYWJsZSh0LnZhbHVlLnN1YnN0cigxKSk7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gdGhpcy5fZXJyb3IoXCJFeHBlY3RlZCBlbnRpdHkgYnV0IGdvdCBcIit0LnR5cGUsdCl9cmV0dXJuIWUmJnRoaXMuX24zTW9kZSYmci5pZCBpbiB0aGlzLl9xdWFudGlmaWVkJiYocj10aGlzLl9xdWFudGlmaWVkW3IuaWRdKSxyfV9yZWFkU3ViamVjdCh0KXtzd2l0Y2godGhpcy5fcHJlZGljYXRlPW51bGwsdC50eXBlKXtjYXNlXCJbXCI6cmV0dXJuIHRoaXMuX3NhdmVDb250ZXh0KFwiYmxhbmtcIix0aGlzLl9ncmFwaCx0aGlzLl9zdWJqZWN0PXRoaXMuX2JsYW5rKCksbnVsbCxudWxsKSx0aGlzLl9yZWFkQmxhbmtOb2RlSGVhZDtjYXNlXCIoXCI6cmV0dXJuIHRoaXMuX3NhdmVDb250ZXh0KFwibGlzdFwiLHRoaXMuX2dyYXBoLHRoaXMuUkRGX05JTCxudWxsLG51bGwpLHRoaXMuX3N1YmplY3Q9bnVsbCx0aGlzLl9yZWFkTGlzdEl0ZW07Y2FzZVwie1wiOnJldHVybiB0aGlzLl9uM01vZGU/KHRoaXMuX3NhdmVDb250ZXh0KFwiZm9ybXVsYVwiLHRoaXMuX2dyYXBoLHRoaXMuX2dyYXBoPXRoaXMuX2JsYW5rKCksbnVsbCxudWxsKSx0aGlzLl9yZWFkU3ViamVjdCk6dGhpcy5fZXJyb3IoXCJVbmV4cGVjdGVkIGdyYXBoXCIsdCk7Y2FzZVwifVwiOnJldHVybiB0aGlzLl9yZWFkUHVuY3R1YXRpb24odCk7Y2FzZVwiQGZvclNvbWVcIjpyZXR1cm4gdGhpcy5fbjNNb2RlPyh0aGlzLl9zdWJqZWN0PW51bGwsdGhpcy5fcHJlZGljYXRlPXRoaXMuTjNfRk9SU09NRSx0aGlzLl9xdWFudGlmaWVyPXRoaXMuX2JsYW5rTm9kZSx0aGlzLl9yZWFkUXVhbnRpZmllckxpc3QpOnRoaXMuX2Vycm9yKCdVbmV4cGVjdGVkIFwiQGZvclNvbWVcIicsdCk7Y2FzZVwiQGZvckFsbFwiOnJldHVybiB0aGlzLl9uM01vZGU/KHRoaXMuX3N1YmplY3Q9bnVsbCx0aGlzLl9wcmVkaWNhdGU9dGhpcy5OM19GT1JBTEwsdGhpcy5fcXVhbnRpZmllcj10aGlzLl92YXJpYWJsZSx0aGlzLl9yZWFkUXVhbnRpZmllckxpc3QpOnRoaXMuX2Vycm9yKCdVbmV4cGVjdGVkIFwiQGZvckFsbFwiJyx0KTtkZWZhdWx0OmlmKHZvaWQgMD09PSh0aGlzLl9zdWJqZWN0PXRoaXMuX3JlYWRFbnRpdHkodCkpKXJldHVybjtpZih0aGlzLl9uM01vZGUpcmV0dXJuIHRoaXMuX2dldFBhdGhSZWFkZXIodGhpcy5fcmVhZFByZWRpY2F0ZU9yTmFtZWRHcmFwaCl9cmV0dXJuIHRoaXMuX3JlYWRQcmVkaWNhdGVPck5hbWVkR3JhcGh9X3JlYWRQcmVkaWNhdGUodCl7dmFyIGU9dC50eXBlO3N3aXRjaChlKXtjYXNlXCJpbnZlcnNlXCI6dGhpcy5faW52ZXJzZVByZWRpY2F0ZT0hMDtjYXNlXCJhYmJyZXZpYXRpb25cIjp0aGlzLl9wcmVkaWNhdGU9dGhpcy5BQkJSRVZJQVRJT05TW3QudmFsdWVdO2JyZWFrO2Nhc2VcIi5cIjpjYXNlXCJdXCI6Y2FzZVwifVwiOnJldHVybiBudWxsPT09dGhpcy5fcHJlZGljYXRlP3RoaXMuX2Vycm9yKFwiVW5leHBlY3RlZCBcIitlLHQpOih0aGlzLl9zdWJqZWN0PW51bGwsXCJdXCI9PT1lP3RoaXMuX3JlYWRCbGFua05vZGVUYWlsKHQpOnRoaXMuX3JlYWRQdW5jdHVhdGlvbih0KSk7Y2FzZVwiO1wiOnJldHVybiBudWxsIT09dGhpcy5fcHJlZGljYXRlP3RoaXMuX3JlYWRQcmVkaWNhdGU6dGhpcy5fZXJyb3IoXCJFeHBlY3RlZCBwcmVkaWNhdGUgYnV0IGdvdCA7XCIsdCk7Y2FzZVwiYmxhbmtcIjppZighdGhpcy5fbjNNb2RlKXJldHVybiB0aGlzLl9lcnJvcihcIkRpc2FsbG93ZWQgYmxhbmsgbm9kZSBhcyBwcmVkaWNhdGVcIix0KTtkZWZhdWx0OmlmKHZvaWQgMD09PSh0aGlzLl9wcmVkaWNhdGU9dGhpcy5fcmVhZEVudGl0eSh0KSkpcmV0dXJufXJldHVybiB0aGlzLl9yZWFkT2JqZWN0fV9yZWFkT2JqZWN0KHQpe3N3aXRjaCh0LnR5cGUpe2Nhc2VcImxpdGVyYWxcIjppZigwPT09dC5wcmVmaXgubGVuZ3RoKXJldHVybiB0aGlzLl9saXRlcmFsVmFsdWU9dC52YWx1ZSx0aGlzLl9yZWFkRGF0YVR5cGVPckxhbmc7dGhpcy5fb2JqZWN0PXRoaXMuX2xpdGVyYWwodC52YWx1ZSx0aGlzLl9uYW1lZE5vZGUodC5wcmVmaXgpKTticmVhaztjYXNlXCJbXCI6cmV0dXJuIHRoaXMuX3NhdmVDb250ZXh0KFwiYmxhbmtcIix0aGlzLl9ncmFwaCx0aGlzLl9zdWJqZWN0LHRoaXMuX3ByZWRpY2F0ZSx0aGlzLl9zdWJqZWN0PXRoaXMuX2JsYW5rKCkpLHRoaXMuX3JlYWRCbGFua05vZGVIZWFkO2Nhc2VcIihcIjpyZXR1cm4gdGhpcy5fc2F2ZUNvbnRleHQoXCJsaXN0XCIsdGhpcy5fZ3JhcGgsdGhpcy5fc3ViamVjdCx0aGlzLl9wcmVkaWNhdGUsdGhpcy5SREZfTklMKSx0aGlzLl9zdWJqZWN0PW51bGwsdGhpcy5fcmVhZExpc3RJdGVtO2Nhc2VcIntcIjpyZXR1cm4gdGhpcy5fbjNNb2RlPyh0aGlzLl9zYXZlQ29udGV4dChcImZvcm11bGFcIix0aGlzLl9ncmFwaCx0aGlzLl9zdWJqZWN0LHRoaXMuX3ByZWRpY2F0ZSx0aGlzLl9ncmFwaD10aGlzLl9ibGFuaygpKSx0aGlzLl9yZWFkU3ViamVjdCk6dGhpcy5fZXJyb3IoXCJVbmV4cGVjdGVkIGdyYXBoXCIsdCk7ZGVmYXVsdDppZih2b2lkIDA9PT0odGhpcy5fb2JqZWN0PXRoaXMuX3JlYWRFbnRpdHkodCkpKXJldHVybjtpZih0aGlzLl9uM01vZGUpcmV0dXJuIHRoaXMuX2dldFBhdGhSZWFkZXIodGhpcy5fZ2V0Q29udGV4dEVuZFJlYWRlcigpKX1yZXR1cm4gdGhpcy5fZ2V0Q29udGV4dEVuZFJlYWRlcigpfV9yZWFkUHJlZGljYXRlT3JOYW1lZEdyYXBoKHQpe3JldHVyblwie1wiPT09dC50eXBlP3RoaXMuX3JlYWRHcmFwaCh0KTp0aGlzLl9yZWFkUHJlZGljYXRlKHQpfV9yZWFkR3JhcGgodCl7cmV0dXJuXCJ7XCIhPT10LnR5cGU/dGhpcy5fZXJyb3IoXCJFeHBlY3RlZCBncmFwaCBidXQgZ290IFwiK3QudHlwZSx0KToodGhpcy5fZ3JhcGg9dGhpcy5fc3ViamVjdCx0aGlzLl9zdWJqZWN0PW51bGwsdGhpcy5fcmVhZFN1YmplY3QpfV9yZWFkQmxhbmtOb2RlSGVhZCh0KXtyZXR1cm5cIl1cIj09PXQudHlwZT8odGhpcy5fc3ViamVjdD1udWxsLHRoaXMuX3JlYWRCbGFua05vZGVUYWlsKHQpKToodGhpcy5fcHJlZGljYXRlPW51bGwsdGhpcy5fcmVhZFByZWRpY2F0ZSh0KSl9X3JlYWRCbGFua05vZGVUYWlsKHQpe2lmKFwiXVwiIT09dC50eXBlKXJldHVybiB0aGlzLl9yZWFkQmxhbmtOb2RlUHVuY3R1YXRpb24odCk7bnVsbCE9PXRoaXMuX3N1YmplY3QmJnRoaXMuX2VtaXQodGhpcy5fc3ViamVjdCx0aGlzLl9wcmVkaWNhdGUsdGhpcy5fb2JqZWN0LHRoaXMuX2dyYXBoKTt2YXIgZT1udWxsPT09dGhpcy5fcHJlZGljYXRlO3JldHVybiB0aGlzLl9yZXN0b3JlQ29udGV4dCgpLG51bGw9PT10aGlzLl9vYmplY3Q/ZT90aGlzLl9yZWFkUHJlZGljYXRlT3JOYW1lZEdyYXBoOnRoaXMuX3JlYWRQcmVkaWNhdGVBZnRlckJsYW5rOnRoaXMuX2dldENvbnRleHRFbmRSZWFkZXIoKX1fcmVhZFByZWRpY2F0ZUFmdGVyQmxhbmsodCl7c3dpdGNoKHQudHlwZSl7Y2FzZVwiLlwiOmNhc2VcIn1cIjpyZXR1cm4gdGhpcy5fc3ViamVjdD1udWxsLHRoaXMuX3JlYWRQdW5jdHVhdGlvbih0KTtkZWZhdWx0OnJldHVybiB0aGlzLl9yZWFkUHJlZGljYXRlKHQpfX1fcmVhZExpc3RJdGVtKHQpe3ZhciBlPW51bGwscj1udWxsLG49dGhpcy5fc3ViamVjdCxpPXRoaXMuX2NvbnRleHRTdGFjayxvPWlbaS5sZW5ndGgtMV0sYT10aGlzLl9yZWFkTGlzdEl0ZW07c3dpdGNoKHQudHlwZSl7Y2FzZVwiW1wiOnRoaXMuX3NhdmVDb250ZXh0KFwiYmxhbmtcIix0aGlzLl9ncmFwaCxyPXRoaXMuX2JsYW5rKCksdGhpcy5SREZfRklSU1QsdGhpcy5fc3ViamVjdD1lPXRoaXMuX2JsYW5rKCkpLGE9dGhpcy5fcmVhZEJsYW5rTm9kZUhlYWQ7YnJlYWs7Y2FzZVwiKFwiOnRoaXMuX3NhdmVDb250ZXh0KFwibGlzdFwiLHRoaXMuX2dyYXBoLHI9dGhpcy5fYmxhbmsoKSx0aGlzLlJERl9GSVJTVCx0aGlzLlJERl9OSUwpLHRoaXMuX3N1YmplY3Q9bnVsbDticmVhaztjYXNlXCIpXCI6aWYodGhpcy5fcmVzdG9yZUNvbnRleHQoKSwwIT09aS5sZW5ndGgmJlwibGlzdFwiPT09aVtpLmxlbmd0aC0xXS50eXBlJiZ0aGlzLl9lbWl0KHRoaXMuX3N1YmplY3QsdGhpcy5fcHJlZGljYXRlLHRoaXMuX29iamVjdCx0aGlzLl9ncmFwaCksbnVsbD09PXRoaXMuX3ByZWRpY2F0ZSl7aWYoYT10aGlzLl9yZWFkUHJlZGljYXRlLHRoaXMuX3N1YmplY3Q9PT10aGlzLlJERl9OSUwpcmV0dXJuIGF9ZWxzZSBpZihhPXRoaXMuX2dldENvbnRleHRFbmRSZWFkZXIoKSx0aGlzLl9vYmplY3Q9PT10aGlzLlJERl9OSUwpcmV0dXJuIGE7cj10aGlzLlJERl9OSUw7YnJlYWs7Y2FzZVwibGl0ZXJhbFwiOjA9PT10LnByZWZpeC5sZW5ndGg/KHRoaXMuX2xpdGVyYWxWYWx1ZT10LnZhbHVlLGE9dGhpcy5fcmVhZExpc3RJdGVtRGF0YVR5cGVPckxhbmcpOihlPXRoaXMuX2xpdGVyYWwodC52YWx1ZSx0aGlzLl9uYW1lZE5vZGUodC5wcmVmaXgpKSxhPXRoaXMuX2dldENvbnRleHRFbmRSZWFkZXIoKSk7YnJlYWs7ZGVmYXVsdDppZih2b2lkIDA9PT0oZT10aGlzLl9yZWFkRW50aXR5KHQpKSlyZXR1cm59aWYobnVsbD09PXImJih0aGlzLl9zdWJqZWN0PXI9dGhpcy5fYmxhbmsoKSksbnVsbD09PW4/bnVsbD09PW8ucHJlZGljYXRlP28uc3ViamVjdD1yOm8ub2JqZWN0PXI6dGhpcy5fZW1pdChuLHRoaXMuUkRGX1JFU1Qscix0aGlzLl9ncmFwaCksbnVsbCE9PWUpe2lmKHRoaXMuX24zTW9kZSYmKFwiSVJJXCI9PT10LnR5cGV8fFwicHJlZml4ZWRcIj09PXQudHlwZSkpcmV0dXJuIHRoaXMuX3NhdmVDb250ZXh0KFwiaXRlbVwiLHRoaXMuX2dyYXBoLHIsdGhpcy5SREZfRklSU1QsZSksdGhpcy5fc3ViamVjdD1lLHRoaXMuX3ByZWRpY2F0ZT1udWxsLHRoaXMuX2dldFBhdGhSZWFkZXIodGhpcy5fcmVhZExpc3RJdGVtKTt0aGlzLl9lbWl0KHIsdGhpcy5SREZfRklSU1QsZSx0aGlzLl9ncmFwaCl9cmV0dXJuIGF9X3JlYWREYXRhVHlwZU9yTGFuZyh0KXtyZXR1cm4gdGhpcy5fY29tcGxldGVMaXRlcmFsKHQsITEpfV9yZWFkTGlzdEl0ZW1EYXRhVHlwZU9yTGFuZyh0KXtyZXR1cm4gdGhpcy5fY29tcGxldGVMaXRlcmFsKHQsITApfV9jb21wbGV0ZUxpdGVyYWwodCxlKXtzd2l0Y2godC50eXBlKXtjYXNlXCJ0eXBlXCI6Y2FzZVwidHlwZUlSSVwiOnZhciByPXRoaXMuX3JlYWRFbnRpdHkodCk7aWYodm9pZCAwPT09cilyZXR1cm47dGhpcy5fb2JqZWN0PXRoaXMuX2xpdGVyYWwodGhpcy5fbGl0ZXJhbFZhbHVlLHIpLHQ9bnVsbDticmVhaztjYXNlXCJsYW5nY29kZVwiOnRoaXMuX29iamVjdD10aGlzLl9saXRlcmFsKHRoaXMuX2xpdGVyYWxWYWx1ZSx0LnZhbHVlKSx0PW51bGw7YnJlYWs7ZGVmYXVsdDp0aGlzLl9vYmplY3Q9dGhpcy5fbGl0ZXJhbCh0aGlzLl9saXRlcmFsVmFsdWUpfXJldHVybiBlJiZ0aGlzLl9lbWl0KHRoaXMuX3N1YmplY3QsdGhpcy5SREZfRklSU1QsdGhpcy5fb2JqZWN0LHRoaXMuX2dyYXBoKSxudWxsPT09dD90aGlzLl9nZXRDb250ZXh0RW5kUmVhZGVyKCk6KHRoaXMuX3JlYWRDYWxsYmFjaz10aGlzLl9nZXRDb250ZXh0RW5kUmVhZGVyKCksdGhpcy5fcmVhZENhbGxiYWNrKHQpKX1fcmVhZEZvcm11bGFUYWlsKHQpe3JldHVyblwifVwiIT09dC50eXBlP3RoaXMuX3JlYWRQdW5jdHVhdGlvbih0KToobnVsbCE9PXRoaXMuX3N1YmplY3QmJnRoaXMuX2VtaXQodGhpcy5fc3ViamVjdCx0aGlzLl9wcmVkaWNhdGUsdGhpcy5fb2JqZWN0LHRoaXMuX2dyYXBoKSx0aGlzLl9yZXN0b3JlQ29udGV4dCgpLG51bGw9PT10aGlzLl9vYmplY3Q/dGhpcy5fcmVhZFByZWRpY2F0ZTp0aGlzLl9nZXRDb250ZXh0RW5kUmVhZGVyKCkpfV9yZWFkUHVuY3R1YXRpb24odCl7dmFyIGUscj10aGlzLl9zdWJqZWN0LG49dGhpcy5fZ3JhcGgsaT10aGlzLl9pbnZlcnNlUHJlZGljYXRlO3N3aXRjaCh0LnR5cGUpe2Nhc2VcIn1cIjppZihudWxsPT09dGhpcy5fZ3JhcGgpcmV0dXJuIHRoaXMuX2Vycm9yKFwiVW5leHBlY3RlZCBncmFwaCBjbG9zaW5nXCIsdCk7aWYodGhpcy5fbjNNb2RlKXJldHVybiB0aGlzLl9yZWFkRm9ybXVsYVRhaWwodCk7dGhpcy5fZ3JhcGg9bnVsbDtjYXNlXCIuXCI6dGhpcy5fc3ViamVjdD1udWxsLGU9dGhpcy5fY29udGV4dFN0YWNrLmxlbmd0aD90aGlzLl9yZWFkU3ViamVjdDp0aGlzLl9yZWFkSW5Ub3BDb250ZXh0LGkmJih0aGlzLl9pbnZlcnNlUHJlZGljYXRlPSExKTticmVhaztjYXNlXCI7XCI6ZT10aGlzLl9yZWFkUHJlZGljYXRlO2JyZWFrO2Nhc2VcIixcIjplPXRoaXMuX3JlYWRPYmplY3Q7YnJlYWs7ZGVmYXVsdDppZih0aGlzLl9zdXBwb3J0c1F1YWRzJiZudWxsPT09dGhpcy5fZ3JhcGgmJnZvaWQgMCE9PShuPXRoaXMuX3JlYWRFbnRpdHkodCkpKXtlPXRoaXMuX3JlYWRRdWFkUHVuY3R1YXRpb247YnJlYWt9cmV0dXJuIHRoaXMuX2Vycm9yKCdFeHBlY3RlZCBwdW5jdHVhdGlvbiB0byBmb2xsb3cgXCInK3RoaXMuX29iamVjdC5pZCsnXCInLHQpfWlmKG51bGwhPT1yKXt2YXIgbz10aGlzLl9wcmVkaWNhdGUsYT10aGlzLl9vYmplY3Q7aT90aGlzLl9lbWl0KGEsbyxyLG4pOnRoaXMuX2VtaXQocixvLGEsbil9cmV0dXJuIGV9X3JlYWRCbGFua05vZGVQdW5jdHVhdGlvbih0KXt2YXIgZTtzd2l0Y2godC50eXBlKXtjYXNlXCI7XCI6ZT10aGlzLl9yZWFkUHJlZGljYXRlO2JyZWFrO2Nhc2VcIixcIjplPXRoaXMuX3JlYWRPYmplY3Q7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gdGhpcy5fZXJyb3IoJ0V4cGVjdGVkIHB1bmN0dWF0aW9uIHRvIGZvbGxvdyBcIicrdGhpcy5fb2JqZWN0LmlkKydcIicsdCl9cmV0dXJuIHRoaXMuX2VtaXQodGhpcy5fc3ViamVjdCx0aGlzLl9wcmVkaWNhdGUsdGhpcy5fb2JqZWN0LHRoaXMuX2dyYXBoKSxlfV9yZWFkUXVhZFB1bmN0dWF0aW9uKHQpe3JldHVyblwiLlwiIT09dC50eXBlP3RoaXMuX2Vycm9yKFwiRXhwZWN0ZWQgZG90IHRvIGZvbGxvdyBxdWFkXCIsdCk6dGhpcy5fcmVhZEluVG9wQ29udGV4dH1fcmVhZFByZWZpeCh0KXtyZXR1cm5cInByZWZpeFwiIT09dC50eXBlP3RoaXMuX2Vycm9yKFwiRXhwZWN0ZWQgcHJlZml4IHRvIGZvbGxvdyBAcHJlZml4XCIsdCk6KHRoaXMuX3ByZWZpeD10LnZhbHVlLHRoaXMuX3JlYWRQcmVmaXhJUkkpfV9yZWFkUHJlZml4SVJJKHQpe2lmKFwiSVJJXCIhPT10LnR5cGUpcmV0dXJuIHRoaXMuX2Vycm9yKCdFeHBlY3RlZCBJUkkgdG8gZm9sbG93IHByZWZpeCBcIicrdGhpcy5fcHJlZml4Kyc6XCInLHQpO3ZhciBlPXRoaXMuX3JlYWRFbnRpdHkodCk7cmV0dXJuIHRoaXMuX3ByZWZpeGVzW3RoaXMuX3ByZWZpeF09ZS52YWx1ZSx0aGlzLl9wcmVmaXhDYWxsYmFjayh0aGlzLl9wcmVmaXgsZSksdGhpcy5fcmVhZERlY2xhcmF0aW9uUHVuY3R1YXRpb259X3JlYWRCYXNlSVJJKHQpe3ZhciBlPVwiSVJJXCI9PT10LnR5cGUmJnRoaXMuX3Jlc29sdmVJUkkodC52YWx1ZSk7cmV0dXJuIGU/KHRoaXMuX3NldEJhc2UoZSksdGhpcy5fcmVhZERlY2xhcmF0aW9uUHVuY3R1YXRpb24pOnRoaXMuX2Vycm9yKFwiRXhwZWN0ZWQgdmFsaWQgSVJJIHRvIGZvbGxvdyBiYXNlIGRlY2xhcmF0aW9uXCIsdCl9X3JlYWROYW1lZEdyYXBoTGFiZWwodCl7c3dpdGNoKHQudHlwZSl7Y2FzZVwiSVJJXCI6Y2FzZVwiYmxhbmtcIjpjYXNlXCJwcmVmaXhlZFwiOnJldHVybiB0aGlzLl9yZWFkU3ViamVjdCh0KSx0aGlzLl9yZWFkR3JhcGg7Y2FzZVwiW1wiOnJldHVybiB0aGlzLl9yZWFkTmFtZWRHcmFwaEJsYW5rTGFiZWw7ZGVmYXVsdDpyZXR1cm4gdGhpcy5fZXJyb3IoXCJJbnZhbGlkIGdyYXBoIGxhYmVsXCIsdCl9fV9yZWFkTmFtZWRHcmFwaEJsYW5rTGFiZWwodCl7cmV0dXJuXCJdXCIhPT10LnR5cGU/dGhpcy5fZXJyb3IoXCJJbnZhbGlkIGdyYXBoIGxhYmVsXCIsdCk6KHRoaXMuX3N1YmplY3Q9dGhpcy5fYmxhbmsoKSx0aGlzLl9yZWFkR3JhcGgpfV9yZWFkRGVjbGFyYXRpb25QdW5jdHVhdGlvbih0KXtyZXR1cm4gdGhpcy5fc3BhcnFsU3R5bGU/KHRoaXMuX3NwYXJxbFN0eWxlPSExLHRoaXMuX3JlYWRJblRvcENvbnRleHQodCkpOlwiLlwiIT09dC50eXBlP3RoaXMuX2Vycm9yKFwiRXhwZWN0ZWQgZGVjbGFyYXRpb24gdG8gZW5kIHdpdGggYSBkb3RcIix0KTp0aGlzLl9yZWFkSW5Ub3BDb250ZXh0fV9yZWFkUXVhbnRpZmllckxpc3QodCl7dmFyIGU7c3dpdGNoKHQudHlwZSl7Y2FzZVwiSVJJXCI6Y2FzZVwicHJlZml4ZWRcIjppZih2b2lkIDAhPT0oZT10aGlzLl9yZWFkRW50aXR5KHQsITApKSlicmVhaztkZWZhdWx0OnJldHVybiB0aGlzLl9lcnJvcihcIlVuZXhwZWN0ZWQgXCIrdC50eXBlLHQpfXJldHVybiB0aGlzLl9leHBsaWNpdFF1YW50aWZpZXJzPyhudWxsPT09dGhpcy5fc3ViamVjdD90aGlzLl9lbWl0KHRoaXMuX2dyYXBofHx0aGlzLkRFRkFVTFRHUkFQSCx0aGlzLl9wcmVkaWNhdGUsdGhpcy5fc3ViamVjdD10aGlzLl9ibGFuaygpLHRoaXMuUVVBTlRJRklFUlNfR1JBUEgpOnRoaXMuX2VtaXQodGhpcy5fc3ViamVjdCx0aGlzLlJERl9SRVNULHRoaXMuX3N1YmplY3Q9dGhpcy5fYmxhbmsoKSx0aGlzLlFVQU5USUZJRVJTX0dSQVBIKSx0aGlzLl9lbWl0KHRoaXMuX3N1YmplY3QsdGhpcy5SREZfRklSU1QsZSx0aGlzLlFVQU5USUZJRVJTX0dSQVBIKSk6dGhpcy5fcXVhbnRpZmllZFtlLmlkXT10aGlzLl9xdWFudGlmaWVyKFwiYlwiK1grKyksdGhpcy5fcmVhZFF1YW50aWZpZXJQdW5jdHVhdGlvbn1fcmVhZFF1YW50aWZpZXJQdW5jdHVhdGlvbih0KXtyZXR1cm5cIixcIj09PXQudHlwZT90aGlzLl9yZWFkUXVhbnRpZmllckxpc3Q6KHRoaXMuX2V4cGxpY2l0UXVhbnRpZmllcnMmJih0aGlzLl9lbWl0KHRoaXMuX3N1YmplY3QsdGhpcy5SREZfUkVTVCx0aGlzLlJERl9OSUwsdGhpcy5RVUFOVElGSUVSU19HUkFQSCksdGhpcy5fc3ViamVjdD1udWxsKSx0aGlzLl9yZWFkQ2FsbGJhY2s9dGhpcy5fZ2V0Q29udGV4dEVuZFJlYWRlcigpLHRoaXMuX3JlYWRDYWxsYmFjayh0KSl9X2dldFBhdGhSZWFkZXIodCl7cmV0dXJuIHRoaXMuX2FmdGVyUGF0aD10LHRoaXMuX3JlYWRQYXRofV9yZWFkUGF0aCh0KXtzd2l0Y2godC50eXBlKXtjYXNlXCIhXCI6cmV0dXJuIHRoaXMuX3JlYWRGb3J3YXJkUGF0aDtjYXNlXCJeXCI6cmV0dXJuIHRoaXMuX3JlYWRCYWNrd2FyZFBhdGg7ZGVmYXVsdDp2YXIgZT10aGlzLl9jb250ZXh0U3RhY2sscj1lLmxlbmd0aCYmZVtlLmxlbmd0aC0xXTtpZihyJiZcIml0ZW1cIj09PXIudHlwZSl7dmFyIG49dGhpcy5fc3ViamVjdDt0aGlzLl9yZXN0b3JlQ29udGV4dCgpLHRoaXMuX2VtaXQodGhpcy5fc3ViamVjdCx0aGlzLlJERl9GSVJTVCxuLHRoaXMuX2dyYXBoKX1yZXR1cm4gdGhpcy5fYWZ0ZXJQYXRoKHQpfX1fcmVhZEZvcndhcmRQYXRoKHQpe3ZhciBlLHIsbj10aGlzLl9ibGFuaygpO2lmKHZvaWQgMCE9PShyPXRoaXMuX3JlYWRFbnRpdHkodCkpKXJldHVybiBudWxsPT09dGhpcy5fcHJlZGljYXRlPyhlPXRoaXMuX3N1YmplY3QsdGhpcy5fc3ViamVjdD1uKTooZT10aGlzLl9vYmplY3QsdGhpcy5fb2JqZWN0PW4pLHRoaXMuX2VtaXQoZSxyLG4sdGhpcy5fZ3JhcGgpLHRoaXMuX3JlYWRQYXRofV9yZWFkQmFja3dhcmRQYXRoKHQpe3ZhciBlLHIsbj10aGlzLl9ibGFuaygpO2lmKHZvaWQgMCE9PShlPXRoaXMuX3JlYWRFbnRpdHkodCkpKXJldHVybiBudWxsPT09dGhpcy5fcHJlZGljYXRlPyhyPXRoaXMuX3N1YmplY3QsdGhpcy5fc3ViamVjdD1uKToocj10aGlzLl9vYmplY3QsdGhpcy5fb2JqZWN0PW4pLHRoaXMuX2VtaXQobixlLHIsdGhpcy5fZ3JhcGgpLHRoaXMuX3JlYWRQYXRofV9nZXRDb250ZXh0RW5kUmVhZGVyKCl7dmFyIHQ9dGhpcy5fY29udGV4dFN0YWNrO2lmKCF0Lmxlbmd0aClyZXR1cm4gdGhpcy5fcmVhZFB1bmN0dWF0aW9uO3N3aXRjaCh0W3QubGVuZ3RoLTFdLnR5cGUpe2Nhc2VcImJsYW5rXCI6cmV0dXJuIHRoaXMuX3JlYWRCbGFua05vZGVUYWlsO2Nhc2VcImxpc3RcIjpyZXR1cm4gdGhpcy5fcmVhZExpc3RJdGVtO2Nhc2VcImZvcm11bGFcIjpyZXR1cm4gdGhpcy5fcmVhZEZvcm11bGFUYWlsfX1fZW1pdCh0LGUscixuKXt0aGlzLl9jYWxsYmFjayhudWxsLHRoaXMuX3F1YWQodCxlLHIsbnx8dGhpcy5ERUZBVUxUR1JBUEgpKX1fZXJyb3IodCxlKXt2YXIgcj1uZXcgRXJyb3IodCtcIiBvbiBsaW5lIFwiK2UubGluZStcIi5cIik7ci5jb250ZXh0PXt0b2tlbjplLGxpbmU6ZS5saW5lLHByZXZpb3VzVG9rZW46dGhpcy5fbGV4ZXIucHJldmlvdXNUb2tlbn0sdGhpcy5fY2FsbGJhY2sociksdGhpcy5fY2FsbGJhY2s9ZXR9X3Jlc29sdmVJUkkodCl7cmV0dXJuL15bYS16XVthLXowLTkrLi1dKjovaS50ZXN0KHQpP3Q6dGhpcy5fcmVzb2x2ZVJlbGF0aXZlSVJJKHQpfV9yZXNvbHZlUmVsYXRpdmVJUkkodCl7aWYoIXQubGVuZ3RoKXJldHVybiB0aGlzLl9iYXNlO3N3aXRjaCh0WzBdKXtjYXNlXCIjXCI6cmV0dXJuIHRoaXMuX2Jhc2UrdDtjYXNlXCI/XCI6cmV0dXJuIHRoaXMuX2Jhc2UucmVwbGFjZSgvKD86XFw/LiopPyQvLHQpO2Nhc2VcIi9cIjpyZXR1cm4oXCIvXCI9PT10WzFdP3RoaXMuX2Jhc2VTY2hlbWU6dGhpcy5fYmFzZVJvb3QpK3RoaXMuX3JlbW92ZURvdFNlZ21lbnRzKHQpO2RlZmF1bHQ6cmV0dXJuL15bXi86XSo6Ly50ZXN0KHQpP251bGw6dGhpcy5fcmVtb3ZlRG90U2VnbWVudHModGhpcy5fYmFzZVBhdGgrdCl9fV9yZW1vdmVEb3RTZWdtZW50cyh0KXtpZighLyhefFxcLylcXC5cXC4/KCR8Wy8jP10pLy50ZXN0KHQpKXJldHVybiB0O2Zvcih2YXIgZT1cIlwiLHI9dC5sZW5ndGgsbj0tMSxpPS0xLG89MCxhPVwiL1wiO248cjspe3N3aXRjaChhKXtjYXNlXCI6XCI6aWYoaTwwJiZcIi9cIj09PXRbKytuXSYmXCIvXCI9PT10Wysrbl0pZm9yKDsoaT1uKzEpPHImJlwiL1wiIT09dFtpXTspbj1pO2JyZWFrO2Nhc2VcIj9cIjpjYXNlXCIjXCI6bj1yO2JyZWFrO2Nhc2VcIi9cIjppZihcIi5cIj09PXRbbisxXSlzd2l0Y2goYT10WzErICsrbl0pe2Nhc2VcIi9cIjplKz10LnN1YnN0cmluZyhvLG4tMSksbz1uKzE7YnJlYWs7Y2FzZSB2b2lkIDA6Y2FzZVwiP1wiOmNhc2VcIiNcIjpyZXR1cm4gZSt0LnN1YnN0cmluZyhvLG4pK3Quc3Vic3RyKG4rMSk7Y2FzZVwiLlwiOmlmKHZvaWQgMD09PShhPXRbMSsgKytuXSl8fFwiL1wiPT09YXx8XCI/XCI9PT1hfHxcIiNcIj09PWEpe2lmKChvPShlKz10LnN1YnN0cmluZyhvLG4tMikpLmxhc3RJbmRleE9mKFwiL1wiKSk+PWkmJihlPWUuc3Vic3RyKDAsbykpLFwiL1wiIT09YSlyZXR1cm4gZStcIi9cIit0LnN1YnN0cihuKzEpO289bisxfX19YT10Wysrbl19cmV0dXJuIGUrdC5zdWJzdHJpbmcobyl9cGFyc2UodCxlLHIpe3ZhciBuPXRoaXM7aWYodGhpcy5fcmVhZENhbGxiYWNrPXRoaXMuX3JlYWRJblRvcENvbnRleHQsdGhpcy5fc3BhcnFsU3R5bGU9ITEsdGhpcy5fcHJlZml4ZXM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9wcmVmaXhlcy5fPXRoaXMuX2JsYW5rTm9kZVByZWZpeD90aGlzLl9ibGFua05vZGVQcmVmaXguc3Vic3RyKDIpOlwiYlwiK0orKytcIl9cIix0aGlzLl9wcmVmaXhDYWxsYmFjaz1yfHxldCx0aGlzLl9pbnZlcnNlUHJlZGljYXRlPSExLHRoaXMuX3F1YW50aWZpZWQ9T2JqZWN0LmNyZWF0ZShudWxsKSwhZSl7dmFyIGksbz1bXTtpZih0aGlzLl9jYWxsYmFjaz1mdW5jdGlvbih0LGUpe3Q/aT10OmUmJm8ucHVzaChlKX0sdGhpcy5fbGV4ZXIudG9rZW5pemUodCkuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiBuLl9yZWFkQ2FsbGJhY2s9bi5fcmVhZENhbGxiYWNrKHQpfSkpLGkpdGhyb3cgaTtyZXR1cm4gb310aGlzLl9jYWxsYmFjaz1lLHRoaXMuX2xleGVyLnRva2VuaXplKHQsKGZ1bmN0aW9uKHQsZSl7bnVsbCE9PXQ/KG4uX2NhbGxiYWNrKHQpLG4uX2NhbGxiYWNrPWV0KTpuLl9yZWFkQ2FsbGJhY2smJihuLl9yZWFkQ2FsbGJhY2s9bi5fcmVhZENhbGxiYWNrKGUpKX0pKX19ZnVuY3Rpb24gZXQoKXt9ZnVuY3Rpb24gcnQodCxlKXt2YXIgcj1lLm5hbWVkTm9kZTt0Ll9uYW1lZE5vZGU9cix0Ll9ibGFua05vZGU9ZS5ibGFua05vZGUsdC5fbGl0ZXJhbD1lLmxpdGVyYWwsdC5fdmFyaWFibGU9ZS52YXJpYWJsZSx0Ll9xdWFkPWUucXVhZCx0LkRFRkFVTFRHUkFQSD1lLmRlZmF1bHRHcmFwaCgpLHQuUkRGX0ZJUlNUPXIoTS5hLnJkZi5maXJzdCksdC5SREZfUkVTVD1yKE0uYS5yZGYucmVzdCksdC5SREZfTklMPXIoTS5hLnJkZi5uaWwpLHQuTjNfRk9SQUxMPXIoTS5hLnIuZm9yQWxsKSx0Lk4zX0ZPUlNPTUU9cihNLmEuci5mb3JTb21lKSx0LkFCQlJFVklBVElPTlM9e2E6cihNLmEucmRmLnR5cGUpLFwiPVwiOnIoTS5hLm93bC5zYW1lQXMpLFwiPlwiOnIoTS5hLmxvZy5pbXBsaWVzKX0sdC5RVUFOVElGSUVSU19HUkFQSD1yKFwidXJuOm4zOnF1YW50aWZpZXJzXCIpfXJ0KHR0LnByb3RvdHlwZSxLKTt2YXIgbnQ9cigxNDYpO2NvbnN0e3RvSWQ6aXQsZnJvbUlkOm90fT1LLmludGVybmFsO2NsYXNzIGF0e2NvbnN0cnVjdG9yKHQsZSl7dGhpcy5fc2l6ZT0wLHRoaXMuX2dyYXBocz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2lkPTAsdGhpcy5faWRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5faWRzW1wiPjxcIl09MCx0aGlzLl9lbnRpdGllcz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2JsYW5rTm9kZUluZGV4PTAsZXx8IXR8fHRbMF18fChlPXQsdD1udWxsKSxlPWV8fHt9LHRoaXMuX2ZhY3Rvcnk9ZS5mYWN0b3J5fHxLLHQmJnRoaXMuYWRkUXVhZHModCl9Z2V0IHNpemUoKXt2YXIgdD10aGlzLl9zaXplO2lmKG51bGwhPT10KXJldHVybiB0O3Q9MDt2YXIgZSxyLG49dGhpcy5fZ3JhcGhzO2Zvcih2YXIgaSBpbiBuKWZvcih2YXIgbyBpbiBlPW5baV0uc3ViamVjdHMpZm9yKHZhciBhIGluIHI9ZVtvXSl0Kz1PYmplY3Qua2V5cyhyW2FdKS5sZW5ndGg7cmV0dXJuIHRoaXMuX3NpemU9dH1fYWRkVG9JbmRleCh0LGUscixuKXt2YXIgaT10W2VdfHwodFtlXT17fSksbz1pW3JdfHwoaVtyXT17fSksYT1uIGluIG87cmV0dXJuIGF8fChvW25dPW51bGwpLCFhfV9yZW1vdmVGcm9tSW5kZXgodCxlLHIsbil7dmFyIGksbz10W2VdLGE9b1tyXTtmb3IoaSBpbiBkZWxldGUgYVtuXSxhKXJldHVybjtmb3IoaSBpbiBkZWxldGUgb1tyXSxvKXJldHVybjtkZWxldGUgdFtlXX1fZmluZEluSW5kZXgodCxlLHIsbixpLG8sYSxzLHUsYyl7dmFyIGYsbCxoLHA9IWUrIXIrIW4+MT9PYmplY3Qua2V5cyh0aGlzLl9pZHMpOnRoaXMuX2VudGl0aWVzO2Zvcih2YXIgZCBpbiBlJiYoKGY9dCx0PXt9KVtlXT1mW2VdKSx0KXt2YXIgdj1wW2RdO2lmKGw9dFtkXSlmb3IodmFyIGcgaW4gciYmKChmPWwsbD17fSlbcl09ZltyXSksbCl7dmFyIHk9cFtnXTtpZihoPWxbZ10pZm9yKHZhciBiPShuP24gaW4gaD9bbl06W106T2JqZWN0LmtleXMoaCkpLF89MDtfPGIubGVuZ3RoO18rKyl7dmFyIG09e3N1YmplY3Q6bnVsbCxwcmVkaWNhdGU6bnVsbCxvYmplY3Q6bnVsbH07bVtpXT1vdCh2LHRoaXMuX2ZhY3RvcnkpLG1bb109b3QoeSx0aGlzLl9mYWN0b3J5KSxtW2FdPW90KHBbYltfXV0sdGhpcy5fZmFjdG9yeSk7dmFyIHc9dGhpcy5fZmFjdG9yeS5xdWFkKG0uc3ViamVjdCxtLnByZWRpY2F0ZSxtLm9iamVjdCxvdChzLHRoaXMuX2ZhY3RvcnkpKTtpZihjKWMucHVzaCh3KTtlbHNlIGlmKHUodykpcmV0dXJuITB9fX1yZXR1cm4gY31fbG9vcCh0LGUpe2Zvcih2YXIgciBpbiB0KWUocil9X2xvb3BCeUtleTAodCxlLHIpe3ZhciBuLGk7aWYobj10W2VdKWZvcihpIGluIG4pcihpKX1fbG9vcEJ5S2V5MSh0LGUscil7dmFyIG47Zm9yKG4gaW4gdCl0W25dW2VdJiZyKG4pfV9sb29wQnkyS2V5cyh0LGUscixuKXt2YXIgaSxvLGE7aWYoKGk9dFtlXSkmJihvPWlbcl0pKWZvcihhIGluIG8pbihhKX1fY291bnRJbkluZGV4KHQsZSxyLG4pe3ZhciBpLG8sYSxzPTA7Zm9yKHZhciB1IGluIGUmJigoaT10LHQ9e30pW2VdPWlbZV0pLHQpaWYobz10W3VdKWZvcih2YXIgYyBpbiByJiYoKGk9byxvPXt9KVtyXT1pW3JdKSxvKShhPW9bY10pJiYobj9uIGluIGEmJnMrKzpzKz1PYmplY3Qua2V5cyhhKS5sZW5ndGgpO3JldHVybiBzfV9nZXRHcmFwaHModCl7aWYoIXN0KHQpKXJldHVybiB0aGlzLl9ncmFwaHM7dmFyIGU9e307cmV0dXJuIGVbdF09dGhpcy5fZ3JhcGhzW3RdLGV9X3VuaXF1ZUVudGl0aWVzKHQpe3ZhciBlPU9iamVjdC5jcmVhdGUobnVsbCkscj10aGlzLl9lbnRpdGllcztyZXR1cm4gZnVuY3Rpb24obil7biBpbiBlfHwoZVtuXT0hMCx0KG90KHJbbl0pKSl9fWFkZFF1YWQodCxlLHIsbil7ZXx8KG49dC5ncmFwaCxyPXQub2JqZWN0LGU9dC5wcmVkaWNhdGUsdD10LnN1YmplY3QpLHQ9aXQodCksZT1pdChlKSxyPWl0KHIpLG49aXQobik7dmFyIGk9dGhpcy5fZ3JhcGhzW25dO2l8fChpPXRoaXMuX2dyYXBoc1tuXT17c3ViamVjdHM6e30scHJlZGljYXRlczp7fSxvYmplY3RzOnt9fSxPYmplY3QuZnJlZXplKGkpKTt2YXIgbz10aGlzLl9pZHMsYT10aGlzLl9lbnRpdGllczt0PW9bdF18fChvW2FbKyt0aGlzLl9pZF09dF09dGhpcy5faWQpLGU9b1tlXXx8KG9bYVsrK3RoaXMuX2lkXT1lXT10aGlzLl9pZCkscj1vW3JdfHwob1thWysrdGhpcy5faWRdPXJdPXRoaXMuX2lkKTt2YXIgcz10aGlzLl9hZGRUb0luZGV4KGkuc3ViamVjdHMsdCxlLHIpO3JldHVybiB0aGlzLl9hZGRUb0luZGV4KGkucHJlZGljYXRlcyxlLHIsdCksdGhpcy5fYWRkVG9JbmRleChpLm9iamVjdHMscix0LGUpLHRoaXMuX3NpemU9bnVsbCxzfWFkZFF1YWRzKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXRoaXMuYWRkUXVhZCh0W2VdKX1pbXBvcnQodCl7dmFyIGU9dGhpcztyZXR1cm4gdC5vbihcImRhdGFcIiwoZnVuY3Rpb24odCl7ZS5hZGRRdWFkKHQpfSkpLHR9cmVtb3ZlUXVhZCh0LGUscixuKXtlfHwobj10LmdyYXBoLHI9dC5vYmplY3QsZT10LnByZWRpY2F0ZSx0PXQuc3ViamVjdCksdD1pdCh0KSxlPWl0KGUpLHI9aXQociksbj1pdChuKTt2YXIgaSxvLGEscz10aGlzLl9pZHMsdT10aGlzLl9ncmFwaHM7aWYoISgodD1zW3RdKSYmKGU9c1tlXSkmJihyPXNbcl0pJiYoaT11W25dKSYmKG89aS5zdWJqZWN0c1t0XSkmJihhPW9bZV0pJiZyIGluIGEpKXJldHVybiExO2Zvcih0IGluIHRoaXMuX3JlbW92ZUZyb21JbmRleChpLnN1YmplY3RzLHQsZSxyKSx0aGlzLl9yZW1vdmVGcm9tSW5kZXgoaS5wcmVkaWNhdGVzLGUscix0KSx0aGlzLl9yZW1vdmVGcm9tSW5kZXgoaS5vYmplY3RzLHIsdCxlKSxudWxsIT09dGhpcy5fc2l6ZSYmdGhpcy5fc2l6ZS0tLGkuc3ViamVjdHMpcmV0dXJuITA7cmV0dXJuIGRlbGV0ZSB1W25dLCEwfXJlbW92ZVF1YWRzKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXRoaXMucmVtb3ZlUXVhZCh0W2VdKX1yZW1vdmUodCl7dmFyIGU9dGhpcztyZXR1cm4gdC5vbihcImRhdGFcIiwoZnVuY3Rpb24odCl7ZS5yZW1vdmVRdWFkKHQpfSkpLHR9cmVtb3ZlTWF0Y2hlcyh0LGUscixuKXtyZXR1cm4gdGhpcy5yZW1vdmUodGhpcy5tYXRjaCh0LGUscixuKSl9ZGVsZXRlR3JhcGgodCl7cmV0dXJuIHRoaXMucmVtb3ZlTWF0Y2hlcyhudWxsLG51bGwsbnVsbCx0KX1nZXRRdWFkcyh0LGUscixuKXt0PXQmJml0KHQpLGU9ZSYmaXQoZSkscj1yJiZpdChyKSxuPW4mJml0KG4pO3ZhciBpLG8sYSxzLHU9W10sYz10aGlzLl9nZXRHcmFwaHMobiksZj10aGlzLl9pZHM7aWYoc3QodCkmJiEobz1mW3RdKXx8c3QoZSkmJiEoYT1mW2VdKXx8c3QocikmJiEocz1mW3JdKSlyZXR1cm4gdTtmb3IodmFyIGwgaW4gYykoaT1jW2xdKSYmKG8/cz90aGlzLl9maW5kSW5JbmRleChpLm9iamVjdHMscyxvLGEsXCJvYmplY3RcIixcInN1YmplY3RcIixcInByZWRpY2F0ZVwiLGwsbnVsbCx1KTp0aGlzLl9maW5kSW5JbmRleChpLnN1YmplY3RzLG8sYSxudWxsLFwic3ViamVjdFwiLFwicHJlZGljYXRlXCIsXCJvYmplY3RcIixsLG51bGwsdSk6YT90aGlzLl9maW5kSW5JbmRleChpLnByZWRpY2F0ZXMsYSxzLG51bGwsXCJwcmVkaWNhdGVcIixcIm9iamVjdFwiLFwic3ViamVjdFwiLGwsbnVsbCx1KTpzP3RoaXMuX2ZpbmRJbkluZGV4KGkub2JqZWN0cyxzLG51bGwsbnVsbCxcIm9iamVjdFwiLFwic3ViamVjdFwiLFwicHJlZGljYXRlXCIsbCxudWxsLHUpOnRoaXMuX2ZpbmRJbkluZGV4KGkuc3ViamVjdHMsbnVsbCxudWxsLG51bGwsXCJzdWJqZWN0XCIsXCJwcmVkaWNhdGVcIixcIm9iamVjdFwiLGwsbnVsbCx1KSk7cmV0dXJuIHV9bWF0Y2godCxlLHIsbil7dmFyIGk9bmV3IG50LlJlYWRhYmxlKHtvYmplY3RNb2RlOiEwfSk7cmV0dXJuIGkuX3JlYWQ9KCk9Pntmb3IodmFyIG8gb2YgdGhpcy5nZXRRdWFkcyh0LGUscixuKSlpLnB1c2gobyk7aS5wdXNoKG51bGwpfSxpfWNvdW50UXVhZHModCxlLHIsbil7dD10JiZpdCh0KSxlPWUmJml0KGUpLHI9ciYmaXQociksbj1uJiZpdChuKTt2YXIgaSxvLGEscyx1PTAsYz10aGlzLl9nZXRHcmFwaHMobiksZj10aGlzLl9pZHM7aWYoc3QodCkmJiEobz1mW3RdKXx8c3QoZSkmJiEoYT1mW2VdKXx8c3QocikmJiEocz1mW3JdKSlyZXR1cm4gMDtmb3IodmFyIGwgaW4gYykoaT1jW2xdKSYmKHUrPXQ/cj90aGlzLl9jb3VudEluSW5kZXgoaS5vYmplY3RzLHMsbyxhKTp0aGlzLl9jb3VudEluSW5kZXgoaS5zdWJqZWN0cyxvLGEscyk6ZT90aGlzLl9jb3VudEluSW5kZXgoaS5wcmVkaWNhdGVzLGEscyxvKTp0aGlzLl9jb3VudEluSW5kZXgoaS5vYmplY3RzLHMsbyxhKSk7cmV0dXJuIHV9Zm9yRWFjaCh0LGUscixuLGkpe3RoaXMuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuIHQoZSksITF9KSxlLHIsbixpKX1ldmVyeSh0LGUscixuLGkpe3ZhciBvPSExLGE9IXRoaXMuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuIG89ITAsIXQoZSl9KSxlLHIsbixpKTtyZXR1cm4gbyYmYX1zb21lKHQsZSxyLG4saSl7ZT1lJiZpdChlKSxyPXImJml0KHIpLG49biYmaXQobiksaT1pJiZpdChpKTt2YXIgbyxhLHMsdSxjPXRoaXMuX2dldEdyYXBocyhpKSxmPXRoaXMuX2lkcztpZihzdChlKSYmIShhPWZbZV0pfHxzdChyKSYmIShzPWZbcl0pfHxzdChuKSYmISh1PWZbbl0pKXJldHVybiExO2Zvcih2YXIgbCBpbiBjKWlmKG89Y1tsXSlpZihhKXtpZih1KXtpZih0aGlzLl9maW5kSW5JbmRleChvLm9iamVjdHMsdSxhLHMsXCJvYmplY3RcIixcInN1YmplY3RcIixcInByZWRpY2F0ZVwiLGwsdCxudWxsKSlyZXR1cm4hMH1lbHNlIGlmKHRoaXMuX2ZpbmRJbkluZGV4KG8uc3ViamVjdHMsYSxzLG51bGwsXCJzdWJqZWN0XCIsXCJwcmVkaWNhdGVcIixcIm9iamVjdFwiLGwsdCxudWxsKSlyZXR1cm4hMH1lbHNlIGlmKHMpe2lmKHRoaXMuX2ZpbmRJbkluZGV4KG8ucHJlZGljYXRlcyxzLHUsbnVsbCxcInByZWRpY2F0ZVwiLFwib2JqZWN0XCIsXCJzdWJqZWN0XCIsbCx0LG51bGwpKXJldHVybiEwfWVsc2UgaWYodSl7aWYodGhpcy5fZmluZEluSW5kZXgoby5vYmplY3RzLHUsbnVsbCxudWxsLFwib2JqZWN0XCIsXCJzdWJqZWN0XCIsXCJwcmVkaWNhdGVcIixsLHQsbnVsbCkpcmV0dXJuITB9ZWxzZSBpZih0aGlzLl9maW5kSW5JbmRleChvLnN1YmplY3RzLG51bGwsbnVsbCxudWxsLFwic3ViamVjdFwiLFwicHJlZGljYXRlXCIsXCJvYmplY3RcIixsLHQsbnVsbCkpcmV0dXJuITA7cmV0dXJuITF9Z2V0U3ViamVjdHModCxlLHIpe3ZhciBuPVtdO3JldHVybiB0aGlzLmZvclN1YmplY3RzKChmdW5jdGlvbih0KXtuLnB1c2godCl9KSx0LGUsciksbn1mb3JTdWJqZWN0cyh0LGUscixuKXtlPWUmJml0KGUpLHI9ciYmaXQociksbj1uJiZpdChuKTt2YXIgaSxvLGEscz10aGlzLl9pZHMsdT10aGlzLl9nZXRHcmFwaHMobik7aWYodD10aGlzLl91bmlxdWVFbnRpdGllcyh0KSwhKHN0KGUpJiYhKG89c1tlXSl8fHN0KHIpJiYhKGE9c1tyXSkpKWZvcihuIGluIHUpKGk9dVtuXSkmJihvP2E/dGhpcy5fbG9vcEJ5MktleXMoaS5wcmVkaWNhdGVzLG8sYSx0KTp0aGlzLl9sb29wQnlLZXkxKGkuc3ViamVjdHMsbyx0KTphP3RoaXMuX2xvb3BCeUtleTAoaS5vYmplY3RzLGEsdCk6dGhpcy5fbG9vcChpLnN1YmplY3RzLHQpKX1nZXRQcmVkaWNhdGVzKHQsZSxyKXt2YXIgbj1bXTtyZXR1cm4gdGhpcy5mb3JQcmVkaWNhdGVzKChmdW5jdGlvbih0KXtuLnB1c2godCl9KSx0LGUsciksbn1mb3JQcmVkaWNhdGVzKHQsZSxyLG4pe2U9ZSYmaXQoZSkscj1yJiZpdChyKSxuPW4mJml0KG4pO3ZhciBpLG8sYSxzPXRoaXMuX2lkcyx1PXRoaXMuX2dldEdyYXBocyhuKTtpZih0PXRoaXMuX3VuaXF1ZUVudGl0aWVzKHQpLCEoc3QoZSkmJiEobz1zW2VdKXx8c3QocikmJiEoYT1zW3JdKSkpZm9yKG4gaW4gdSkoaT11W25dKSYmKG8/YT90aGlzLl9sb29wQnkyS2V5cyhpLm9iamVjdHMsYSxvLHQpOnRoaXMuX2xvb3BCeUtleTAoaS5zdWJqZWN0cyxvLHQpOmE/dGhpcy5fbG9vcEJ5S2V5MShpLnByZWRpY2F0ZXMsYSx0KTp0aGlzLl9sb29wKGkucHJlZGljYXRlcyx0KSl9Z2V0T2JqZWN0cyh0LGUscil7dmFyIG49W107cmV0dXJuIHRoaXMuZm9yT2JqZWN0cygoZnVuY3Rpb24odCl7bi5wdXNoKHQpfSksdCxlLHIpLG59Zm9yT2JqZWN0cyh0LGUscixuKXtlPWUmJml0KGUpLHI9ciYmaXQociksbj1uJiZpdChuKTt2YXIgaSxvLGEscz10aGlzLl9pZHMsdT10aGlzLl9nZXRHcmFwaHMobik7aWYodD10aGlzLl91bmlxdWVFbnRpdGllcyh0KSwhKHN0KGUpJiYhKG89c1tlXSl8fHN0KHIpJiYhKGE9c1tyXSkpKWZvcihuIGluIHUpKGk9dVtuXSkmJihvP2E/dGhpcy5fbG9vcEJ5MktleXMoaS5zdWJqZWN0cyxvLGEsdCk6dGhpcy5fbG9vcEJ5S2V5MShpLm9iamVjdHMsbyx0KTphP3RoaXMuX2xvb3BCeUtleTAoaS5wcmVkaWNhdGVzLGEsdCk6dGhpcy5fbG9vcChpLm9iamVjdHMsdCkpfWdldEdyYXBocyh0LGUscil7dmFyIG49W107cmV0dXJuIHRoaXMuZm9yR3JhcGhzKChmdW5jdGlvbih0KXtuLnB1c2godCl9KSx0LGUsciksbn1mb3JHcmFwaHModCxlLHIsbil7Zm9yKHZhciBpIGluIHRoaXMuX2dyYXBocyl0aGlzLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVybiB0KGUuZ3JhcGgpLCEwfSksZSxyLG4saSl9Y3JlYXRlQmxhbmtOb2RlKHQpe3ZhciBlLHI7aWYodClmb3IoZT10PVwiXzpcIit0LHI9MTt0aGlzLl9pZHNbZV07KWU9dCtyKys7ZWxzZSBkb3tlPVwiXzpiXCIrdGhpcy5fYmxhbmtOb2RlSW5kZXgrK313aGlsZSh0aGlzLl9pZHNbZV0pO3JldHVybiB0aGlzLl9pZHNbZV09Kyt0aGlzLl9pZCx0aGlzLl9lbnRpdGllc1t0aGlzLl9pZF09ZSx0aGlzLl9mYWN0b3J5LmJsYW5rTm9kZShlLnN1YnN0cigyKSl9ZXh0cmFjdExpc3RzKHtyZW1vdmU6dD0hMSxpZ25vcmVFcnJvcnM6ZT0hMX09e30pe3ZhciByPXt9LG49ZT8oKT0+ITA6KHQsZSk9Pnt0aHJvdyBuZXcgRXJyb3IoYCR7dC52YWx1ZX0gJHtlfWApfSxpPXRoaXMuZ2V0UXVhZHMobnVsbCxNLmEucmRmLnJlc3QsTS5hLnJkZi5uaWwsbnVsbCksbz10P1suLi5pXTpbXTtyZXR1cm4gaS5mb3JFYWNoKGU9Pntmb3IodmFyIGksYSxzPVtdLHU9ITEsYz1lLmdyYXBoLGY9ZS5zdWJqZWN0O2YmJiF1Oyl7dmFyIGwsaCxwPXRoaXMuZ2V0UXVhZHMobnVsbCxudWxsLGYsbnVsbCksZD10aGlzLmdldFF1YWRzKGYsbnVsbCxudWxsLG51bGwpLHY9bnVsbCxnPW51bGwseT1udWxsO2ZvcihsPTA7bDxkLmxlbmd0aCYmIXU7bCsrKShoPWRbbF0pLmdyYXBoLmVxdWFscyhjKT9pP3U9bihmLFwiaGFzIG5vbi1saXN0IGFyY3Mgb3V0XCIpOmgucHJlZGljYXRlLnZhbHVlPT09TS5hLnJkZi5maXJzdD92P3U9bihmLFwiaGFzIG11bHRpcGxlIHJkZjpmaXJzdCBhcmNzXCIpOm8ucHVzaCh2PWgpOmgucHJlZGljYXRlLnZhbHVlPT09TS5hLnJkZi5yZXN0P2c/dT1uKGYsXCJoYXMgbXVsdGlwbGUgcmRmOnJlc3QgYXJjc1wiKTpvLnB1c2goZz1oKTpwLmxlbmd0aD91PW4oZixcImNhbid0IGJlIHN1YmplY3QgYW5kIG9iamVjdFwiKTooaT1oLGE9XCJzdWJqZWN0XCIpOnU9bihmLFwibm90IGNvbmZpbmVkIHRvIHNpbmdsZSBncmFwaFwiKTtmb3IobD0wO2w8cC5sZW5ndGgmJiF1OysrbCloPXBbbF0saT91PW4oZixcImNhbid0IGhhdmUgY29yZWZlcmVuY2VzXCIpOmgucHJlZGljYXRlLnZhbHVlPT09TS5hLnJkZi5yZXN0P3k/dT1uKGYsXCJoYXMgaW5jb21pbmcgcmRmOnJlc3QgYXJjc1wiKTp5PWg6KGk9aCxhPVwib2JqZWN0XCIpO3Y/cy51bnNoaWZ0KHYub2JqZWN0KTp1PW4oZixcImhhcyBubyBsaXN0IGhlYWRcIiksZj15JiZ5LnN1YmplY3R9dT90PSExOmkmJihyW2lbYV0udmFsdWVdPXMpfSksdCYmdGhpcy5yZW1vdmVRdWFkcyhvKSxyfX1mdW5jdGlvbiBzdCh0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdHx8dCBpbnN0YW5jZW9mIFN0cmluZ312YXIgdXQ9cigxNDQpLGN0PXIubih1dCkoKSgpLGZ0PUsubmFtZWROb2RlLGx0PUsubGl0ZXJhbCxodD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dSgpKHRoaXMsdCksdGhpcy5fZmV0Y2g9ZSx0aGlzLnBhcnNlcj1uZXcgdHQsdGhpcy5zdG9yZT1uZXcgYXQsdGhpcy5jYWNoZT17fSx0aGlzLnByZWZpeD17fX12YXIgZSxyLG4sbztyZXR1cm4gZigpKHQsW3trZXk6XCJzZXRQcmVmaXhcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMucHJlZml4W3RdPWV9fSx7a2V5OlwiZ2V0UHJlZml4XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucHJlZml4W3RdfX0se2tleTpcInF1ZXJ5XCIsdmFsdWU6KG89YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUscixuLG8sYSl7dmFyIHMsdSxjPWFyZ3VtZW50cztyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmlmKCEoYy5sZW5ndGg+NSYmdm9pZCAwIT09Y1s1XT9jWzVdOnt1c2VDYWNoZTohMH0pLnVzZUNhY2hlfHwhKGUgaW4gdGhpcy5jYWNoZSkpe3QubmV4dD0zO2JyZWFrfXJldHVybiB0LmFicnVwdChcInJldHVyblwiLHRoaXMuX3F1ZXJ5Q2FjaGVkKGUscixuLG8sYSkpO2Nhc2UgMzpyZXR1cm4gdC5uZXh0PTUsdGhpcy5fZmV0Y2goZSx7aGVhZGVyczp7QWNjZXB0OlwidGV4dC90dXJ0bGVcIn19KTtjYXNlIDU6cmV0dXJuIHM9dC5zZW50LHQubmV4dD04LHMudGV4dCgpO2Nhc2UgODpyZXR1cm4gdT10LnNlbnQsdC5hYnJ1cHQoXCJyZXR1cm5cIix0aGlzLnF1ZXJ5VHVydGxlKGUsdSxyLG4sbyxhKSk7Y2FzZSAxMDpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24odCxlLHIsbixpKXtyZXR1cm4gby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInF1ZXJ5VHVydGxlXCIsdmFsdWU6KG49YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUscixuLG8sYSxzKXt2YXIgdTtyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiB0Lm5leHQ9Mix0aGlzLl9wYXJzZShyLGUpO2Nhc2UgMjpyZXR1cm4gdT10LnNlbnQsdGhpcy5jYWNoZVtlXT11LHQuYWJydXB0KFwicmV0dXJuXCIsdGhpcy5fcXVlcnlDYWNoZWQoZSxuLG8sYSxzKSk7Y2FzZSA1OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0LGUscixpLG8sYSl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJfcXVlcnlDYWNoZWRcIix2YWx1ZToocj1hKCkoaS5hLm1hcmsoKGZ1bmN0aW9uIHQoZSxyLG4sbyxhKXt2YXIgcyx1PXRoaXM7cmV0dXJuIGkuYS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gYXx8KGE9ZnQoZSlbYV09W3IsbixvLGFdLm1hcCgoZnVuY3Rpb24odCl7aWYoXCJvYmplY3RcIj09PUYoKSh0KSYmdCl7aWYodC5pZClyZXR1cm4gdDt2YXIgcj1PYmplY3Qua2V5cyh0KSxuPXRbcl07cmV0dXJuIDE9PT1yLmxlbmd0aCYmXCJ0aGlzRG9jXCI9PT1yWzBdP2Z0KG4/ZStcIiNcIituOmUpOmN0W3JdP2Z0KGN0W3JdKG4pKTp1LnByZWZpeFtyXT9mdCh1LnByZWZpeFtyXStuKTpmdChyK24pfXJldHVybiB0JiZ2b2lkIDAhPT10P2x0KHQpOnR9KSkpLHM9dGhpcy5jYWNoZVtlXSx0LmFicnVwdChcInJldHVyblwiLHMuZ2V0UXVhZHMoYVswXSxhWzFdLGFbMl0sYVszXSkpO2Nhc2UgMzpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24odCxlLG4saSxvKXtyZXR1cm4gci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcIl9wYXJzZVwiLHZhbHVlOihlPWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlLHIpe3ZhciBuLG87cmV0dXJuIGkuYS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gbj1bXSxvPW5ldyB0dCh7YmFzZUlSSTpyfSksdC5hYnJ1cHQoXCJyZXR1cm5cIixuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxyKXtvLnBhcnNlKGUsKGZ1bmN0aW9uKGUsaSxvKXtpZihpJiZuLnB1c2goaSksZSlyZXR1cm4gcihlKTtpZighaSl7dmFyIGE9bmV3IGF0O2EuYWRkUXVhZHMobiksdChhKX19KSl9KSkpO2Nhc2UgMzpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpLGZ1bmN0aW9uKHQscil7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9XSksdH0oKSxwdD1JLGR0PU87ZnVuY3Rpb24gdnQodCxlKXt2YXIgcj17dXJsOnR9O2Zvcih2YXIgbiBpbiBlLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlPXQucHJlZGljYXRlLnZhbHVlLnJlcGxhY2UoLy4qXFwvLyxcIlwiKS5yZXBsYWNlKC8uKiMvLFwiXCIpLG49dC5vYmplY3QudmFsdWUubWF0Y2goXCJodHRwOi8vd3d3LnczLm9yZy9ucy9pYW5hL21lZGlhLXR5cGVzL1wiKT90Lm9iamVjdC52YWx1ZS5yZXBsYWNlKFwiaHR0cDovL3d3dy53My5vcmcvbnMvaWFuYS9tZWRpYS10eXBlcy9cIixcIlwiKTp0Lm9iamVjdC52YWx1ZS5yZXBsYWNlKC8uKlxcLy8sXCJcIik7ZS5tYXRjaChcInR5cGVcIil8fChuPW4ucmVwbGFjZSgvLiojLyxcIlwiKSksXCJsZHAjUmVzb3VyY2VcIiE9PW4mJlwibGRwI0NvbnRhaW5lclwiIT09biYmKHJbZV09W10uY29uY2F0KHgoKShyW2VdfHxbXSksW24ucmVwbGFjZShcIiNSZXNvdXJjZVwiLFwiXCIpXSkpfSkpLHIpMT09PXJbbl0ubGVuZ3RoJiYocltuXT1yW25dWzBdKTtyZXR1cm4gdm9pZCAwPT09ci50eXBlJiYoci50eXBlPVwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIpLHIuaXRlbVR5cGU9ci50eXBlLmluY2x1ZGVzKFwibGRwI0Jhc2ljQ29udGFpbmVyXCIpP1wiQ29udGFpbmVyXCI6XCJSZXNvdXJjZVwiLHIubmFtZT1kdCh0KSxyLnBhcmVudD1wdCh0KSxyfWZ1bmN0aW9uIGd0KHQsZSxyKXt2YXIgbj17dHlwZTpcImZvbGRlclwifTtyZXR1cm4gbi5tb2RpZmllZD10Lm1vZGlmaWVkLG4ubXRpbWU9dC5tdGltZSxuLnNpemU9dC5zaXplLG4uaXRlbVR5cGU9dC5pdGVtVHlwZSxuLm5hbWU9dC5uYW1lLG4ucGFyZW50PXQucGFyZW50LG4udXJsPXQudXJsLG4uZm9sZGVycz1lLG4uZmlsZXM9cixufXZhciB5dD17cGFyc2VGb2xkZXJSZXNwb25zZTpmdW5jdGlvbigpe3ZhciB0PWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgcixuLG8scyx1LGMsZixsLGg9YXJndW1lbnRzO3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHI9aC5sZW5ndGg+MSYmdm9pZCAwIT09aFsxXT9oWzFdOmUudXJsLHQubmV4dD0zLGUudGV4dCgpO2Nhc2UgMzpyZXR1cm4gbj10LnNlbnQsbz1uZXcgaHQsdC5uZXh0PTcsby5xdWVyeVR1cnRsZShyLG4se3RoaXNEb2M6XCJcIn0pO2Nhc2UgNzpyZXR1cm4gcz10LnNlbnQsdT12dChyLHMpLHQubmV4dD0xMSxvLnF1ZXJ5VHVydGxlKHIsbix7dGhpc0RvYzpcIlwifSx7bGRwOlwiY29udGFpbnNcIn0pO2Nhc2UgMTE6cmV0dXJuIGM9dC5zZW50LGY9W10sbD1bXSx0Lm5leHQ9MTYsUHJvbWlzZS5hbGwoYy5tYXAoZnVuY3Rpb24oKXt2YXIgdD1hKCkoaS5hLm1hcmsoKGZ1bmN0aW9uIHQoZSl7dmFyIG4sYSxzO3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIG49ZS5vYmplY3QsdC5uZXh0PTMsby5xdWVyeShyLG4pO2Nhc2UgMzphPXQuc2VudCwocz12dChuLnZhbHVlLGEpKS5pdGVtVHlwZS5pbmNsdWRlcyhcIkNvbnRhaW5lclwiKT8ocy50eXBlPVwiZm9sZGVyXCIsZi5wdXNoKHMpKTpsLnB1c2gocyk7Y2FzZSA2OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0KX0pKSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCkpKTtjYXNlIDE2OnJldHVybiB0LmFicnVwdChcInJldHVyblwiLGd0KHUsZixsKSk7Y2FzZSAxNzpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpfSxidD0ocigyMDEpLHIoOTcpKSxfdD1yLm4oYnQpLG10PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCl7dmFyIHIsbjt1KCkodGhpcyxlKTtmb3IodmFyIGk9YXJndW1lbnRzLmxlbmd0aCxvPW5ldyBBcnJheShpPjE/aS0xOjApLGE9MTthPGk7YSsrKW9bYS0xXT1hcmd1bWVudHNbYV07cmV0dXJuKG49aCgpKHRoaXMsKHI9ZCgpKGUpKS5jYWxsLmFwcGx5KHIsW3RoaXNdLmNvbmNhdChvKSkpKS5uYW1lPVwiU2luZ2xlUmVzcG9uc2VFcnJvclwiLG8ubGVuZ3RofHwobi5tZXNzYWdlPVwiXCIuY29uY2F0KHQuc3RhdHVzLFwiIFwiKS5jb25jYXQodC51cmwpKSxuLnJlc3BvbnNlPXQsbi5vaz0hMSxuLnN0YXR1cz10LnN0YXR1cyxuLnN0YXR1c1RleHQ9dC5zdGF0dXNUZXh0LG4udXJsPXQudXJsLG59cmV0dXJuIGIoKShlLHQpLGV9KF90KCkoRXJyb3IpKSx3dD1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe3ZhciByLG4saT10LnN1Y2Nlc3NmdWwsbz12b2lkIDA9PT1pP1tdOmksYT10LnJlamVjdGVkRXJyb3JzLHM9dm9pZCAwPT09YT9bXTphLGM9dC5lcnJvcnMsZj12b2lkIDA9PT1jP1tdOmM7dSgpKHRoaXMsZSk7Zm9yKHZhciBsPWFyZ3VtZW50cy5sZW5ndGgscD1uZXcgQXJyYXkobD4xP2wtMTowKSx2PTE7djxsO3YrKylwW3YtMV09YXJndW1lbnRzW3ZdO3JldHVybihuPWgoKSh0aGlzLChyPWQoKShlKSkuY2FsbC5hcHBseShyLFt0aGlzXS5jb25jYXQocCkpKSkubmFtZT1cIlNGQ0ZldGNoRXJyb3JcIixuLnN1Y2Nlc3NmdWw9byxuLnJlamVjdGVkPXMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXNwb25zZX0pKSxuLnJlamVjdGVkRXJyb3JzPXMsbi5lcnJvcnM9ZixuLm9rPSExLHMubGVuZ3RoPzEhPT1zLmxlbmd0aHx8Zi5sZW5ndGg/KG4ubWVzc2FnZT1cIlwiLmNvbmNhdChuLm5hbWUsXCIgXCIpLmNvbmNhdChbXS5jb25jYXQoeCgpKHMpLHgoKShmKSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5tZXNzYWdlfSkpLmpvaW4oXCJcXG5cIikpLG4uc3RhdHVzPS0yLG4uc3RhdHVzVGV4dD1uLm1lc3NhZ2UpOihuLm1lc3NhZ2U9XCJcIi5jb25jYXQobi5uYW1lLFwiIFwiKS5jb25jYXQoc1swXS5tZXNzYWdlKSxuLnN0YXR1cz1zWzBdLnN0YXR1cyxuLnN0YXR1c1RleHQ9c1swXS5zdGF0dXNUZXh0KToobi5tZXNzYWdlPVwiXCIuY29uY2F0KG4ubmFtZSxcIiBcIikuY29uY2F0KGYubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5tZXNzYWdlfSkpLmpvaW4oXCJcXG5cIikpLG4uc3RhdHVzPS0xLG4uc3RhdHVzVGV4dD1uLm1lc3NhZ2UpLG4uc3VjY2Vzc2Z1bD1vLG4ucmVqZWN0ZWQ9cy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJlc3BvbnNlfSkpLG4ucmVqZWN0ZWRFcnJvcnM9cyxuLmVycm9ycz1mLG59cmV0dXJuIGIoKShlLHQpLGV9KF90KCkoRXJyb3IpKSx4dD17NDAxOlwiTWFrZSBzdXJlIHRoYXQgdGhlIHVzZXIgaXMgcHJvcGVybHkgbG9nZ2VkIGluXCIsNDAzOlwiTWFrZSBzdXJlIHRoYXQgdGhlIG9yaWdpbiBvZiB5b3VyIGFwcCBpcyBhdXRob3JpemVkIGZvciB5b3VyIHBvZFwiLDQwNDpcIlRoZSByZXF1ZXN0ZWQgcmVzb3VyY2UgY291bGQgbm90IGJlIGZvdW5kXCIsNDA5OlwiQSBjb25mbGljdCBhcHBlYXJlZC4gSWYgeW91IHRyaWVkIHRvIGRlbGV0ZSBhIGZvbGRlciwgbWFrZSBzdXJlIHRoYXQgaXQgaXMgZW1wdHlcIiw1MDA6XCJBbiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3Igb2NjdXJlZFwifTtmdW5jdGlvbiBrdCh0KXtyZXR1cm4gRXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIEV0KCl7cmV0dXJuKEV0PWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgcjtyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiByPWUubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC50aGVuKChmdW5jdGlvbih0KXtyZXR1cm57c3RhdHVzOlwiZnVsZmlsbGVkXCIsdmFsdWU6dH19KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe3JldHVybntzdGF0dXM6XCJyZWplY3RlZFwiLHJlYXNvbjp0fX0pKX0pKSx0LmFicnVwdChcInJldHVyblwiLFByb21pc2UuYWxsKHIpKTtjYXNlIDI6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQpfSkpKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIFN0KCl7cmV0dXJuKFN0PWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgcixuLG8sYSxzLHUsYyxmO3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQubmV4dD0yLGt0KGUpO2Nhc2UgMjppZihuPXQuc2VudCxvPShyPVtdKS5jb25jYXQuYXBwbHkocix4KCkobi5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVyblwiZnVsZmlsbGVkXCI9PT10LnN0YXR1c30pKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnZhbHVlfSkpKSksIShhPW4uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm5cInJlamVjdGVkXCI9PT10LnN0YXR1c30pKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJlYXNvbn0pKSkubGVuZ3RoKXt0Lm5leHQ9OTticmVha310aHJvdyBjPShzPVtdKS5jb25jYXQuYXBwbHkocyx4KCkoYS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmVycm9yc30pKSkpLGY9KHU9W10pLmNvbmNhdC5hcHBseSh1LHgoKShhLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVqZWN0ZWRFcnJvcnN9KSkpKSxuZXcgd3Qoe3N1Y2Nlc3NmdWw6byxyZWplY3RlZEVycm9yczpmLGVycm9yczpjfSk7Y2FzZSA5OnJldHVybiB0LmFicnVwdChcInJldHVyblwiLG8pO2Nhc2UgMTA6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQpfSkpKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBqdD17RmV0Y2hFcnJvcjp3dCxTaW5nbGVSZXNwb25zZUVycm9yOm10LGFzc2VydFJlc3BvbnNlT2s6ZnVuY3Rpb24odCl7aWYoIXQub2spe3ZhciBlPXQuc3RhdHVzIGluIHh0P25ldyBtdCh0LFwiXCIuY29uY2F0KHQuc3RhdHVzLFwiIFwiKS5jb25jYXQodC51cmwsXCIgLSBcIikuY29uY2F0KHh0W3Quc3RhdHVzXSkpOm5ldyBtdCh0KTt0aHJvdyBuZXcgd3Qoe3N1Y2Nlc3NmdWw6W10scmVqZWN0ZWRFcnJvcnM6W2VdfSl9cmV0dXJuIHR9LGNvbXBvc2VkRmV0Y2g6ZnVuY3Rpb24odCl7cmV0dXJuIFN0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0scHJvbWlzZXNTZXR0bGVkOmt0LHRvRmV0Y2hFcnJvcjpmdW5jdGlvbih0KXt0aHJvdyB0IGluc3RhbmNlb2Ygd3Q/dDp0IGluc3RhbmNlb2YgbXQ/bmV3IHd0KHtyZWplY3RlZEVycm9yczpbdF19KTp0IGluc3RhbmNlb2YgRXJyb3I/bmV3IHd0KHtlcnJvcnM6W3RdfSk6dH19O3IoMjA0KTtmdW5jdGlvbiBSdCh0LGUpe3ZhciByPXt9O3JldHVybiBmdW5jdGlvbih0KXtpZih0KXtyZXR1cm4gdC5tYXRjaCgvPFtePl0qPlxccyooXFxzKjtcXHMqW14oKTw+QCw7OlwiL1tcXF0/PXt9IFxcdF0rPSgoW15cXChcXCk8PkAsOzpcIlxcL1xcW1xcXVxcPz17fSBcXHRdKyl8KFwiW15cIl0qXCIpKSkqKCx8JCkvZyl9fSh0KS5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBlPXQuc3Vic3RyaW5nKHQuaW5kZXhPZihcIjxcIikrMSx0LmluZGV4T2YoXCI+XCIpKSxyPXQuc3Vic3RyaW5nKHQuaW5kZXhPZigncmVsPVwiJykrJ3JlbD1cIicubGVuZ3RoLHQubGFzdEluZGV4T2YoJ1wiJykpO3JldHVybltcImRlc2NyaWJlZGJ5XCI9PT1yLnRvTG93ZXJDYXNlKCk/XCJtZXRhXCI6cixlXX0pKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3ZhciBlPW0oKSh0LDEpWzBdO3JldHVybltcIm1ldGFcIixcImFjbFwiXS5pbmNsdWRlcyhlKX0pKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj1tKCkodCwyKSxpPW5bMF0sbz1uWzFdO3JbaV09ZnVuY3Rpb24odCxlKXt2YXIgcixuLGksbyxhLHM9ZS5pbmRleE9mKFwiI1wiKTtzPjAmJihlPWUuc2xpY2UoMCxzKSk7aWYoMD09PXQubGVuZ3RoKXJldHVybiBlO2lmKDA9PT10LmluZGV4T2YoXCIjXCIpKXJldHVybiBlK3Q7aWYodC5pbmRleE9mKFwiOlwiKT49MClyZXR1cm4gdDtpZihyPWUuaW5kZXhPZihcIjpcIiksMD09PWUubGVuZ3RoKXJldHVybiB0O2lmKHI8MClyZXR1cm4gdDtpZihuPWUuc2xpY2UoMCwrcisxfHw5ZTkpLDA9PT10LmluZGV4T2YoXCIvL1wiKSlyZXR1cm4gbit0O2lmKGUuaW5kZXhPZihcIi8vXCIscik9PT1yKzEpe2lmKChpPWUuaW5kZXhPZihcIi9cIixyKzMpKTwwKXJldHVybiBlLmxlbmd0aC1yLTM+MD9lK1wiL1wiK3Q6bit0fWVsc2UgaWYoKGk9ZS5pbmRleE9mKFwiL1wiLHIrMSkpPDApcmV0dXJuIGUubGVuZ3RoLXItMT4wP2UrXCIvXCIrdDpuK3Q7aWYoMD09PXQuaW5kZXhPZihcIi9cIikpcmV0dXJuIGUuc2xpY2UoMCxpKSt0O2lmKGE9ZS5zbGljZShpKSwobz1hLmxhc3RJbmRleE9mKFwiL1wiKSk8MClyZXR1cm4gbit0O28+PTAmJm88YS5sZW5ndGgtMSYmKGE9YS5zbGljZSgwLCtvKzF8fDllOSkpO2ErPXQ7Zm9yKDthLm1hdGNoKC9bXlxcL10qXFwvXFwuXFwuXFwvLyk7KWE9YS5yZXBsYWNlKC9bXlxcL10qXFwvXFwuXFwuXFwvLyxcIlwiKTtyZXR1cm4gYT0oYT1hLnJlcGxhY2UoL1xcLlxcLy9nLFwiXCIpKS5yZXBsYWNlKC9cXC9cXC4kLyxcIi9cIiksZS5zbGljZSgwLGkpK2F9KG8sZSl9KSkscn12YXIgQ3Q9ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnQudXJsLHI9dC5oZWFkZXJzLmdldChcImxpbmtcIik7cmV0dXJuIG51bGw9PT1yP3t9OlJ0KHIsZSl9O2Z1bmN0aW9uIEl0KHQsZSl7dmFyIHI9T2JqZWN0LmtleXModCk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KTtlJiYobj1uLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxlKS5lbnVtZXJhYmxlfSkpKSxyLnB1c2guYXBwbHkocixuKX1yZXR1cm4gcn1mdW5jdGlvbiBPdCh0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgcj1udWxsIT1hcmd1bWVudHNbZV0/YXJndW1lbnRzW2VdOnt9O2UlMj9JdChPYmplY3QociksITApLmZvckVhY2goKGZ1bmN0aW9uKGUpe0UoKSh0LGUscltlXSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXModCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhyKSk6SXQoT2JqZWN0KHIpKS5mb3JFYWNoKChmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixlKSl9KSl9cmV0dXJuIHR9dmFyIFR0PWooKShcInNvbGlkLWZpbGUtY2xpZW50OmZldGNoXCIpLFB0PUMsQXQ9SSxMdD1PLEZ0PVQsTXQ9UCxOdD1BLEJ0PWp0LkZldGNoRXJyb3IsRHQ9anQuYXNzZXJ0UmVzcG9uc2VPayxVdD1qdC5jb21wb3NlZEZldGNoLHF0PWp0LnRvRmV0Y2hFcnJvcixHdD1DdCxXdD15dC5wYXJzZUZvbGRlclJlc3BvbnNlLHp0PXtSRVBMQUNFOlwicmVwbGFjZVwiLEtFRVBfU09VUkNFOlwia2VlcF9zb3VyY2VcIixLRUVQX1RBUkdFVDpcImtlZXBfdGFyZ2V0XCJ9LFl0PXtFWENMVURFOlwiZXhjbHVkZVwiLElOQ0xVREU6XCJpbmNsdWRlXCIsSU5DTFVERV9QT1NTSUJMRTpcImluY2x1ZGVfcG9zc2libGVcIn0sUXQ9XCJub19tb2RpZnlcIiwkdD1cInRvX3RhcmdldFwiLEh0PVwidG9fc291cmNlXCIsS3Q9e3dpdGhBY2w6ITAsd2l0aE1ldGE6ITAsYWdlbnQ6UXQsbWVyZ2U6enQuUkVQTEFDRSxjcmVhdGVQYXRoOiEwfSxWdD17ZW5hYmxlTG9nZ2luZzohMX07ZnVuY3Rpb24gWnQodCl7cmV0dXJuIEp0KChmdW5jdGlvbihlKXtyZXR1cm4gZS5zdGF0dXM9PT10fSkpfWZ1bmN0aW9uIEp0KHQpe3JldHVybiBmdW5jdGlvbihlKXtpZighdChlKSl0aHJvdyBxdChlKTtyZXR1cm4gZX19dmFyIFh0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxyKXt2YXIgbjtyZXR1cm4gdSgpKHRoaXMsZSksKG49aCgpKHRoaXMsZCgpKGUpLmNhbGwodGhpcyx0LmZldGNoLmJpbmQodCkscikpKS5fYXV0aD10LG59dmFyIHIsbixvLHM7cmV0dXJuIGIoKShlLHQpLGYoKShlLFt7a2V5OlwicmVhZEZpbGVcIix2YWx1ZToocz1hKCkoaS5hLm1hcmsoKGZ1bmN0aW9uIHQoZSxyKXt2YXIgbixvO3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQubmV4dD0yLHRoaXMuZ2V0KGUscik7Y2FzZSAyOmlmKG49dC5zZW50LCEobz1uLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpKXx8IW8ubWF0Y2goLyhpbWFnZXxhdWRpb3x2aWRlbykvKSl7dC5uZXh0PTY7YnJlYWt9cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsbi5ibG9iKCkpO2Nhc2UgNjppZighbi50ZXh0KXt0Lm5leHQ9ODticmVha31yZXR1cm4gdC5hYnJ1cHQoXCJyZXR1cm5cIixuLnRleHQoKSk7Y2FzZSA4OnJldHVybiB0LmFicnVwdChcInJldHVyblwiLG4pO2Nhc2UgOTpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24odCxlKXtyZXR1cm4gcy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInJlYWRIZWFkXCIsdmFsdWU6KG89YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KHIsbil7dmFyIG8sYSxzLHUsYyxmLGwsaDtyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiB0Lm5leHQ9MixnKCkoZCgpKGUucHJvdG90eXBlKSxcImhlYWRcIix0aGlzKS5jYWxsKHRoaXMscixuKTtjYXNlIDI6Zm9yKG89dC5zZW50LGE9XCJcIixzPSEwLHU9ITEsYz12b2lkIDAsdC5wcmV2PTcsZj1vLmhlYWRlcnMuZW50cmllcygpW1N5bWJvbC5pdGVyYXRvcl0oKTshKHM9KGw9Zi5uZXh0KCkpLmRvbmUpO3M9ITApaD1sLnZhbHVlLGErPWhbMF0rXCI6IFwiK2hbMV0rXCJcXG5cIjt0Lm5leHQ9MTU7YnJlYWs7Y2FzZSAxMTp0LnByZXY9MTEsdC50MD10LmNhdGNoKDcpLHU9ITAsYz10LnQwO2Nhc2UgMTU6dC5wcmV2PTE1LHQucHJldj0xNixzfHxudWxsPT1mLnJldHVybnx8Zi5yZXR1cm4oKTtjYXNlIDE4OmlmKHQucHJldj0xOCwhdSl7dC5uZXh0PTIxO2JyZWFrfXRocm93IGM7Y2FzZSAyMTpyZXR1cm4gdC5maW5pc2goMTgpO2Nhc2UgMjI6cmV0dXJuIHQuZmluaXNoKDE1KTtjYXNlIDIzOnJldHVybiB0LmFicnVwdChcInJldHVyblwiLGEpO2Nhc2UgMjQ6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyxbWzcsMTEsMTUsMjNdLFsxNiwsMTgsMjJdXSl9KSkpLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG8uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJkZWxldGVGaWxlXCIsdmFsdWU6KG49YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KHIpe3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsZygpKGQoKShlLnByb3RvdHlwZSksXCJfZGVsZXRlSXRlbVdpdGhMaW5rc1wiLHRoaXMpLmNhbGwodGhpcyxyKSk7Y2FzZSAxOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImRlbGV0ZUZvbGRlclwiLHZhbHVlOihyPWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChyLG4pe3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsZygpKGQoKShlLnByb3RvdHlwZSksXCJkZWxldGVGb2xkZXJSZWN1cnNpdmVseVwiLHRoaXMpLmNhbGwodGhpcyxyKSk7Y2FzZSAxOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0LGUpe3JldHVybiByLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfV0pLGV9KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLHIpe3UoKSh0aGlzLHQpLHI9T3Qoe30sVnQse30sciksdGhpcy5fZmV0Y2g9ZSx0aGlzLnJkZj1uZXcgaHQodGhpcy5mZXRjaC5iaW5kKHRoaXMpKSxyLmVuYWJsZUxvZ2dpbmcmJihcInN0cmluZ1wiPT10eXBlb2Ygci5lbmFibGVMb2dnaW5nP2ouYS5lbmFibGUoci5lbmFibGVMb2dnaW5nKTpqLmEuZW5hYmxlKFwic29saWQtZmlsZS1jbGllbnQ6KlwiKSl9dmFyIGUscixuLG8scyxjLGwsaCxwLGQsdixnLHksYixfLHcsaztyZXR1cm4gZigpKHQsW3trZXk6XCJmZXRjaFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2ZldGNoKHQsZSkudGhlbigoZnVuY3Rpb24ocil7cmV0dXJuIFR0KFwiXCIuY29uY2F0KHIuc3RhdHVzLFwiIC0gXCIpLmNvbmNhdChlJiZlLm1ldGhvZCxcIiBcIikuY29uY2F0KHQpKSxyfSkpLnRoZW4oRHQpfX0se2tleTpcImdldFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZmV0Y2godCxPdCh7fSxlLHttZXRob2Q6XCJHRVRcIn0pKX19LHtrZXk6XCJkZWxldGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmZldGNoKHQsT3Qoe30sZSx7bWV0aG9kOlwiREVMRVRFXCJ9KSl9fSx7a2V5OlwicG9zdFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZmV0Y2godCxPdCh7fSxlLHttZXRob2Q6XCJQT1NUXCJ9KSl9fSx7a2V5OlwicHV0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5mZXRjaCh0LE90KHt9LGUse21ldGhvZDpcIlBVVFwifSkpfX0se2tleTpcInBhdGNoXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5mZXRjaCh0LE90KHt9LGUse21ldGhvZDpcIlBBVENIXCJ9KSl9fSx7a2V5OlwiaGVhZFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZmV0Y2godCxPdCh7fSxlLHttZXRob2Q6XCJIRUFEXCJ9KSl9fSx7a2V5Olwib3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZmV0Y2godCxPdCh7fSxlLHttZXRob2Q6XCJPUFRJT05TXCJ9KSl9fSx7a2V5OlwiaXRlbUV4aXN0c1wiLHZhbHVlOihrPWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlKXtyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiB0LmFicnVwdChcInJldHVyblwiLHRoaXMuaGVhZChlKS50aGVuKChmdW5jdGlvbigpe3JldHVybiEwfSkpLmNhdGNoKChmdW5jdGlvbih0KXtyZXR1cm4gWnQoNDA0KSh0KSwhMX0pKSk7Y2FzZSAxOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gay5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInBvc3RJdGVtXCIsdmFsdWU6KHc9YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUscixuLG8sYSl7dmFyIHMsdTtyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmlmKGE9T3Qoe30se2NyZWF0ZVBhdGg6ITB9LHt9LGEpLHM9QXQoZSksIWEuY3JlYXRlUGF0aCl7dC5uZXh0PTU7YnJlYWt9cmV0dXJuIHQubmV4dD01LHRoaXMuY3JlYXRlRm9sZGVyKHMpO2Nhc2UgNTpyZXR1cm4gdT17aGVhZGVyczp7bGluazpvLHNsdWc6THQoZSksXCJDb250ZW50LVR5cGVcIjpufSxib2R5OnJ9LHQuYWJydXB0KFwicmV0dXJuXCIsdGhpcy5wb3N0KHMsdSkpO2Nhc2UgNzpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24odCxlLHIsbixpKXtyZXR1cm4gdy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImNyZWF0ZUZvbGRlclwiLHZhbHVlOihfPWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlLHIpe3ZhciBuO3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHI9T3Qoe30se2NyZWF0ZVBhdGg6ITAsbWVyZ2U6enQuS0VFUF9UQVJHRVR9LHt9LHIpLHQucHJldj0xLHQubmV4dD00LHRoaXMuaGVhZChlKTtjYXNlIDQ6aWYobj10LnNlbnQsci5tZXJnZT09PXp0LlJFUExBQ0Upe3QubmV4dD03O2JyZWFrfXJldHVybiB0LmFicnVwdChcInJldHVyblwiLG4pO2Nhc2UgNzpyZXR1cm4gdC5uZXh0PTksdGhpcy5kZWxldGVGb2xkZXJSZWN1cnNpdmVseShlKTtjYXNlIDk6dC5uZXh0PTE0O2JyZWFrO2Nhc2UgMTE6dC5wcmV2PTExLHQudDA9dC5jYXRjaCgxKSxadCg0MDQpKHQudDApO2Nhc2UgMTQ6cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsdGhpcy5wb3N0SXRlbShlLFwiXCIsXCJ0ZXh0L3R1cnRsZVwiLE50LkNPTlRBSU5FUixyKSk7Y2FzZSAxNTpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzLFtbMSwxMV1dKX0pKSksZnVuY3Rpb24odCxlKXtyZXR1cm4gXy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInBvc3RGaWxlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLHIsbil7cmV0dXJuIHRoaXMucG9zdEl0ZW0odCxlLHIsTnQuUkVTT1VSQ0Usbil9fSx7a2V5OlwiY3JlYXRlRmlsZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxyLG4pe3JldHVybiB0aGlzLnB1dEZpbGUodCxlLHIsbil9fSx7a2V5OlwicHV0RmlsZVwiLHZhbHVlOihiPWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlLHIsbixvKXt2YXIgYTtyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmlmKG89T3Qoe30sS3Qse30sbyksdC50MD1vLm1lcmdlPT09enQuS0VFUF9UQVJHRVQsIXQudDApe3QubmV4dD02O2JyZWFrfXJldHVybiB0Lm5leHQ9NSx0aGlzLml0ZW1FeGlzdHMoZSk7Y2FzZSA1OnQudDA9dC5zZW50O2Nhc2UgNjppZighdC50MCl7dC5uZXh0PTg7YnJlYWt9cXQobmV3IEVycm9yKFwiRmlsZSBhbHJlYWR5IGV4aXN0ZWQ6IFwiK2UpKTtjYXNlIDg6cmV0dXJuIGE9e2hlYWRlcnM6e2xpbms6TnQuUkVTT1VSQ0UsXCJDb250ZW50LVR5cGVcIjpufSxib2R5OnJ9LHQuYWJydXB0KFwicmV0dXJuXCIsdGhpcy5wdXQoZSxhKSk7Y2FzZSAxMDpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24odCxlLHIsbil7cmV0dXJuIGIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJyZWFkRm9sZGVyXCIsdmFsdWU6KHk9YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUscil7dmFyIG4sbyxzLHU9dGhpcztyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiBlPWUuZW5kc1dpdGgoXCIvXCIpP2U6ZStcIi9cIixyPU90KHtsaW5rczpZdC5FWENMVURFfSxyKSx0Lm5leHQ9NCx0aGlzLmdldChlLHtoZWFkZXJzOntBY2NlcHQ6XCJ0ZXh0L3R1cnRsZVwifX0pO2Nhc2UgNDpyZXR1cm4gbj10LnNlbnQsdC5uZXh0PTcsV3QobixlKTtjYXNlIDc6aWYobz10LnNlbnQsci5saW5rcyE9PVl0LklOQ0xVREVfUE9TU0lCTEUmJnIubGlua3MhPT1ZdC5JTkNMVURFKXt0Lm5leHQ9MTI7YnJlYWt9cmV0dXJuIHM9ZnVuY3Rpb24oKXt2YXIgdD1hKCkoaS5hLm1hcmsoKGZ1bmN0aW9uIHQoZSl7cmV0dXJuIGkuYS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gdC5uZXh0PTIsdS5nZXRJdGVtTGlua3MoZS51cmwscik7Y2FzZSAyOmUubGlua3M9dC5zZW50O2Nhc2UgMzpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpLHQubmV4dD0xMixVdChbcyhvKV0uY29uY2F0KHgoKShvLmZpbGVzLm1hcChzKSkpKTtjYXNlIDEyOnJldHVybiB0LmFicnVwdChcInJldHVyblwiLG8pO2Nhc2UgMTM6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJnZXRJdGVtTGlua3NcIix2YWx1ZTooZz1hKCkoaS5hLm1hcmsoKGZ1bmN0aW9uIHQoZSl7dmFyIHIsbixvPWFyZ3VtZW50cztyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybihyPW8ubGVuZ3RoPjEmJnZvaWQgMCE9PW9bMV0/b1sxXTp7bGlua3M6WXQuSU5DTFVERV9QT1NTSUJMRX0pLmxpbmtzPT09WXQuRVhDTFVERSYmcXQobmV3IEVycm9yKFwiSW52YWxpZCBvcHRpb24gTElOS1MuRVhDTFVERSBmb3IgZ2V0SXRlbUxpbmtzXCIpKSx0Lm5leHQ9NCx0aGlzLmhlYWQoZSkudGhlbihHdCk7Y2FzZSA0OmlmKG49dC5zZW50LHIubGlua3MhPT1ZdC5JTkNMVURFKXt0Lm5leHQ9ODticmVha31yZXR1cm4gdC5uZXh0PTgsdGhpcy5fcmVtb3ZlSW5leGlzdGluZ0xpbmtzKG4pO2Nhc2UgODpyZXR1cm4gdC5hYnJ1cHQoXCJyZXR1cm5cIixuKTtjYXNlIDk6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKHQpe3JldHVybiBnLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiX3JlbW92ZUluZXhpc3RpbmdMaW5rc1wiLHZhbHVlOih2PWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgcj10aGlzO3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQubmV4dD0yLFV0KE9iamVjdC5lbnRyaWVzKGUpLm1hcCgoZnVuY3Rpb24odCl7dmFyIG49bSgpKHQsMiksaT1uWzBdLG89blsxXTtyZXR1cm4gci5pdGVtRXhpc3RzKG8pLmNhdGNoKFp0KDQwNCkpLnRoZW4oKGZ1bmN0aW9uKHQpe3R8fGRlbGV0ZSBlW2ldfSkpfSkpKTtjYXNlIDI6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gdi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImNvcHlGaWxlXCIsdmFsdWU6KGQ9YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUscixuKXt2YXIgbyxhLHMsdTtyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmlmKG49T3Qoe30sS3Qse30sbiksIWUuZW5kc1dpdGgoXCIvXCIpJiYhci5lbmRzV2l0aChcIi9cIikpe3QubmV4dD0zO2JyZWFrfXRocm93IHF0KG5ldyBFcnJvcihcIkZvbGRlcnMgYXJlIG5vdCBhbGxvd2VkIHdpdGggY29weUZpbGUuIEZvdW5kOiBcIi5jb25jYXQoZSxcIiBhbmQgXCIpLmNvbmNhdChyKSkpO2Nhc2UgMzppZighZS5lbmRzV2l0aChcIi5hY2xcIikmJiFyLmVuZHNXaXRoKFwiLmFjbFwiKSl7dC5uZXh0PTU7YnJlYWt9dGhyb3cgcXQobmV3IEVycm9yKFwiVXNlIGNvcHlBY2xGaWxlIGZvciBjb3B5aW5nIEFDTCBmaWxlcy4gRm91bmQ6IFwiLmNvbmNhdChlLFwiIGFuZCBcIikuY29uY2F0KHIpKSk7Y2FzZSA1OnJldHVybiB0Lm5leHQ9Nyx0aGlzLmdldChlKTtjYXNlIDc6cmV0dXJuIG89dC5zZW50LHQubmV4dD0xMCxvLmJsb2IoKTtjYXNlIDEwOnJldHVybiBhPXQuc2VudCxzPW8uaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIiksdC5uZXh0PTE0LHRoaXMucHV0RmlsZShyLGEscyxuKTtjYXNlIDE0OnJldHVybiB1PXQuc2VudCx0Lm5leHQ9MTcsdGhpcy5jb3B5TGlua3NGb3JJdGVtKGUscixuLG8sdSk7Y2FzZSAxNzpyZXR1cm4gdC5hYnJ1cHQoXCJyZXR1cm5cIix1KTtjYXNlIDE4OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0LGUscil7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJfbGlua1VybHNEZWZpbmVkXCIsdmFsdWU6KHA9YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUscil7cmV0dXJuIGkuYS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDppZihcInN0cmluZ1wiPT10eXBlb2YgZSl7dC5uZXh0PTQ7YnJlYWt9cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsITEpO2Nhc2UgNDppZih0LnQwPVwic3RyaW5nXCIhPXR5cGVvZiByLCF0LnQwKXt0Lm5leHQ9OTticmVha31yZXR1cm4gdC5uZXh0PTgsdGhpcy5pdGVtRXhpc3RzKGUpO2Nhc2UgODp0LnQwPXQuc2VudDtjYXNlIDk6aWYoIXQudDApe3QubmV4dD0xMzticmVha310aHJvdyBxdChuZXcgRXJyb3IoXCJDYW5ub3QgY29weSBsaW5rIGZpbGUgYmVjYXVzZSB0YXJnZXQgbG9jYXRpb24gd2FzIG5vdCBwcm92aWRlZCBieSB0aGUgcG9kXCIpKTtjYXNlIDEzOmlmKFwic3RyaW5nXCI9PXR5cGVvZiByKXt0Lm5leHQ9MTc7YnJlYWt9cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsITEpO2Nhc2UgMTc6cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsITApO2Nhc2UgMTg6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHAuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJjb3B5TWV0YUZpbGVGb3JJdGVtXCIsdmFsdWU6KGg9YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUscil7dmFyIG4sbyxhLHMsdSxjPWFyZ3VtZW50cztyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiBuPWMubGVuZ3RoPjImJnZvaWQgMCE9PWNbMl0/Y1syXTp7fSx0Lm5leHQ9Myx0aGlzLmdldEl0ZW1MaW5rcyhlKTtjYXNlIDM6cmV0dXJuIG89dC5zZW50LGE9by5tZXRhLHQubmV4dD03LHRoaXMuZ2V0SXRlbUxpbmtzKHIpO2Nhc2UgNzpyZXR1cm4gcz10LnNlbnQsdT1zLm1ldGEsdC5uZXh0PTExLHRoaXMuX2xpbmtVcmxzRGVmaW5lZChhLHUpO2Nhc2UgMTE6aWYodC5zZW50KXt0Lm5leHQ9MTM7YnJlYWt9cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsdm9pZCAwKTtjYXNlIDEzOnJldHVybiB0LmFicnVwdChcInJldHVyblwiLHRoaXMuY29weUZpbGUoYSx1LHt3aXRoQWNsOm4ud2l0aEFjbCx3aXRoTWV0YTohMX0pKTtjYXNlIDE0OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0LGUpe3JldHVybiBoLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiY29weUFjbEZpbGVGb3JJdGVtXCIsdmFsdWU6KGw9YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUscixuKXt2YXIgbyxhLHMsdSxjLGYsbCxoLHA7cmV0dXJuIGkuYS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gbj1PdCh7fSxLdCx7fSx7YWdlbnQ6UXR9LHt9LG4pLHQubmV4dD0zLHRoaXMuZ2V0SXRlbUxpbmtzKGUpO2Nhc2UgMzpyZXR1cm4gbz10LnNlbnQsYT1vLmFjbCx0Lm5leHQ9Nyx0aGlzLmdldEl0ZW1MaW5rcyhyKTtjYXNlIDc6cmV0dXJuIHM9dC5zZW50LHU9cy5hY2wsdC5uZXh0PTExLHRoaXMuX2xpbmtVcmxzRGVmaW5lZChhLHUpO2Nhc2UgMTE6aWYodC5zZW50KXt0Lm5leHQ9MTM7YnJlYWt9cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsdm9pZCAwKTtjYXNlIDEzOnJldHVybiB0Lm5leHQ9MTUsdGhpcy5nZXQoYSk7Y2FzZSAxNTpyZXR1cm4gYz10LnNlbnQsZj1jLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpLHQubmV4dD0xOSxjLnRleHQoKTtjYXNlIDE5OnJldHVybiBsPXQuc2VudCxoPUx0KGUpLHA9RnQocik/XCJcIjpMdChyKSxsLmluY2x1ZGVzKGUpJiYobD1sLnJlcGxhY2UobmV3IFJlZ0V4cChcIjxcIitlK1wiPlwiLFwiZ1wiKSxcIjwuL1wiK3ArXCI+XCIpKSxwIT09aCYmKGw9bC5yZXBsYWNlKG5ldyBSZWdFeHAoaCtcIj5cIixcImdcIikscCtcIj5cIikpLG4uYWdlbnQ9PT0kdCYmKGw9KGw9bC5yZXBsYWNlKG5ldyBSZWdFeHAoXCI8XCIrUHQoZSkrXCJwcm9maWxlL2NhcmQjXCIsXCJnXCIpLFwiPC9wcm9maWxlL2NhcmQjXCIpKS5yZXBsYWNlKG5ldyBSZWdFeHAoXCI8XCIrUHQoZSkrXCJwcm9maWxlL2NhcmQjbWU+XCIsXCJnXCIpLFwiPC9wcm9maWxlL2NhcmQjbWU+XCIpKSxuLmFnZW50PT09SHQmJihsPShsPWwucmVwbGFjZShuZXcgUmVnRXhwKFwiPC9wcm9maWxlL2NhcmQjXCIsXCJnXCIpLFwiPFwiK1B0KGUpK1wicHJvZmlsZS9jYXJkI1wiKSkucmVwbGFjZShuZXcgUmVnRXhwKFwiPC9wcm9maWxlL2NhcmQjbWU+XCIsXCJnXCIpLFwiPFwiK1B0KGUpK1wicHJvZmlsZS9jYXJkI21lPlwiKSksdC5hYnJ1cHQoXCJyZXR1cm5cIix0aGlzLnB1dEZpbGUodSxsLGYsbikpO2Nhc2UgMjc6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gbC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImNvcHlMaW5rc0Zvckl0ZW1cIix2YWx1ZTooYz1hKCkoaS5hLm1hcmsoKGZ1bmN0aW9uIHQoZSxyLG4pe3ZhciBvO3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6aWYobz1bXSwhbi53aXRoTWV0YSl7dC5uZXh0PTc7YnJlYWt9cmV0dXJuIHQudDA9byx0Lm5leHQ9NSx0aGlzLmNvcHlNZXRhRmlsZUZvckl0ZW0oZSxyLG4pLmNhdGNoKFp0KDQwNCkpO2Nhc2UgNTp0LnQxPXQuc2VudCx0LnQwLnB1c2guY2FsbCh0LnQwLHQudDEpO2Nhc2UgNzppZighbi53aXRoQWNsKXt0Lm5leHQ9MTM7YnJlYWt9cmV0dXJuIHQudDI9byx0Lm5leHQ9MTEsdGhpcy5jb3B5QWNsRmlsZUZvckl0ZW0oZSxyLG4pLmNhdGNoKFp0KDQwNCkpO2Nhc2UgMTE6dC50Mz10LnNlbnQsdC50Mi5wdXNoLmNhbGwodC50Mix0LnQzKTtjYXNlIDEzOnJldHVybiB0LmFicnVwdChcInJldHVyblwiLG8uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdCYmISh0IGluc3RhbmNlb2YgRXJyb3IpfSkpKTtjYXNlIDE0OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0LGUscil7cmV0dXJuIGMuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJjb3B5Rm9sZGVyXCIsdmFsdWU6KHM9YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUscixuKXt2YXIgbyxhLHMsdSxjLGYsbD10aGlzO3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6aWYobj1PdCh7fSxLdCx7fSxuKSxcInN0cmluZ1wiPT10eXBlb2YgZSYmXCJzdHJpbmdcIj09dHlwZW9mIHIpe3QubmV4dD0zO2JyZWFrfXRocm93IHF0KG5ldyBFcnJvcihcIlRoZSBmcm9tIGFuZCB0byBwYXJhbWV0ZXJzIG9mIGNvcHlGb2xkZXIgbXVzdCBiZSBzdHJpbmdzLiBGb3VuZDogXCIuY29uY2F0KGUsXCIgYW5kIFwiKS5jb25jYXQocikpKTtjYXNlIDM6aWYoZS5lbmRzV2l0aChcIi9cIikmJnIuZW5kc1dpdGgoXCIvXCIpKXt0Lm5leHQ9NTticmVha310aHJvdyBxdChuZXcgRXJyb3IoXCJGaWxlcyBhcmUgbm90IGFsbG93ZWQgd2l0aCBjb3B5Rm9sZGVyLiBGb3VuZDogXCIuY29uY2F0KGUsXCIgYW5kIFwiKS5jb25jYXQocikpKTtjYXNlIDU6cmV0dXJuIHQubmV4dD03LHRoaXMucmVhZEZvbGRlcihlKTtjYXNlIDc6cmV0dXJuIGE9dC5zZW50LHM9YS5mb2xkZXJzLHU9YS5maWxlcyx0Lm5leHQ9MTIsdGhpcy5jcmVhdGVGb2xkZXIocixuKTtjYXNlIDEyOnJldHVybiBjPXQuc2VudCx0Lm5leHQ9MTUsdGhpcy5jb3B5TGlua3NGb3JJdGVtKGUscixuLHZvaWQgMCxjKTtjYXNlIDE1OnJldHVybiB0Lm5leHQ9MTcsVXQoW10uY29uY2F0KHgoKShzLm1hcCgoZnVuY3Rpb24odCl7dmFyIGk9dC5uYW1lO3JldHVybiBsLmNvcHlGb2xkZXIoXCJcIi5jb25jYXQoZSkuY29uY2F0KGksXCIvXCIpLFwiXCIuY29uY2F0KHIpLmNvbmNhdChpLFwiL1wiKSxuKX0pKSkseCgpKHUubWFwKChmdW5jdGlvbih0KXt2YXIgaT10Lm5hbWU7cmV0dXJuIGwuY29weUZpbGUoXCJcIi5jb25jYXQoZSkuY29uY2F0KGkpLFwiXCIuY29uY2F0KHIpLmNvbmNhdChpKSxuKS5jYXRjaChKdCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubWVzc2FnZS5pbmNsdWRlcyhcImFscmVhZHkgZXhpc3RlZFwiKX0pKSl9KSkpKSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHQuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4hKHQgaW5zdGFuY2VvZiBCdCl9KSl9KSk7Y2FzZSAxNzpyZXR1cm4gZj10LnNlbnQsdC5hYnJ1cHQoXCJyZXR1cm5cIiwobz1bY10pLmNvbmNhdC5hcHBseShvLHgoKShmKSkpO2Nhc2UgMTk6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gcy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImNvcHlcIix2YWx1ZTpmdW5jdGlvbih0LGUscil7cmV0dXJuIEZ0KHQsZSk/dGhpcy5jb3B5Rm9sZGVyKHQsZSxyKTpNdCh0LGUpP3RoaXMuY29weUZpbGUodCxlLHIpOnZvaWQgcXQobmV3IEVycm9yKFwiQ2Fubm90IGNvcHkgZnJvbSBhIGZvbGRlciB1cmwgdG8gYSBmaWxlIHVybCBvciB2aWNlIHZlcnNhXCIpKX19LHtrZXk6XCJfZGVsZXRlSXRlbVdpdGhMaW5rc1wiLHZhbHVlOihvPWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgcjtyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiB0Lm5leHQ9Mix0aGlzLmdldEl0ZW1MaW5rcyhlLHtsaW5rczpZdC5JTkNMVURFfSk7Y2FzZSAyOmlmKCEocj10LnNlbnQpLm1ldGEpe3QubmV4dD02O2JyZWFrfXJldHVybiB0Lm5leHQ9Nix0aGlzLl9kZWxldGVJdGVtV2l0aExpbmtzKHIubWV0YSk7Y2FzZSA2OmlmKCFyLmFjbCl7dC5uZXh0PTk7YnJlYWt9cmV0dXJuIHQubmV4dD05LHRoaXMuZGVsZXRlKHIuYWNsKTtjYXNlIDk6cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsdGhpcy5kZWxldGUoZSkpO2Nhc2UgMTA6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKHQpe3JldHVybiBvLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiZGVsZXRlRm9sZGVyQ29udGVudHNcIix2YWx1ZToobj1hKCkoaS5hLm1hcmsoKGZ1bmN0aW9uIHQoZSl7dmFyIHIsbixvLGE9dGhpcztyZXR1cm4gaS5hLndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiB0Lm5leHQ9Mix0aGlzLnJlYWRGb2xkZXIoZSk7Y2FzZSAyOnJldHVybiByPXQuc2VudCxuPXIuZm9sZGVycyxvPXIuZmlsZXMsdC5hYnJ1cHQoXCJyZXR1cm5cIixVdChbXS5jb25jYXQoeCgpKG4ubWFwKChmdW5jdGlvbih0KXt2YXIgZT10LnVybDtyZXR1cm4gYS5kZWxldGVGb2xkZXJSZWN1cnNpdmVseShlKX0pKSkseCgpKG8ubWFwKChmdW5jdGlvbih0KXt2YXIgZT10LnVybDtyZXR1cm4gYS5fZGVsZXRlSXRlbVdpdGhMaW5rcyhlKX0pKSkpKSk7Y2FzZSA2OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImRlbGV0ZUZvbGRlclJlY3Vyc2l2ZWx5XCIsdmFsdWU6KHI9YSgpKGkuYS5tYXJrKChmdW5jdGlvbiB0KGUpe3ZhciByO3JldHVybiBpLmEud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQubmV4dD0yLHRoaXMuZGVsZXRlRm9sZGVyQ29udGVudHMoZSk7Y2FzZSAyOnJldHVybiByPXQuc2VudCx0LnQwPXIsdC5uZXh0PTYsdGhpcy5fZGVsZXRlSXRlbVdpdGhMaW5rcyhlKTtjYXNlIDY6cmV0dXJuIHQudDE9dC5zZW50LHQudDAudW5zaGlmdC5jYWxsKHQudDAsdC50MSksdC5hYnJ1cHQoXCJyZXR1cm5cIixyKTtjYXNlIDk6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKHQpe3JldHVybiByLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwibW92ZVwiLHZhbHVlOihlPWEoKShpLmEubWFyaygoZnVuY3Rpb24gdChlLHIsbil7dmFyIG87cmV0dXJuIGkuYS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gdC5uZXh0PTIsdGhpcy5jb3B5KGUscixuKTtjYXNlIDI6aWYobz10LnNlbnQsIUZ0KGUpKXt0Lm5leHQ9ODticmVha31yZXR1cm4gdC5uZXh0PTYsdGhpcy5kZWxldGVGb2xkZXJSZWN1cnNpdmVseShlKTtjYXNlIDY6dC5uZXh0PTEwO2JyZWFrO2Nhc2UgODpyZXR1cm4gdC5uZXh0PTEwLHRoaXMuX2RlbGV0ZUl0ZW1XaXRoTGlua3MoZSk7Y2FzZSAxMDpyZXR1cm4gdC5hYnJ1cHQoXCJyZXR1cm5cIixvKTtjYXNlIDExOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0LHIsbil7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJyZW5hbWVcIix2YWx1ZTpmdW5jdGlvbih0LGUscil7dmFyIG49QXQodCkrZSsoRnQodCk/XCIvXCI6XCJcIik7cmV0dXJuIHRoaXMubW92ZSh0LG4scil9fV0pLHR9KCkpLHRlPWp0LkZldGNoRXJyb3IsZWU9anQuU2luZ2xlUmVzcG9uc2VFcnJvcjtYdC5GZXRjaEVycm9yPXRlLFh0LlNpbmdsZVJlc3BvbnNlRXJyb3I9ZWUsWHQuTElOS1M9WXQsWHQuTUVSR0U9enQ7ZS5kZWZhdWx0PVh0fV0pLmRlZmF1bHR9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb2xpZC1maWxlLWNsaWVudC5idW5kbGUuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n')},function(module,exports){eval("module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcz83OWU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){eval("var anObject = __webpack_require__(3);\nvar IE8_DOM_DEFINE = __webpack_require__(42);\nvar toPrimitive = __webpack_require__(33);\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanM/ODZjYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsQ0FBYztBQUNyQyxxQkFBcUIsbUJBQU8sQ0FBQyxFQUFtQjtBQUNoRCxrQkFBa0IsbUJBQU8sQ0FBQyxFQUFpQjtBQUMzQzs7QUFFQSxZQUFZLG1CQUFPLENBQUMsQ0FBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsWUFBWTtBQUNmO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n")},function(module,exports){eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanM/NjlhOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n")},function(module,exports){eval("module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanM/ZDNmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(4);\nvar hide = __webpack_require__(7);\nvar has = __webpack_require__(12);\nvar SRC = __webpack_require__(17)('src');\nvar $toString = __webpack_require__(60);\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\n__webpack_require__(20).inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcz8yYWJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyxDQUFXO0FBQ2hDLFdBQVcsbUJBQU8sQ0FBQyxDQUFTO0FBQzVCLFVBQVUsbUJBQU8sQ0FBQyxFQUFRO0FBQzFCLFVBQVUsbUJBQU8sQ0FBQyxFQUFRO0FBQzFCLGdCQUFnQixtQkFBTyxDQUFDLEVBQXVCO0FBQy9DO0FBQ0E7O0FBRUEsbUJBQU8sQ0FBQyxFQUFTO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n")},function(module,exports,__webpack_require__){eval("// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(65);\nvar defined = __webpack_require__(23);\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzPzY4MjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBWTtBQUNsQyxjQUFjLG1CQUFPLENBQUMsRUFBWTtBQUNsQztBQUNBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar anObject = __webpack_require__(3);\nvar toObject = __webpack_require__(39);\nvar toLength = __webpack_require__(24);\nvar toInteger = __webpack_require__(22);\nvar advanceStringIndex = __webpack_require__(27);\nvar regExpExec = __webpack_require__(28);\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\n__webpack_require__(31)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcz9hNDgxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxDQUFjO0FBQ3JDLGVBQWUsbUJBQU8sQ0FBQyxFQUFjO0FBQ3JDLGVBQWUsbUJBQU8sQ0FBQyxFQUFjO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLEVBQWU7QUFDdkMseUJBQXlCLG1CQUFPLENBQUMsRUFBeUI7QUFDMUQsaUJBQWlCLG1CQUFPLENBQUMsRUFBeUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLEVBQWU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQyIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n")},function(module,exports){eval("var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanM/Y2E1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n")},function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanM/MmQ5NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQSIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n")},function(module,exports,__webpack_require__){eval("var core = __webpack_require__(20);\nvar global = __webpack_require__(4);\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: __webpack_require__(21) ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanM/NTUzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsRUFBUztBQUM1QixhQUFhLG1CQUFPLENBQUMsQ0FBVztBQUNoQztBQUNBLGtEQUFrRDs7QUFFbEQ7QUFDQSxxRUFBcUU7QUFDckUsQ0FBQztBQUNEO0FBQ0EsUUFBUSxtQkFBTyxDQUFDLEVBQVk7QUFDNUI7QUFDQSxDQUFDIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n")},function(module,exports){eval("var core = module.exports = { version: '2.6.11' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzPzgzNzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLHVDQUF1QyIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n")},function(module,exports){eval("module.exports = false;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzPzJkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n")},function(module,exports){eval("// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzPzQ1ODgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n")},function(module,exports){eval('// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError("Can\'t call method on  " + it);\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzP2JlMTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){eval("// 7.1.15 ToLength\nvar toInteger = __webpack_require__(22);\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanM/OWRlZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLEVBQWU7QUFDdkM7QUFDQTtBQUNBLDJEQUEyRDtBQUMzRCIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n")},function(module,exports){eval("module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzPzQ2MzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = __webpack_require__(45);\nvar enumBugKeys = __webpack_require__(37);\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcz8wZDU4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsWUFBWSxtQkFBTyxDQUFDLEVBQXlCO0FBQzdDLGtCQUFrQixtQkFBTyxDQUFDLEVBQWtCOztBQUU1QztBQUNBO0FBQ0EiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar at = __webpack_require__(57)(true);\n\n // `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? at(S, index).length : 1);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcz8wMzkwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsU0FBUyxtQkFBTyxDQUFDLEVBQWM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar classof = __webpack_require__(58);\nvar builtinExec = RegExp.prototype.exec;\n\n // `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw new TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n  if (classof(R) !== 'RegExp') {\n    throw new TypeError('RegExp#exec called on incompatible receiver');\n  }\n  return builtinExec.call(R, S);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcz81ZjFiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyxFQUFZO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBidWlsdGluRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcblxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cbiAgcmV0dXJuIGJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar regexpFlags = __webpack_require__(30);\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcz81MjBhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQixtQkFBTyxDQUFDLEVBQVU7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMEJBQTBCO0FBQzdDO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29\n")},function(module,exports,__webpack_require__){"use strict";eval("\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = __webpack_require__(3);\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcz8wYmZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxlQUFlLG1CQUFPLENBQUMsQ0FBYztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n")},function(module,exports,__webpack_require__){"use strict";eval("\n__webpack_require__(59);\nvar redefine = __webpack_require__(14);\nvar hide = __webpack_require__(7);\nvar fails = __webpack_require__(10);\nvar defined = __webpack_require__(23);\nvar wks = __webpack_require__(2);\nvar regexpExec = __webpack_require__(29);\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzPzIxNGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixtQkFBTyxDQUFDLEVBQW1CO0FBQzNCLGVBQWUsbUJBQU8sQ0FBQyxFQUFhO0FBQ3BDLFdBQVcsbUJBQU8sQ0FBQyxDQUFTO0FBQzVCLFlBQVksbUJBQU8sQ0FBQyxFQUFVO0FBQzlCLGNBQWMsbUJBQU8sQ0FBQyxFQUFZO0FBQ2xDLFVBQVUsbUJBQU8sQ0FBQyxDQUFRO0FBQzFCLGlCQUFpQixtQkFBTyxDQUFDLEVBQWdCOztBQUV6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDRDQUE0QztBQUNyRTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixVQUFVO0FBQ3ZDO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixtQkFBbUIsYUFBYTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxXQUFXO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxxQ0FBcUM7QUFDckU7QUFDQTtBQUNBLDJCQUEyQixnQ0FBZ0M7QUFDM0Q7QUFDQTtBQUNBIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBkZWZpbmVkLFxuICAgICAgU1lNQk9MLFxuICAgICAgJydbS0VZXSxcbiAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICB9XG4gICAgKTtcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(4);\nvar core = __webpack_require__(20);\nvar hide = __webpack_require__(7);\nvar redefine = __webpack_require__(14);\nvar ctx = __webpack_require__(61);\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanM/NWNhMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsQ0FBVztBQUNoQyxXQUFXLG1CQUFPLENBQUMsRUFBUztBQUM1QixXQUFXLG1CQUFPLENBQUMsQ0FBUztBQUM1QixlQUFlLG1CQUFPLENBQUMsRUFBYTtBQUNwQyxVQUFVLG1CQUFPLENBQUMsRUFBUTtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0YsdUJBQXVCO0FBQ3pHLGlFQUFpRTtBQUNqRSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGNBQWM7QUFDZCxjQUFjO0FBQ2QsY0FBYztBQUNkLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGdCQUFnQjtBQUNoQiIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32\n")},function(module,exports,__webpack_require__){eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(13);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanM/NmE5OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxFQUFjO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n")},function(module,exports,__webpack_require__){eval("var $iterators = __webpack_require__(62);\nvar getKeys = __webpack_require__(26);\nvar redefine = __webpack_require__(14);\nvar global = __webpack_require__(4);\nvar hide = __webpack_require__(7);\nvar Iterators = __webpack_require__(35);\nvar wks = __webpack_require__(2);\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanM/YWM2YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxFQUFzQjtBQUMvQyxjQUFjLG1CQUFPLENBQUMsRUFBZ0I7QUFDdEMsZUFBZSxtQkFBTyxDQUFDLEVBQWE7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLENBQVc7QUFDaEMsV0FBVyxtQkFBTyxDQUFDLENBQVM7QUFDNUIsZ0JBQWdCLG1CQUFPLENBQUMsRUFBYztBQUN0QyxVQUFVLG1CQUFPLENBQUMsQ0FBUTtBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9EQUFvRCx3QkFBd0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34\n")},function(module,exports){eval("module.exports = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanM/ODRmMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge307XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n")},function(module,exports,__webpack_require__){eval("var shared = __webpack_require__(19)('keys');\nvar uid = __webpack_require__(17);\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzPzYxM2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLEVBQVc7QUFDaEMsVUFBVSxtQkFBTyxDQUFDLEVBQVE7QUFDMUI7QUFDQTtBQUNBIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36\n")},function(module,exports){eval("// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzP2UxMWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n")},function(module,exports,__webpack_require__){eval("var def = __webpack_require__(11).f;\nvar has = __webpack_require__(12);\nvar TAG = __webpack_require__(2)('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcz83ZjIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyxFQUFjO0FBQ2hDLFVBQVUsbUJBQU8sQ0FBQyxFQUFRO0FBQzFCLFVBQVUsbUJBQU8sQ0FBQyxDQUFROztBQUUxQjtBQUNBLG9FQUFvRSxpQ0FBaUM7QUFDckciLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38\n")},function(module,exports,__webpack_require__){eval("// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(23);\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanM/NGJmOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFZO0FBQ2xDO0FBQ0E7QUFDQSIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///39\n")},function(module,exports){eval("exports.f = {}.propertyIsEnumerable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzPzUyYTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyIsImZpbGUiOiI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n")},function(module,exports){eval("module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzP2Q4ZTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///41\n")},function(module,exports,__webpack_require__){eval("module.exports = !__webpack_require__(8) && !__webpack_require__(10)(function () {\n  return Object.defineProperty(__webpack_require__(43)('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcz9jNjlhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLENBQWdCLE1BQU0sbUJBQU8sQ0FBQyxFQUFVO0FBQ2xFLCtCQUErQixtQkFBTyxDQUFDLEVBQWUsZ0JBQWdCLG1CQUFtQixVQUFVLEVBQUUsRUFBRTtBQUN2RyxDQUFDIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n")},function(module,exports,__webpack_require__){eval("var isObject = __webpack_require__(13);\nvar document = __webpack_require__(4).document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzPzIzMGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLEVBQWM7QUFDckMsZUFBZSxtQkFBTyxDQUFDLENBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0My5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = __webpack_require__(3);\nvar dPs = __webpack_require__(68);\nvar enumBugKeys = __webpack_require__(37);\nvar IE_PROTO = __webpack_require__(36)('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(43)('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(71).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzPzJhZWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxlQUFlLG1CQUFPLENBQUMsQ0FBYztBQUNyQyxVQUFVLG1CQUFPLENBQUMsRUFBZTtBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyxFQUFrQjtBQUM1QyxlQUFlLG1CQUFPLENBQUMsRUFBZTtBQUN0Qyx5QkFBeUI7QUFDekI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLEVBQWU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsbUJBQU8sQ0FBQyxFQUFTO0FBQ25CLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EiLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44\n")},function(module,exports,__webpack_require__){eval("var has = __webpack_require__(12);\nvar toIObject = __webpack_require__(15);\nvar arrayIndexOf = __webpack_require__(69)(false);\nvar IE_PROTO = __webpack_require__(36)('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcz9jZTEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyxFQUFRO0FBQzFCLGdCQUFnQixtQkFBTyxDQUFDLEVBQWU7QUFDdkMsbUJBQW1CLG1CQUFPLENBQUMsRUFBbUI7QUFDOUMsZUFBZSxtQkFBTyxDQUFDLEVBQWU7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0NS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n")},function(module,exports,__webpack_require__){eval("var global = __webpack_require__(4);\nvar core = __webpack_require__(20);\nvar LIBRARY = __webpack_require__(21);\nvar wksExt = __webpack_require__(47);\nvar defineProperty = __webpack_require__(11).f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzPzNhNzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLENBQVc7QUFDaEMsV0FBVyxtQkFBTyxDQUFDLEVBQVM7QUFDNUIsY0FBYyxtQkFBTyxDQUFDLEVBQVk7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLEVBQVk7QUFDakMscUJBQXFCLG1CQUFPLENBQUMsRUFBYztBQUMzQztBQUNBLDBEQUEwRCxzQkFBc0I7QUFDaEYsa0ZBQWtGLHdCQUF3QjtBQUMxRyIsImZpbGUiOiI0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n")},function(module,exports,__webpack_require__){eval("exports.f = __webpack_require__(2);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzPzM3YzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxtQkFBTyxDQUFDLENBQVEiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n")},function(module,exports){eval("exports.f = Object.getOwnPropertySymbols;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcz8yNjIxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = __webpack_require__(45);\nvar hiddenKeys = __webpack_require__(37).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcz85MDkzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsWUFBWSxtQkFBTyxDQUFDLEVBQXlCO0FBQzdDLGlCQUFpQixtQkFBTyxDQUFDLEVBQWtCOztBQUUzQztBQUNBO0FBQ0EiLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///49\n")},function(module,exports){eval("function DefaultGraph () {\n  this.value = ''\n}\n\nDefaultGraph.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType\n}\n\nDefaultGraph.prototype.termType = 'DefaultGraph'\n\nmodule.exports = DefaultGraph\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvbGliL2RlZmF1bHQtZ3JhcGguanM/ZDc2YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gRGVmYXVsdEdyYXBoICgpIHtcbiAgdGhpcy52YWx1ZSA9ICcnXG59XG5cbkRlZmF1bHRHcmFwaC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHJldHVybiAhIW90aGVyICYmIG90aGVyLnRlcm1UeXBlID09PSB0aGlzLnRlcm1UeXBlXG59XG5cbkRlZmF1bHRHcmFwaC5wcm90b3R5cGUudGVybVR5cGUgPSAnRGVmYXVsdEdyYXBoJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlZmF1bHRHcmFwaFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n")},function(module,exports){eval("function NamedNode (iri) {\n  this.value = iri\n}\n\nNamedNode.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value\n}\n\nNamedNode.prototype.termType = 'NamedNode'\n\nmodule.exports = NamedNode\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvbGliL25hbWVkLW5vZGUuanM/MTFhOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwiZmlsZSI6IjUxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gTmFtZWROb2RlIChpcmkpIHtcbiAgdGhpcy52YWx1ZSA9IGlyaVxufVxuXG5OYW1lZE5vZGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICByZXR1cm4gISFvdGhlciAmJiBvdGhlci50ZXJtVHlwZSA9PT0gdGhpcy50ZXJtVHlwZSAmJiBvdGhlci52YWx1ZSA9PT0gdGhpcy52YWx1ZVxufVxuXG5OYW1lZE5vZGUucHJvdG90eXBlLnRlcm1UeXBlID0gJ05hbWVkTm9kZSdcblxubW9kdWxlLmV4cG9ydHMgPSBOYW1lZE5vZGVcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51\n")},,function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL2Jvb3RzdHJhcC9ib290c3RyYXAubWluLmNzcz8xOGU2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjUzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///53\n")},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzLmNzcz9kYjFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54\n")},function(module,exports,__webpack_require__){eval("// 7.2.8 IsRegExp(argument)\nvar isObject = __webpack_require__(13);\nvar cof = __webpack_require__(18);\nvar MATCH = __webpack_require__(2)('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanM/YWFlMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxFQUFjO0FBQ3JDLFVBQVUsbUJBQU8sQ0FBQyxFQUFRO0FBQzFCLFlBQVksbUJBQU8sQ0FBQyxDQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjU1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55\n")},function(module,exports,__webpack_require__){eval("// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = __webpack_require__(3);\nvar aFunction = __webpack_require__(41);\nvar SPECIES = __webpack_require__(2)('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzP2ViZDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxlQUFlLG1CQUFPLENBQUMsQ0FBYztBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyxFQUFlO0FBQ3ZDLGNBQWMsbUJBQU8sQ0FBQyxDQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n")},function(module,exports,__webpack_require__){eval("var toInteger = __webpack_require__(22);\nvar defined = __webpack_require__(23);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanM/MDJmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQU8sQ0FBQyxFQUFlO0FBQ3ZDLGNBQWMsbUJBQU8sQ0FBQyxFQUFZO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///57\n")},function(module,exports,__webpack_require__){eval("// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(18);\nvar TAG = __webpack_require__(2)('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzPzIzYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxVQUFVLG1CQUFPLENBQUMsRUFBUTtBQUMxQixVQUFVLG1CQUFPLENBQUMsQ0FBUTtBQUMxQjtBQUNBLDJCQUEyQixrQkFBa0IsRUFBRTs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLFlBQVk7QUFDZjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///58\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar regexpExec = __webpack_require__(29);\n__webpack_require__(32)({\n  target: 'RegExp',\n  proto: true,\n  forced: regexpExec !== /./.exec\n}, {\n  exec: regexpExec\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcz9iMGM1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsaUJBQWlCLG1CQUFPLENBQUMsRUFBZ0I7QUFDekMsbUJBQU8sQ0FBQyxFQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUMiLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///59\n")},function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(19)('native-function-to-string', Function.toString);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanM/ZmE1YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxFQUFXIiwiZmlsZSI6IjYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60\n")},function(module,exports,__webpack_require__){eval("// optional / simple context binding\nvar aFunction = __webpack_require__(41);\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanM/OWI0MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLEVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjYxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar addToUnscopables = __webpack_require__(63);\nvar step = __webpack_require__(64);\nvar Iterators = __webpack_require__(35);\nvar toIObject = __webpack_require__(15);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(66)(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcz9jYWRmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsdUJBQXVCLG1CQUFPLENBQUMsRUFBdUI7QUFDdEQsV0FBVyxtQkFBTyxDQUFDLEVBQWM7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsRUFBYztBQUN0QyxnQkFBZ0IsbUJBQU8sQ0FBQyxFQUFlOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBTyxDQUFDLEVBQWdCO0FBQ3pDLGdDQUFnQztBQUNoQyxjQUFjO0FBQ2QsaUJBQWlCO0FBQ2pCO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiI2Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///62\n")},function(module,exports,__webpack_require__){eval("// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = __webpack_require__(2)('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(7)(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanM/OWM2YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLENBQVE7QUFDbEM7QUFDQSwwQ0FBMEMsbUJBQU8sQ0FBQyxDQUFTLDZCQUE2QjtBQUN4RjtBQUNBO0FBQ0EiLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///63\n")},function(module,exports){eval("module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanM/ZDUzYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFVBQVU7QUFDViIsImZpbGUiOiI2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///64\n")},function(module,exports,__webpack_require__){eval("// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(18);\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzPzYyNmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxVQUFVLG1CQUFPLENBQUMsRUFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///65\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar LIBRARY = __webpack_require__(21);\nvar $export = __webpack_require__(32);\nvar redefine = __webpack_require__(14);\nvar hide = __webpack_require__(7);\nvar Iterators = __webpack_require__(35);\nvar $iterCreate = __webpack_require__(67);\nvar setToStringTag = __webpack_require__(38);\nvar getPrototypeOf = __webpack_require__(72);\nvar ITERATOR = __webpack_require__(2)('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcz8wMWY5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsY0FBYyxtQkFBTyxDQUFDLEVBQVk7QUFDbEMsY0FBYyxtQkFBTyxDQUFDLEVBQVc7QUFDakMsZUFBZSxtQkFBTyxDQUFDLEVBQWE7QUFDcEMsV0FBVyxtQkFBTyxDQUFDLENBQVM7QUFDNUIsZ0JBQWdCLG1CQUFPLENBQUMsRUFBYztBQUN0QyxrQkFBa0IsbUJBQU8sQ0FBQyxFQUFnQjtBQUMxQyxxQkFBcUIsbUJBQU8sQ0FBQyxFQUFzQjtBQUNuRCxxQkFBcUIsbUJBQU8sQ0FBQyxFQUFlO0FBQzVDLGVBQWUsbUJBQU8sQ0FBQyxDQUFRO0FBQy9CLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7O0FBRUEsOEJBQThCLGFBQWE7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsb0NBQW9DO0FBQzdFLDZDQUE2QyxvQ0FBb0M7QUFDakYsS0FBSyw0QkFBNEIsb0NBQW9DO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7QUFDQSxrQ0FBa0MsMkJBQTJCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar create = __webpack_require__(44);\nvar descriptor = __webpack_require__(25);\nvar setToStringTag = __webpack_require__(38);\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(7)(IteratorPrototype, __webpack_require__(2)('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcz80MWEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsYUFBYSxtQkFBTyxDQUFDLEVBQWtCO0FBQ3ZDLGlCQUFpQixtQkFBTyxDQUFDLEVBQWtCO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLEVBQXNCO0FBQ25EOztBQUVBO0FBQ0EsbUJBQU8sQ0FBQyxDQUFTLHFCQUFxQixtQkFBTyxDQUFDLENBQVEsNEJBQTRCLGFBQWEsRUFBRTs7QUFFakc7QUFDQSxxREFBcUQsNEJBQTRCO0FBQ2pGO0FBQ0EiLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///67\n")},function(module,exports,__webpack_require__){eval("var dP = __webpack_require__(11);\nvar anObject = __webpack_require__(3);\nvar getKeys = __webpack_require__(26);\n\nmodule.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzPzE0OTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxtQkFBTyxDQUFDLEVBQWM7QUFDL0IsZUFBZSxtQkFBTyxDQUFDLENBQWM7QUFDckMsY0FBYyxtQkFBTyxDQUFDLEVBQWdCOztBQUV0QyxpQkFBaUIsbUJBQU8sQ0FBQyxDQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///68\n")},function(module,exports,__webpack_require__){eval("// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(15);\nvar toLength = __webpack_require__(24);\nvar toAbsoluteIndex = __webpack_require__(70);\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcz9jMzY2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxFQUFlO0FBQ3ZDLGVBQWUsbUJBQU8sQ0FBQyxFQUFjO0FBQ3JDLHNCQUFzQixtQkFBTyxDQUFDLEVBQXNCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxZQUFZLGVBQWU7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiI2OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///69\n")},function(module,exports,__webpack_require__){eval("var toInteger = __webpack_require__(22);\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcz83N2YxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLEVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjcwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///70\n")},function(module,exports,__webpack_require__){eval("var document = __webpack_require__(4).document;\nmodule.exports = document && document.documentElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzP2ZhYjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLENBQVc7QUFDbEMiLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///71\n")},function(module,exports,__webpack_require__){eval("// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = __webpack_require__(12);\nvar toObject = __webpack_require__(39);\nvar IE_PROTO = __webpack_require__(36)('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzPzM4ZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxVQUFVLG1CQUFPLENBQUMsRUFBUTtBQUMxQixlQUFlLG1CQUFPLENBQUMsRUFBYztBQUNyQyxlQUFlLG1CQUFPLENBQUMsRUFBZTtBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6IjcyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n")},function(module,exports,__webpack_require__){"use strict";eval("\n__webpack_require__(74);\nvar anObject = __webpack_require__(3);\nvar $flags = __webpack_require__(30);\nvar DESCRIPTORS = __webpack_require__(8);\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  __webpack_require__(14)(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (__webpack_require__(10)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzPzZiNTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixtQkFBTyxDQUFDLEVBQW9CO0FBQzVCLGVBQWUsbUJBQU8sQ0FBQyxDQUFjO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQyxFQUFVO0FBQy9CLGtCQUFrQixtQkFBTyxDQUFDLENBQWdCO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQSxFQUFFLG1CQUFPLENBQUMsRUFBYTtBQUN2Qjs7QUFFQTtBQUNBLElBQUksbUJBQU8sQ0FBQyxFQUFVLGVBQWUsd0JBQXdCLDBCQUEwQixZQUFZLEVBQUU7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiI3My5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///73\n")},function(module,exports,__webpack_require__){eval("// 21.2.5.3 get RegExp.prototype.flags()\nif (__webpack_require__(8) && /./g.flags != 'g') __webpack_require__(11).f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: __webpack_require__(30)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanM/Mzg0NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLElBQUksbUJBQU8sQ0FBQyxDQUFnQix3QkFBd0IsbUJBQU8sQ0FBQyxFQUFjO0FBQzFFO0FBQ0EsT0FBTyxtQkFBTyxDQUFDLEVBQVU7QUFDekIsQ0FBQyIsImZpbGUiOiI3NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///74\n")},function(module,exports,__webpack_require__){eval("var META = __webpack_require__(17)('meta');\nvar isObject = __webpack_require__(13);\nvar has = __webpack_require__(12);\nvar setDesc = __webpack_require__(11).f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !__webpack_require__(10)(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzPzY3YWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLEVBQVE7QUFDM0IsZUFBZSxtQkFBTyxDQUFDLEVBQWM7QUFDckMsVUFBVSxtQkFBTyxDQUFDLEVBQVE7QUFDMUIsY0FBYyxtQkFBTyxDQUFDLEVBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBVTtBQUNoQyxpREFBaUQ7QUFDakQsQ0FBQztBQUNEO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsU0FBUztBQUNULEdBQUcsRUFBRTtBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3NS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///75\n")},function(module,exports,__webpack_require__){eval("// all enumerable object keys, includes symbols\nvar getKeys = __webpack_require__(26);\nvar gOPS = __webpack_require__(48);\nvar pIE = __webpack_require__(40);\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanM/ZDRjMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFnQjtBQUN0QyxXQUFXLG1CQUFPLENBQUMsRUFBZ0I7QUFDbkMsVUFBVSxtQkFBTyxDQUFDLEVBQWU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6Ijc2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///76\n")},function(module,exports,__webpack_require__){eval("// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(18);\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcz8xMTY5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLEVBQVE7QUFDMUI7QUFDQTtBQUNBIiwiZmlsZSI6Ijc3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///77\n")},function(module,exports,__webpack_require__){eval("// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = __webpack_require__(15);\nvar gOPN = __webpack_require__(49).f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanM/N2JiYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLEVBQWU7QUFDdkMsV0FBVyxtQkFBTyxDQUFDLEVBQWdCO0FBQ25DLGlCQUFpQjs7QUFFakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiI3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///78\n")},function(module,exports,__webpack_require__){eval("var pIE = __webpack_require__(40);\nvar createDesc = __webpack_require__(25);\nvar toIObject = __webpack_require__(15);\nvar toPrimitive = __webpack_require__(33);\nvar has = __webpack_require__(12);\nvar IE8_DOM_DEFINE = __webpack_require__(42);\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcz8xMWU5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyxFQUFlO0FBQ2pDLGlCQUFpQixtQkFBTyxDQUFDLEVBQWtCO0FBQzNDLGdCQUFnQixtQkFBTyxDQUFDLEVBQWU7QUFDdkMsa0JBQWtCLG1CQUFPLENBQUMsRUFBaUI7QUFDM0MsVUFBVSxtQkFBTyxDQUFDLEVBQVE7QUFDMUIscUJBQXFCLG1CQUFPLENBQUMsRUFBbUI7QUFDaEQ7O0FBRUEsWUFBWSxtQkFBTyxDQUFDLENBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxZQUFZO0FBQ2Y7QUFDQSIsImZpbGUiOiI3OS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79\n")},function(module,exports,__webpack_require__){eval("var BlankNode = __webpack_require__(81)\nvar DefaultGraph = __webpack_require__(50)\nvar Literal = __webpack_require__(82)\nvar NamedNode = __webpack_require__(51)\nvar Quad = __webpack_require__(83)\nvar Variable = __webpack_require__(84)\n\nfunction DataFactory () {}\n\nDataFactory.namedNode = function (value) {\n  return new NamedNode(value)\n}\n\nDataFactory.blankNode = function (value) {\n  return new BlankNode(value)\n}\n\nDataFactory.literal = function (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nDataFactory.defaultGraph = function () {\n  return DataFactory.defaultGraphInstance\n}\n\nDataFactory.variable = function (value) {\n  return new Variable(value)\n}\n\nDataFactory.triple = function (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nDataFactory.quad = function (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nDataFactory.defaultGraphInstance = new DefaultGraph()\n\nmodule.exports = DataFactory\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvbGliL2RhdGEtZmFjdG9yeS5qcz8zY2YxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLEVBQWM7QUFDdEMsbUJBQW1CLG1CQUFPLENBQUMsRUFBaUI7QUFDNUMsY0FBYyxtQkFBTyxDQUFDLEVBQVc7QUFDakMsZ0JBQWdCLG1CQUFPLENBQUMsRUFBYztBQUN0QyxXQUFXLG1CQUFPLENBQUMsRUFBUTtBQUMzQixlQUFlLG1CQUFPLENBQUMsRUFBWTs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQmxhbmtOb2RlID0gcmVxdWlyZSgnLi9ibGFuay1ub2RlJylcbnZhciBEZWZhdWx0R3JhcGggPSByZXF1aXJlKCcuL2RlZmF1bHQtZ3JhcGgnKVxudmFyIExpdGVyYWwgPSByZXF1aXJlKCcuL2xpdGVyYWwnKVxudmFyIE5hbWVkTm9kZSA9IHJlcXVpcmUoJy4vbmFtZWQtbm9kZScpXG52YXIgUXVhZCA9IHJlcXVpcmUoJy4vcXVhZCcpXG52YXIgVmFyaWFibGUgPSByZXF1aXJlKCcuL3ZhcmlhYmxlJylcblxuZnVuY3Rpb24gRGF0YUZhY3RvcnkgKCkge31cblxuRGF0YUZhY3RvcnkubmFtZWROb2RlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgTmFtZWROb2RlKHZhbHVlKVxufVxuXG5EYXRhRmFjdG9yeS5ibGFua05vZGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBCbGFua05vZGUodmFsdWUpXG59XG5cbkRhdGFGYWN0b3J5LmxpdGVyYWwgPSBmdW5jdGlvbiAodmFsdWUsIGxhbmd1YWdlT3JEYXRhdHlwZSkge1xuICBpZiAodHlwZW9mIGxhbmd1YWdlT3JEYXRhdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAobGFuZ3VhZ2VPckRhdGF0eXBlLmluZGV4T2YoJzonKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBuZXcgTGl0ZXJhbCh2YWx1ZSwgbGFuZ3VhZ2VPckRhdGF0eXBlKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgTGl0ZXJhbCh2YWx1ZSwgbnVsbCwgRGF0YUZhY3RvcnkubmFtZWROb2RlKGxhbmd1YWdlT3JEYXRhdHlwZSkpXG4gIH1cblxuICByZXR1cm4gbmV3IExpdGVyYWwodmFsdWUsIG51bGwsIGxhbmd1YWdlT3JEYXRhdHlwZSlcbn1cblxuRGF0YUZhY3RvcnkuZGVmYXVsdEdyYXBoID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gRGF0YUZhY3RvcnkuZGVmYXVsdEdyYXBoSW5zdGFuY2Vcbn1cblxuRGF0YUZhY3RvcnkudmFyaWFibGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBWYXJpYWJsZSh2YWx1ZSlcbn1cblxuRGF0YUZhY3RvcnkudHJpcGxlID0gZnVuY3Rpb24gKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0KSB7XG4gIHJldHVybiBEYXRhRmFjdG9yeS5xdWFkKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0KVxufVxuXG5EYXRhRmFjdG9yeS5xdWFkID0gZnVuY3Rpb24gKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCkge1xuICByZXR1cm4gbmV3IFF1YWQoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoIHx8IERhdGFGYWN0b3J5LmRlZmF1bHRHcmFwaEluc3RhbmNlKVxufVxuXG5EYXRhRmFjdG9yeS5kZWZhdWx0R3JhcGhJbnN0YW5jZSA9IG5ldyBEZWZhdWx0R3JhcGgoKVxuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFGYWN0b3J5XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///80\n")},function(module,exports){eval("function BlankNode (id) {\n  this.value = id || ('b' + (++BlankNode.nextId))\n}\n\nBlankNode.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value\n}\n\nBlankNode.prototype.termType = 'BlankNode'\n\nBlankNode.nextId = 0\n\nmodule.exports = BlankNode\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvbGliL2JsYW5rLW5vZGUuanM/NDdiNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBIiwiZmlsZSI6IjgxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gQmxhbmtOb2RlIChpZCkge1xuICB0aGlzLnZhbHVlID0gaWQgfHwgKCdiJyArICgrK0JsYW5rTm9kZS5uZXh0SWQpKVxufVxuXG5CbGFua05vZGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICByZXR1cm4gISFvdGhlciAmJiBvdGhlci50ZXJtVHlwZSA9PT0gdGhpcy50ZXJtVHlwZSAmJiBvdGhlci52YWx1ZSA9PT0gdGhpcy52YWx1ZVxufVxuXG5CbGFua05vZGUucHJvdG90eXBlLnRlcm1UeXBlID0gJ0JsYW5rTm9kZSdcblxuQmxhbmtOb2RlLm5leHRJZCA9IDBcblxubW9kdWxlLmV4cG9ydHMgPSBCbGFua05vZGVcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///81\n")},function(module,exports,__webpack_require__){eval("var NamedNode = __webpack_require__(51)\n\nfunction Literal (value, language, datatype) {\n  this.value = value\n  this.datatype = Literal.stringDatatype\n  this.language = ''\n\n  if (language) {\n    this.language = language\n    this.datatype = Literal.langStringDatatype\n  } else if (datatype) {\n    this.datatype = datatype\n  }\n}\n\nLiteral.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value &&\n    other.language === this.language && other.datatype.equals(this.datatype)\n}\n\nLiteral.prototype.termType = 'Literal'\nLiteral.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')\nLiteral.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')\n\nmodule.exports = Literal\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvbGliL2xpdGVyYWwuanM/NWFmYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQU8sQ0FBQyxFQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI4Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBOYW1lZE5vZGUgPSByZXF1aXJlKCcuL25hbWVkLW5vZGUnKVxuXG5mdW5jdGlvbiBMaXRlcmFsICh2YWx1ZSwgbGFuZ3VhZ2UsIGRhdGF0eXBlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZVxuICB0aGlzLmRhdGF0eXBlID0gTGl0ZXJhbC5zdHJpbmdEYXRhdHlwZVxuICB0aGlzLmxhbmd1YWdlID0gJydcblxuICBpZiAobGFuZ3VhZ2UpIHtcbiAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2VcbiAgICB0aGlzLmRhdGF0eXBlID0gTGl0ZXJhbC5sYW5nU3RyaW5nRGF0YXR5cGVcbiAgfSBlbHNlIGlmIChkYXRhdHlwZSkge1xuICAgIHRoaXMuZGF0YXR5cGUgPSBkYXRhdHlwZVxuICB9XG59XG5cbkxpdGVyYWwucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICByZXR1cm4gISFvdGhlciAmJiBvdGhlci50ZXJtVHlwZSA9PT0gdGhpcy50ZXJtVHlwZSAmJiBvdGhlci52YWx1ZSA9PT0gdGhpcy52YWx1ZSAmJlxuICAgIG90aGVyLmxhbmd1YWdlID09PSB0aGlzLmxhbmd1YWdlICYmIG90aGVyLmRhdGF0eXBlLmVxdWFscyh0aGlzLmRhdGF0eXBlKVxufVxuXG5MaXRlcmFsLnByb3RvdHlwZS50ZXJtVHlwZSA9ICdMaXRlcmFsJ1xuTGl0ZXJhbC5sYW5nU3RyaW5nRGF0YXR5cGUgPSBuZXcgTmFtZWROb2RlKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjbGFuZ1N0cmluZycpXG5MaXRlcmFsLnN0cmluZ0RhdGF0eXBlID0gbmV3IE5hbWVkTm9kZSgnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjc3RyaW5nJylcblxubW9kdWxlLmV4cG9ydHMgPSBMaXRlcmFsXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///82\n")},function(module,exports,__webpack_require__){eval("var DefaultGraph = __webpack_require__(50)\n\nfunction Quad (subject, predicate, object, graph) {\n  this.subject = subject\n  this.predicate = predicate\n  this.object = object\n\n  if (graph) {\n    this.graph = graph\n  } else {\n    this.graph = new DefaultGraph()\n  }\n}\n\nQuad.prototype.equals = function (other) {\n  return !!other && other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&\n    other.object.equals(this.object) && other.graph.equals(this.graph)\n}\n\nmodule.exports = Quad\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvbGliL3F1YWQuanM/ZTFjYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUIsbUJBQU8sQ0FBQyxFQUFpQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGVmYXVsdEdyYXBoID0gcmVxdWlyZSgnLi9kZWZhdWx0LWdyYXBoJylcblxuZnVuY3Rpb24gUXVhZCAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gIHRoaXMuc3ViamVjdCA9IHN1YmplY3RcbiAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGVcbiAgdGhpcy5vYmplY3QgPSBvYmplY3RcblxuICBpZiAoZ3JhcGgpIHtcbiAgICB0aGlzLmdyYXBoID0gZ3JhcGhcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdyYXBoID0gbmV3IERlZmF1bHRHcmFwaCgpXG4gIH1cbn1cblxuUXVhZC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHJldHVybiAhIW90aGVyICYmIG90aGVyLnN1YmplY3QuZXF1YWxzKHRoaXMuc3ViamVjdCkgJiYgb3RoZXIucHJlZGljYXRlLmVxdWFscyh0aGlzLnByZWRpY2F0ZSkgJiZcbiAgICBvdGhlci5vYmplY3QuZXF1YWxzKHRoaXMub2JqZWN0KSAmJiBvdGhlci5ncmFwaC5lcXVhbHModGhpcy5ncmFwaClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRdWFkXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///83\n")},function(module,exports){eval("function Variable (name) {\n  this.value = name\n}\n\nVariable.prototype.equals = function (other) {\n  return !!other && other.termType === this.termType && other.value === this.value\n}\n\nVariable.prototype.termType = 'Variable'\n\nmodule.exports = Variable\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvbGliL3ZhcmlhYmxlLmpzP2E1NWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiI4NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIFZhcmlhYmxlIChuYW1lKSB7XG4gIHRoaXMudmFsdWUgPSBuYW1lXG59XG5cblZhcmlhYmxlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgcmV0dXJuICEhb3RoZXIgJiYgb3RoZXIudGVybVR5cGUgPT09IHRoaXMudGVybVR5cGUgJiYgb3RoZXIudmFsdWUgPT09IHRoaXMudmFsdWVcbn1cblxuVmFyaWFibGUucHJvdG90eXBlLnRlcm1UeXBlID0gJ1ZhcmlhYmxlJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZhcmlhYmxlXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///84\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar anObject = __webpack_require__(3);\nvar toLength = __webpack_require__(24);\nvar advanceStringIndex = __webpack_require__(27);\nvar regExpExec = __webpack_require__(28);\n\n// @@match logic\n__webpack_require__(31)('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regExpExec(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanM/NDkxNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsQ0FBYztBQUNyQyxlQUFlLG1CQUFPLENBQUMsRUFBYztBQUNyQyx5QkFBeUIsbUJBQU8sQ0FBQyxFQUF5QjtBQUMxRCxpQkFBaUIsbUJBQU8sQ0FBQyxFQUF5Qjs7QUFFbEQ7QUFDQSxtQkFBTyxDQUFDLEVBQWU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6Ijg1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///85\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/css/bootstrap/bootstrap.min.css\nvar bootstrap_min = __webpack_require__(53);\n\n// EXTERNAL MODULE: ./src/styles.css\nvar src_styles = __webpack_require__(54);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.split.js\nvar es6_regexp_split = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/views/util_activity-pub.js\n\nasync function message(uri) {\n  let m = {};\n  m.uri = uri; // ActivityPub\n\n  let ty = await solid.data[uri].as$type;\n  m.type = "".concat(ty);\n  let at = await solid.data[uri].as$attributedTo;\n  m.attributedTo = "".concat(at);\n  let su = await solid.data[uri].as$summary;\n  m.summary = "".concat(su);\n  let pu = await solid.data[uri].as$published;\n  m.published = "".concat(pu); // Solid\n\n  let at_name = (await solid.data["".concat(at)].vcard$fn) || "".concat(at).split("/")[2].split(\'.\')[0];\n  m.at_name = "".concat(at_name);\n  let ph = await solid.data["".concat(at)].vcard$hasPhoto;\n  m.at_photo = "".concat(ph); //!= "undefined" ? `${photo}` : "https://solid.github.io/solid-ui/src/icons/noun_15059.svg"\n  // tools\n\n  m.delay = delay("".concat(pu));\n  m.shortType = localName("".concat(ty)); // activity\n\n  let li = await solid.data[uri].as$link;\n  m.link = "".concat(li);\n  return m;\n}\nasync function util_activity_pub_activity(uri) {\n  let a = {};\n  /*  let objects = []\r\n    for await (const object of solid.data[`${li}`].as$object){\r\n      /*   let obj = {}\r\n      obj.uri = `${object}`\r\n      console.log(obj)\r\n   obj.content = await solid.data[obj.uri].as$content*/\n\n  /*  objects = [...objects, `${object}`]\r\n  }\r\n  m.activity.objects = objects*/\n\n  /*  let obj = await solid.data[`${li}`].as$object\r\n  m.activity.object = {}\r\n  m.activity.object.uri = `${obj}`\r\n  let cont = await solid.data[`${obj}`].as$content\r\n  m.activity.object.content = `${cont}`*/\n\n  return a;\n}\nasync function util_activity_pub_objects(uri) {\n  let o = [];\n  return o;\n}\n\nfunction localName(strPromise) {\n  let str = "".concat(strPromise);\n  var ln = str.substring(str.lastIndexOf(\'#\') + 1);\n  ln == str ? ln = str.substring(str.lastIndexOf(\'/\') + 1) : "";\n  return ln;\n}\n\nfunction delay(published) {\n  let diff = new Date().getTime() - new Date(published).getTime();\n  let minute = 1000 * 60;\n  let minutes = Math.floor(diff / minute);\n  let heures = Math.floor(minutes / 60);\n  let jours = Math.floor(heures / 24);\n  let mois = Math.floor(jours / 31);\n  let annees = Math.floor(mois / 12);\n  let duree = "";\n  annees > 0 ? duree += annees + "y" : mois > 0 ? duree += mois + "m" : jours > 0 ? duree += jours + "j" : heures > 0 ? duree += heures + "h" : minutes > 0 ? duree += minutes + "m" : duree = diff / 1000 + "s";\n  return duree;\n}\n// CONCATENATED MODULE: ./src/views/util_solid.js\nasync function profile(webId) {\n  let p = {};\n  /*  p.webId = webId\r\n    let name = await solid.data[webId].vcard$fn || webId.split("/")[2].split(\'.\')[0];\r\n    p.name = `${name}`\r\n    let ph = await solid.data[].vcard$hasPhoto\r\n    p.at_photo = `${ph}` //!= "undefined" ? `${photo}` : "https://solid.github.io/solid-ui/src/icons/noun_15059.svg"\r\n  */\n\n  return p;\n}\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/dom.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nconst isCEPolyfill = typeof window !== \'undefined\' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nconst reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nconst removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/template.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nconst nodeMarker = `\x3c!--${marker}--\x3e`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nconst boundAttributeSuffix = \'$lit$\';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nclass Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We\'ve exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: \'attribute\', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === \'TEMPLATE\') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === \'\') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: \'node\', index: ++index });\n                    }\n                    // If there\'s no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === \'\') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don\'t have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: \'node\', index });\n                    // If we don\'t have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = \'\';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won\'t work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it\'s even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: \'node\', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nconst isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment(\'\')` to be renamed for a\n// small manual size-savings.\nconst createMarker = () => document.createComment(\'\');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * " \\x09\\x0a\\x0c\\x0d" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * "\\0-\\x1F\\x7F-\\x9F" are Unicode control characters, which includes every\n * space character except " ".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, (\'),\n *    ("), ">", "=", or "/"\n *  * Followed by zero or more space characters\n *  * Followed by "="\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, (\'), ("), "<", ">", "=", (`), or\n *    * (") then any non-("), or\n *    * (\') then any non-(\')\n */\nconst lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F "\'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d"\'`<>=]*|"[^"]*|\'[^\']*))$/;\n//# sourceMappingURL=template.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/modify-template.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nfunction removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we\'re removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nfunction insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there\'s no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we\'ve inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/directive.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, "The repeat directive".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here\'s an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it\'s custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from \'lit-html\';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nconst directive_directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nconst isDirective = (o) => {\n    return typeof o === \'function\' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/part.js\n/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nconst noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nconst nothing = {};\n//# sourceMappingURL=part.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/template-instance.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\n\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nclass template_instance_TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance\'s\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we\'re sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don\'t strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part\'s node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === \'TEMPLATE\') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We\'ve exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We\'ve arrived at our part\'s node.\n            if (part.type === \'node\') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/template-result.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\n\n\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nclass template_result_TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = \'\';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it\'s parsed by the browser\'s HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like \x3c!--{{lit-guid}}--\x3e.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don\'t\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don\'t need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf(\'\x3c!--\');\n            // We\'re in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf(\'--\x3e\', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match "name=value" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We\'re only in this branch if we don\'t have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo="\x3c!--${\'bar\'}">. Cases like\n                // \x3c!-- foo=${\'bar\'}--\x3e are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement(\'template\');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nclass template_result_SVGTemplateResult extends template_result_TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/parts.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\n\n\n\n\n\n\nconst isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === \'object\' || typeof value === \'function\'));\n};\nconst isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nclass AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new parts_AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = \'\';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === \'string\' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === \'string\' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nclass parts_AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it\'ll\n            // call setAttribute. If the value is a directive, it\'ll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nclass parts_NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`\'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof template_result_TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? \'\' : value;\n        // If `value` isn\'t already a string, we explicitly convert it here in case\n        // it can\'t be implicitly converted - i.e. it\'s a symbol.\n        const valueAsString = typeof value === \'string\' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof template_instance_TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new template_instance_TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new parts_NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * \'\'. If the value is falsey, the attribute is removed.\n */\nclass parts_BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== \'\' || strings[1] !== \'\') {\n            throw new Error(\'Boolean attributes can only contain a single expression\');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, \'\');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nclass PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === \'\' && strings[1] === \'\');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nclass PropertyPart extends parts_AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener(\'test\', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener(\'test\', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nclass parts_EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === \'function\') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn\'t support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/template-factory.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nfunction templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nconst templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/render.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\n\n\n\nconst render_parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nconst render = (result, container, options) => {\n    let part = render_parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        render_parts.set(container, part = new parts_NodePart(Object.assign({ templateFactory: templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/default-template-processor.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Creates Parts when a template is instantiated.\n */\nclass default_template_processor_DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === \'.\') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === \'@\') {\n            return [new parts_EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === \'?\') {\n            return [new parts_BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new parts_NodePart(options);\n    }\n}\nconst defaultTemplateProcessor = new default_template_processor_DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lit-html.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\n\n\n\n\n// TODO(justinfagnani): remove line when we get NodePart moving methods\n\n\n\n\n\n\n\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== \'undefined\') {\n    (window[\'litHtmlVersions\'] || (window[\'litHtmlVersions\'] = [])).push(\'1.2.1\');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nconst lit_html_html = (strings, ...values) => new template_result_TemplateResult(strings, values, \'html\', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nconst svg = (strings, ...values) => new template_result_SVGTemplateResult(strings, values, \'svg\', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map\n// CONCATENATED MODULE: ./node_modules/lit-html/lib/shady-render.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\n\n\n\n\n\n\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === \'undefined\') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === \'undefined\') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = [\'html\', \'svg\'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn\'t support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll(\'style\')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template\'s underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement(\'template\');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll(\'style\');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn\'t support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement(\'style\');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the "root" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it\'s important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector(\'style\');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element\'s\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element\'s `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element\'s\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element\'s `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nconst shady_render_render = (result, container, options) => {\n    if (!options || typeof options !== \'object\' || !options.scopeName) {\n        throw new Error(\'The `scopeName` option is required.\');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = render_parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    render(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We\'ve rendered into a fragment so that there\'s a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element\'s `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = render_parts.get(renderContainer);\n        render_parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof template_instance_TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        render_parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map\n// CONCATENATED MODULE: ./node_modules/lit-element/lib/updating-element.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nconst defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? \'\' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property\'s `hasChanged` function.\n */\nconst notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn\'t currently have good support for static\n * property semantics where "this" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = \'finalized\';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nclass UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        // Initialize to an unresolved Promise so we can make sure the element has\n        // connected before first update.\n        this._updatePromise = new Promise((res) => this._enableUpdatingResolver = res);\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we\'re finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty(\'_classProperties\', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property\'s `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it\'s important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     *\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user\'s intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === \'symbol\' ? Symbol() : `__${name}`;\n        const descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n            Object.defineProperty(this.prototype, name, descriptor);\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     *   class MyElement extends LitElement {\n     *     static getPropertyDescriptor(name, key, options) {\n     *       const defaultDescriptor =\n     *           super.getPropertyDescriptor(name, key, options);\n     *       const setter = defaultDescriptor.set;\n     *       return {\n     *         get: defaultDescriptor.get,\n     *         set(value) {\n     *           setter.call(this, value);\n     *           // custom action.\n     *         },\n     *         configurable: true,\n     *         enumerable: true\n     *       }\n     *     }\n     *   }\n     *\n     * @nocollapse\n     */\n    static getPropertyDescriptor(name, key, _options) {\n        return {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered "final" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     */\n    static getPropertyOptions(name) {\n        return this._classProperties && this._classProperties.get(name) ||\n            defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process "own" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty(\'properties\', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === \'function\') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === \'string\' ?\n                attribute :\n                (typeof name === \'string\' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property\'s\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === \'function\' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property\'s `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = \'id\' in the constructor, the \'id\' will become \'\' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection.\n        this.enableUpdating();\n    }\n    enableUpdating() {\n        if (this._enableUpdatingResolver !== undefined) {\n            this._enableUpdatingResolver();\n            this._enableUpdatingResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we\'d like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor.getPropertyOptions(propName);\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor.getPropertyOptions(name);\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it\'s important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._updatePromise = this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this._updatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this._hasRequestedUpdate;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n            else {\n                this._markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there\'s an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n            throw e;\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n        this._markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map\n// CONCATENATED MODULE: ./node_modules/lit-element/lib/decorators.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn\'t recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement(\'my-element\')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n *\n * @param tagName The name of the custom element to define.\n */\nconst customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === \'function\') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don\'t\n    // stomp over the user\'s accessor.\n    if (element.kind === \'method\' && element.descriptor &&\n        !(\'value\' in element.descriptor)) {\n        return Object.assign(Object.assign({}, element), { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: \'field\',\n            key: Symbol(),\n            placement: \'own\',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: \'initializer\',\n            //     placement: \'own\',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === \'function\') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the internalProperty decorator.\n *\n * @example\n *\n *     class MyElement {\n *       @property({ type: Boolean })\n *       clicked = false;\n *     }\n *\n * @ExportDecoratedItems\n */\nfunction property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they\'re solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n */\nfunction internalProperty(options) {\n    return property({ attribute: false, hasChanged: options === null || options === void 0 ? void 0 : options.hasChanged });\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element\'s renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @query(\'#first\')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id="first"></div>\n *           <div id="second"></div>\n *         `;\n *       }\n *     }\n *\n */\nfunction query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element\'s renderRoot done after the element\'s `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n *     class MyElement {\n *       @queryAsync(\'#first\')\n *       first;\n *\n *       render() {\n *         return html`\n *           <div id="first"></div>\n *           <div id="second"></div>\n *         `;\n *       }\n *     }\n *\n *     // external usage\n *     async doSomethingWithFirst() {\n *      (await aMyElement.first).doSomething();\n *     }\n */\nfunction queryAsync(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            async get() {\n                await this.updateComplete;\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element\'s renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n *\n *     class MyElement {\n *       @queryAll(\'div\')\n *       divs;\n *\n *       render() {\n *         return html`\n *           <div id="first"></div>\n *           <div id="second"></div>\n *         `;\n *       }\n *     }\n */\nfunction queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: \'method\',\n    placement: \'prototype\',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign(Object.assign({}, element), { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *       clicked = false;\n *\n *       render() {\n *         return html`\n *           <div @click=${this._onClick}`>\n *             <button></button>\n *           </div>\n *         `;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nfunction eventOptions(options) {\n    // Return value typed as any to prevent TypeScript from complaining that\n    // standard decorator function signature does not match TypeScript decorator\n    // signature\n    // TODO(kschaaf): unclear why it was only failing on this decorator and not\n    // the others\n    return ((protoOrDescriptor, name) => (name !== undefined) ?\n        legacyEventOptions(options, protoOrDescriptor, name) :\n        standardEventOptions(options, protoOrDescriptor));\n}\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n */\nfunction queryAssignedNodes(slotName = \'\', flatten = false) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                const selector = `slot${slotName ? `[name=${slotName}]` : \'\'}`;\n                const slot = this.renderRoot.querySelector(selector);\n                return slot && slot.assignedNodes({ flatten });\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n//# sourceMappingURL=decorators.js.map\n// CONCATENATED MODULE: ./node_modules/lit-element/lib/css-tag.js\n/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nconst supportsAdoptingStyleSheets = (\'adoptedStyleSheets\' in Document.prototype) &&\n    (\'replace\' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nclass CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error(\'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it\'s lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nconst unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === \'number\') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to \'css\' function must be a \'css\' function result: ${value}. Use \'unsafeCSS\' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement\'s `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nconst css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map\n// CONCATENATED MODULE: ./node_modules/lit-element/lit-element.js\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\n\n\n\n\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window[\'litElementVersions\'] || (window[\'litElementVersions\'] = []))\n    .push(\'2.3.1\');\n/**\n * Sentinal value used to avoid calling lit-html\'s render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\nclass lit_element_LitElement extends UpdatingElement {\n    /**\n     * Return the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * @nocollapse\n     */\n    static getStyles() {\n        return this.styles;\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Only gather styles once per class\n        if (this.hasOwnProperty(JSCompiler_renameProperty(\'_styles\', this))) {\n            return;\n        }\n        // Take care not to call `this.getStyles()` multiple times since this\n        // generates new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.getStyles();\n        if (userStyles === undefined) {\n            this._styles = [];\n        }\n        else if (Array.isArray(userStyles)) {\n            // De-duplicate styles preserving the _last_ instance in the set.\n            // This is a performance optimization to avoid duplicated styles that can\n            // occur especially when composing via subclassing.\n            // The last item is kept to try to preserve the cascade order with the\n            // assumption that it\'s most important that last added styles override\n            // previous styles.\n            const addStyles = (styles, set) => styles.reduceRight((set, s) => \n            // Note: On IE set.add() does not return the set\n            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);\n            // Array.from does not work on Set in IE, otherwise return\n            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n            const set = addStyles(userStyles, new Set());\n            const styles = [];\n            set.forEach((v) => styles.unshift(v));\n            this._styles = styles;\n        }\n        else {\n            this._styles = [userStyles];\n        }\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.constructor._getUniqueStyles();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element\'s getRootNode(). While this could be done, we\'re choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element\'s DOM is rendered. For example, to render into the element\'s\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: \'open\' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it\'s important to call `render`\n        // before that.\n        const templateResult = this.render();\n        super.update(changedProperties);\n        // If render is not implemented by the component, don\'t call lit-html render\n        if (templateResult !== renderNotImplemented) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement(\'style\');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html\'s NodePart - typically a TemplateResult.\n     * Setting properties inside this method will *not* trigger the element to\n     * update.\n     */\n    render() {\n        return renderNotImplemented;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nlit_element_LitElement[\'finalized\'] = true;\n/**\n * Render method used to render the value to the element\'s DOM.\n * @param result The value to render.\n * @param container Node into which to render.\n * @param options Element name.\n * @nocollapse\n */\nlit_element_LitElement.render = shady_render_render;\n//# sourceMappingURL=lit-element.js.map\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js\nvar web_dom_iterable = __webpack_require__(34);\n\n// CONCATENATED MODULE: ./src/agents/hello-agent.js\n\n\n//import  eve from \'evejs/dist/eve.custom.js\';\nfunction HelloAgent(id) {\n  // execute super constructor\n  eve.Agent.call(this, id); // connect to all transports configured by the system\n\n  this.connect(eve.system.transports.getAll());\n} // extend the eve.Agent prototype\n\n\nHelloAgent.prototype = Object.create(eve.Agent.prototype);\nHelloAgent.prototype.constructor = HelloAgent;\n\nHelloAgent.prototype.sayHello = function (to) {\n  this.send(to, \'Hello \' + to + \'!\');\n};\n\nHelloAgent.prototype.receive = function (from, message) {\n  //slog(this.id+" received from :"+from + \' this message: \' + JSON.stringify(message));\n  console.log(this.id + " received from :" + from + \' this message: \' + JSON.stringify(message));\n\n  if (JSON.stringify(message).indexOf(\'Hello\') === 0) {\n    // reply to the greeting\n    this.send(from, \'Hi \' + from + \', nice to meet you!\');\n  }\n};\n\nHelloAgent.prototype.broadcast = function (message) {\n  var me = this;\n  var allAgents = Object.keys(this.connections[0].transport.agents);\n  console.log(allAgents);\n  allAgents.forEach(function (agent) {\n    me.send(agent, message);\n  });\n};\n\nHelloAgent.prototype.sendMulti = function (recipients, message) {\n  var me = this;\n  recipients.forEach(function (agent) {\n    //  console.log(agent, message)\n    me.send(agent, message);\n  });\n};\n\n\n// CONCATENATED MODULE: ./src/views/message-element.js\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    debug : ", "<br>\\n    uri: ", "<br>\\n    message : ", "<br>\\n    </div>\\n\\n    <div class=\\"container-fluid\\">\\n    <div class=\\"row\\">\\n    <div class=\\"col-2\\">\\n    <div class=\\"row\\">\\n    \x3c!--<img class=\\"rounded-circle ml-0\\" width=\\"32px\\"\\n    src=\\"//images.weserv.nl/?url=", "&w=32&h=32\\"\\n    title=\\"", "\\"\\n    alt=\\"", "\\"\\n    webId=\\"", "\\"\\n    @click=\\"", "\\">--\x3e\\n    </div>\\n    <div class=\\"row\\">\\n    ", "\\n    </div>\\n    <div class=\\"row\\">\\n    ", " <small>", "</small>\\n    </div>\\n    </div>\\n\\n    <div class=\\"col-8\\">\\n    <div class=\\"row\\">\\n    <b>", "</b>\\n    </div>\\n    <div class=\\"row\\">\\n    link : ", "\\n\\n    </div>\\n\\n    </div>\\n\\n    </div>\\n    </div>\\n    "]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\n\nclass message_element_MessageElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      uri: {\n        type: String\n      },\n      message: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Message";\n    this.debug = false;\n    this.uri = "";\n    this.message = {\n      link: "LOADING..."\n    };\n  }\n\n  render() {\n    return lit_html_html(_templateObject(), !this.debug, this.name, this.debug, this.uri, JSON.stringify(this.message), this.message.at_photo, this.message.at_name, this.message.at_name, this.message.attributedTo, this.showProfile, this.message.at_name, this.message.delay, this.message.shortType, this.message.summary, this.message.link);\n  }\n  /*\r\n  \x3c!--  ${this.message.activity.objects.map(object =>html`\r\n  <object-element name="${this.name+\'_object\'}"\r\n  url="${object}">\r\n  Loading object\r\n  </object-element>\r\n    `)}--\x3e*/\n\n\n  firstUpdated() {\n    this.init();\n  }\n\n  async init() {\n    this.message = await message(this.uri); //  console.log("Message",this.message)\n  }\n\n}\n\ncustomElements.define(\'message-element\', message_element_MessageElement);\n// CONCATENATED MODULE: ./src/views/utils.js\n\nfunction log(text) {\n  console.log("FROM common", text); //return el\n}\nasync function conf(webId) {\n  let c = {};\n  c.webId = webId;\n  let sn = (await solid.data[webId].vcard$fn) || webId.split("/")[2].split(\'.\')[0];\n  c.name = "".concat(sn);\n  return c;\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.to-string.js\nvar es6_regexp_to_string = __webpack_require__(73);\n\n// CONCATENATED MODULE: ./src/views/app-view.js\n\n\nfunction _templateObject4() {\n  const data = app_view_taggedTemplateLiteral([" YOU MUST LOGIN TO SHARE\\n        "]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = app_view_taggedTemplateLiteral(["SHARE PANEL   share : ", "<br>"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = app_view_taggedTemplateLiteral(["\\n        <div class=\\"col-md-6\\">\\n        <panel-element name=\\"", "\\" .p=\\"", "\\">Loading ", "</panel-element>\\n        </div>\\n        "]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction app_view_templateObject() {\n  const data = app_view_taggedTemplateLiteral(["\\n      <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n      <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n      <fab-element name=\\"Fab\\" ?hidden=\\"", "\\">Loading Fab for ", "</fab-element>\\n      <store-element name=\\"Store\\">Store Loading</store-element>\\n      <div ?hidden = \\"", "\\">\\n      Hello from<b>", "</b><br>\\n      WebId : ", "<br>\\n\\n      </div>\\n\\n      <header>\\n      <button class=\\"btn btn-outline-info\\"  @click=\\"", "\\">Agora</button>\\n      <button class=\\"btn btn-outline-info\\" panel=\\"Info\\" @click=\\"", "\\">Help</button>\\n      <login-element name=\\"Login\\">Loading Login</login-element>\\n      <button class=\\"btn btn-outline-info\\"\\n      ?hidden=\\"", "\\"\\n      title=\\"", "\\"\\n      @click=\\"", "\\">Profile</button>\\n\\n      <button class=\\"btn btn-outline-info\\" ?hidden=\\"", "\\" @click=\\"", "\\">Inbox</button>\\n\\n      \x3c!--  <button class=\\"btn btn-outline-info\\" ?hidden=\\"", "\\" @click=\\"", "\\">Config</button>\\n      --\x3e\\n      \x3c!--      <nav-element name=\\"Nav\\">Loading Nav</nav-element>--\x3e\\n      v.a14\\n      </header>\\n\\n      <div class=\\"container-fluid\\"  style=\\"padding-left:0px;padding-right:0px\\">\\n\\n      \x3c!--\\n\\n      <test-rdfeasy-element name=\\"RdfEasy\\">Loading RDFeasy</test-rdfeasy-element>\\n      --\x3e\\n\\n      \x3c!--\\n      PANEL : ", " for ", "\\n      --\x3e\\n      \x3c!--\\n\\n      HIDDEN TEMPORARY FOR DEV--\x3e\\n    \x3c!--  <scroll-view root=\\"https://agora.solid.community/public/agora/inbox/\\">Loading Scroll</scroll-view>\\n  --\x3e   <flux-element name=\\"Flux\\" agoraPod=\\"", "\\" ?hidden=\\"", "\\">Loading Flux</flux-element>\\n     <friends-view name=\\"Friends\\" ?hidden=\\"", "\\">Loading Organization</friends-view>\\n      <post-element name=\\"Post\\" .share=\\"", "\\" ?hidden=\\"", "\\">Loading Post</post-element>\\n      <config-get-view name=\\"Config\\" webId=\\"", "\\" ?hidden=\\"", "\\">Loading Config for ", "</config-get-view>\\n      <profile-element ?hidden=\\"", "\\" name=\\"Profile\\">Loading Profil</profile-element>\\n\\n      <inbox-view name=\\"Inbox\\" ?hidden=\\"", "\\">Loading Inbox</inbox-view>\\n\\n      \x3c!--  <activity-element name=\\"Shared_activity\\"\\n      ?hidden=\\"", "\\">Loading activity...\\n      </activity-element>--\x3e\\n      \x3c!----\x3e\\n\\n      \x3c!-- DEFAULT --\x3e\\n      <div class=\\"row\\" ?hidden=\\"", "\\">\\n      ", "\\n      </div>\\n      \x3c!-- --\x3e\\n\\n\\n      \x3c!-- SHARE --\x3e\\n      <div ?hidden=\\"", "\\">\\n      ", "\\n      </div>\\n      \x3c!-- QUERY --\x3e\\n      <div ?hidden=\\"", "\\">\\n      must show activity with uri ", "\\n      </div>\\n\\n      \x3c!-- INFO --\x3e\\n      <info-element name=\\"Info\\" ?hidden=\\"", "\\">Loading Info</info-element>\\n      \x3c!----\x3e\\n\\n      </div>\\n\\n      \x3c!--      <log-element name=\\"Log\\">Loading Log</log-element>--\x3e\\n      "]);\n\n  app_view_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction app_view_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n // test but no LIMIT, order, FILTER... import \'./test-rdfeasy-element.js\'\n\nclass app_view_AppView extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      share: {\n        type: Object\n      },\n      panel: {\n        type: String\n      },\n      webId: {\n        type: String\n      },\n      query: {\n        type: String\n      },\n      panels: {\n        type: Array\n      },\n      agoraPod: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "App";\n    this.debug = false;\n    this.webId = null;\n    this.query = null;\n    this.share = {};\n    this.agoraPod = "https://agora.solid.community/profile/card#me";\n    this.panel = "Flow";\n    this.panels = [{\n      name: "Flow",\n      image: "./img/flow.png",\n      text: "Show Public, Group & Personnal Activities."\n    }, {\n      name: "Compose",\n      image: "./img/compose.png",\n      text: "Create & compose new Notes, Medias, Triples & Graphs!"\n    }, {\n      name: "Organization",\n      image: "./img/orga.png",\n      text: "Build Teams to collaborate on projects."\n    }, {\n      name: "Talk",\n      image: "./img/talk.png",\n      text: "A space to realtime exchanges! (TODO)"\n    }];\n    this.onLoad();\n  }\n\n  render() {\n    return lit_html_html(app_view_templateObject(), this.webId == null, this.webId, !this.debug, this.name, this.webId, this.showDefault, this.showFromAtt, this.webId == null, this.webId, this.showProfile, this.webId == null, this.showInbox, this.webId == null, this.showConfig, this.panel, this.webId, this.agoraPod, this.panel != \'Flow\', this.panel != \'Organization\', this.share, this.panel != \'Compose\', this.webId, this.webId == null || this.panel != "Config", this.webId, this.panel != "Profile", this.panel != \'Inbox\', this.panel != \'SharedActivity\', this.panel != \'Default\', this.panels.map((p, i) => lit_html_html(_templateObject2(), p.name, p, p.name)), this.panel != \'Share\', this.webId != null ? lit_html_html(_templateObject3(), JSON.stringify(this.share)) : lit_html_html(_templateObject4()), this.query == null, this.query, this.panel != \'Info\');\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          case "initFromStore":\n            app.initFromStore(message.store);\n            break;\n\n          case "showPanel":\n            app.showPanel(message.panel);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  webIdChanged(webId) {\n    this.webId = webId;\n  }\n\n  initFromStore(store) {\n    console.log("STORE in app", store);\n    store.info == true ? this.panel = "Info" : "";\n  }\n\n  showPanel(panel = "Default") {\n    this.panel = panel; //\n  }\n\n  showProfile() {\n    this.panel = "Profile";\n    this.agent.send("Profile", {\n      action: "profileChanged",\n      profile: {\n        webId: this.webId\n      }\n    });\n  }\n\n  showConfig() {\n    this.panel = "Config";\n    this.agent.send("Config", {\n      action: "newConfig",\n      config: {\n        webId: this.webId\n      }\n    });\n  }\n\n  showInbox() {\n    this.panel = "Inbox"; //  this.agent.send("Inbox", {action: "newConfig", config:{webId: this.webId}})\n  }\n\n  showFromAtt(e) {\n    this.panel = e.target.getAttribute("panel");\n  }\n\n  showDefault() {\n    this.panel = "Default"; //\n  }\n\n  onLoad() {\n    var parsedUrl = new URL(window.location.toString());\n    let shared_activity = null;\n    console.log(parsedUrl);\n    this.share.title = parsedUrl.searchParams.get("title") || null;\n    this.share.text = parsedUrl.searchParams.get("text") || null;\n    this.share.url = parsedUrl.searchParams.get("url") || null;\n\n    if (this.share.title != null || this.share.text != null || this.share.url != null) {\n      this.share.show = true;\n      this.panel = "Share";\n    } else {\n      this.query = parsedUrl.searchParams.get("query") || null;\n      shared_activity = parsedUrl.searchParams.get("activity") || null;\n    }\n\n    console.log(this.share);\n\n    if (parsedUrl.searchParams.get("oldapi")) {\n      alert("Your browser is using the deprecated \'url_template\' Web Share " + "Target API.");\n    }\n\n    if (shared_activity != null) {\n      console.log("Single activity Shared");\n      this.showPanel("SharedActivity");\n      this.agent.send("Shared_activity", {\n        action: "SharedActivity",\n        activity: shared_activity\n      });\n    }\n  }\n\n}\n\ncustomElements.define(\'app-view\', app_view_AppView);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.symbol.async-iterator.js\nvar es7_symbol_async_iterator = __webpack_require__(5);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.symbol.js\nvar es6_symbol = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./node_modules/solid-file-client/dist/window/solid-file-client.bundle.js\nvar solid_file_client_bundle = __webpack_require__(9);\n\n// CONCATENATED MODULE: ./src/views/scroll-view.js\n\n\n\n\nfunction scroll_view_templateObject() {\n  const data = scroll_view_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <style>\\n    .item {\\n      background: #FFF;\\n      border: 1px solid #666;\\n      min-height: 100px;\\n      display: flex;\\n      align-items: center;\\n    }\\n\\n    #sentinel {\\n      width: auto;\\n      height: 30px;\\n      background-color: red\\n    }\\n\\n    #scroller {\\n      height: 550px;\\n      overflow-y: scroll;\\n    }\\n    </style>\\n\\n    <div class=\\"col-12\\" id=\\"scroller\\">\\n    <div id=\\"sentinel\\">Loading messages...</div>\\n    </div>\\n    ", " messages<br>\\n\\n    <div ?hidden = \\"", "\\">\\n    start : ", "<br>\\n    loop : ", "<br>\\n    messages length : ", "<br>\\n    </div>\\n    "]);\n\n  scroll_view_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction scroll_view_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }\n\n\n\n\n\nclass scroll_view_ScrollView extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      messages: {\n        type: Array\n      },\n      root: {\n        type: String\n      },\n      loop: {\n        type: Object\n      },\n      start: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Scroll";\n    this.debug = false;\n    this.messages = [];\n    this.root = "";\n    this.loop = new Date();\n    this.start = new Date("04/15/2020");\n    this.fc = new solid_file_client_bundle(solid.auth);\n  }\n\n  render() {\n    return lit_html_html(scroll_view_templateObject(), this.messages.length, !this.debug, this.start.toLocaleString(), this.loop.toLocaleString(), this.messages.length);\n  }\n\n  firstUpdated() {\n    this.scroller = this.shadowRoot.querySelector(\'#scroller\');\n    this.sentinel = this.shadowRoot.querySelector(\'#sentinel\');\n    this.buildPath();\n    this.subscribe();\n    this.initObserver();\n  }\n\n  buildPath() {\n    let month = ("0" + (this.loop.getUTCMonth() + 1)).slice(-2);\n    let day = ("0" + this.loop.getUTCDate()).slice(-2);\n    let year = this.loop.getUTCFullYear();\n    this.path = this.root + [year, month, day, "index.ttl#this"].join("/");\n  }\n\n  async checkNewMessage(url) {\n    await solid.data.clearCache();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = _asyncIterator(solid.data[url].as$item), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const message = _value;\n        let m = "".concat(message);\n\n        if (!this.messages.includes(m)) {\n          this.addItem(m, true);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  async loadMessages() {\n    await solid.data.clearCache();\n\n    if (this.loop > this.start) {\n      this.sentinel.innerHTML = "Loading " + this.loop.toLocaleDateString();\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n\n      var _iteratorError2;\n\n      try {\n        for (var _iterator2 = _asyncIterator(solid.data[this.path].as$item), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n          const message = _value2;\n          let m = "".concat(message);\n\n          if (!this.messages.includes(m)) {\n            this.addItem(m);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            await _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    } else {\n      this.sentinel.innerHTML = "No message before " + this.start.toLocaleDateString();\n    }\n  }\n\n  addItem(i, prepend = false) {\n    this.moveScroller(); //  var newItem1 = document.createElement(\'div\');\n\n    var newItem1 = document.createElement(\'message-element\');\n    newItem1.classList.add(\'item\');\n    newItem1.setAttribute("uri", i);\n    newItem1.setAttribute("name", "mess_" + this.messages.length); //  newItem1.append(newMess)\n    //  newItem1.textContent = i+\' Item \'\n    //  newItem1.setAttribute("url", i)\n\n    if (prepend == false) {\n      this.scroller.append(newItem1);\n      this.messages = [...this.messages, i];\n    } else {\n      this.scroller.prepend(newItem1);\n      this.messages = [i, ...this.messages];\n    }\n  }\n\n  async changeDate() {\n    var newDate = this.loop.setDate(this.loop.getDate() - 1);\n    this.loop = new Date(newDate);\n    this.buildPath();\n\n    if (!(await this.fc.itemExists(this.path)) && this.loop > this.start) {\n      await this.changeDate();\n    }\n  }\n\n  initObserver() {\n    let app = this;\n    var intersectionObserver = new IntersectionObserver(async function (entries) {\n      if (entries.some(entry => entry.intersectionRatio > 0)) {\n        await app.loadMessages();\n        await app.changeDate();\n        app.moveScroller();\n        await app.loadMessages();\n\n        while (app.messages.length < 10 && app.loop > app.start) {\n          await app.changeDate();\n          app.moveScroller();\n          app.loadMessages();\n        }\n      }\n    });\n    intersectionObserver.observe(app.sentinel);\n  }\n\n  moveScroller() {\n    this.scroller.appendChild(this.sentinel);\n  }\n\n  async subscribe() {\n    var app = this;\n    let today = new Date();\n    let month = ("0" + (today.getUTCMonth() + 1)).slice(-2);\n    let day = ("0" + today.getUTCDate()).slice(-2);\n    let year = today.getUTCFullYear();\n    let ws_url = this.root + [year, month, day, "index.ttl#this"].join("/");\n    var websocket = "wss://" + ws_url.split(\'/\')[2];\n    app.socket = new WebSocket(websocket);\n\n    app.socket.onopen = function () {\n      this.send(\'sub \' + ws_url);\n    };\n\n    app.socket.onmessage = function (msg) {\n      if (msg.data && msg.data.slice(0, 3) === \'pub\') {\n        app.checkNewMessage(ws_url);\n      }\n    };\n  }\n\n}\n\ncustomElements.define(\'scroll-view\', scroll_view_ScrollView);\n// CONCATENATED MODULE: ./src/views/base-view.js\n\n\nclass base_view_BaseView extends lit_element_LitElement {\n  createRenderRoot() {\n    return this;\n  }\n\n  firstUpdated() {\n    console.log(this.name);\n\n    if (this.name != null) {\n      var app = this;\n      this.agent = new HelloAgent(this.name);\n      console.log(this.agent);\n\n      this.agent.receive = function (from, message) {\n        //  console.log("messah",message)\n        if (message.hasOwnProperty("action")) {\n          //  console.log(message)\n          switch (message.action) {\n            case "webIdChanged":\n              app.webIdChanged(message.webId);\n              break;\n\n            case "test":\n              app.test(message);\n              break;\n\n            case "pageChanged":\n              app.pageChanged(message.page);\n              break;\n\n            case "panelChanged":\n              app.panelChanged(message.panel);\n              break;\n\n            default:\n              console.log("Unknown action ", message);\n          }\n        }\n      };\n    }\n\n    return this;\n  }\n\n  webIdChanged(webId) {\n    console.log("WIC", this.name, webId);\n    this.webId = webId;\n  }\n\n  pageChanged(page) {\n    page == "default" ? this.page = "flux" : this.page = page;\n  }\n\n  test(message) {\n    console.log(this.name, " received ", message);\n  }\n\n  click(e) {\n    console.log(e);\n  }\n\n}\n// CONCATENATED MODULE: ./src/views/store-element.js\n\n\nfunction store_element_templateObject() {\n  const data = store_element_taggedTemplateLiteral(["\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    store : ", "</br>\\n    <p>\\n    ", " <br>    <button @click=\\"", "\\">Clean</button><br><br>\\n    </p>\\n    </div>\\n    "]);\n\n  store_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction store_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass store_element_StoreElement extends base_view_BaseView {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      store: {\n        type: Object\n      },\n      debug: {\n        type: Boolean\n      } //  webId: {type: String}\n\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Store";\n    this.store = {};\n    this.debug = false; //  this.webId = null\n  }\n\n  render() {\n    return lit_html_html(store_element_templateObject(), !this.debug, this.name, JSON.stringify(this.store), this.name, this.cleanStorage);\n  }\n\n  firstUpdated() {\n    //  console.log(this.name)\n    super.firstUpdated();\n\n    if (this.name != null) {\n      var app = this; //  this.agent = new HelloAgent(this.name);\n\n      console.log(this.agent);\n\n      this.agent.receive = function (from, message) {\n        //  console.log("messah",message)\n        if (message.hasOwnProperty("action")) {\n          //  console.log(message)\n          switch (message.action) {\n            case "setStorage":\n              app.setStorage(message.values);\n              break;\n\n            case "getConfig":\n              app.getConfig(from);\n              break;\n\n            case "webIdChanged":\n              app.webIdChanged(message.webId);\n              break;\n\n            default:\n              console.log("Unknown action ", message);\n          }\n        }\n      };\n    }\n\n    this.readStorage();\n    this.agent.send("App", {\n      action: "initFromStore",\n      store: this.store\n    });\n  }\n\n  webIdChanged(webId) {\n    console.log("WEBID CHANGED", webId, this.store.config.webId); //  this.webId = webId\n\n    if (webId != null) {\n      console.log("WEBID NON NULL", webId, this.store.config.webId);\n\n      if (webId == this.store.config.webId && !Object.values(this.store.config).includes("undefined")) {\n        console.log("WEBID IDENTIQUE & NOTHING UNDEFINED --\x3e ACCUEIL"); //  this.store.config.status = "WebId from store : ",+webId\n\n        this.agent.send("App", {\n          action: "showPanel",\n          panel: "Flow"\n        });\n        this.agent.sendMulti(["Friends", "Profile", "PostTabs", "Groups", "Inbox"], {\n          action: "configChanged",\n          config: this.store.config\n        });\n      } else {\n        console.log("WEBID DIFFERENT --\x3e New CONFIG", webId, this.store.config.webId);\n        this.store.config.webId = webId;\n        this.store.config.status = "WebId has changed : ", +webId;\n        this.agent.send("App", {\n          action: "showPanel",\n          panel: "Config"\n        });\n        this.agent.send("Config", {\n          action: "newConfig",\n          config: this.store.config\n        });\n      }\n    } else {\n      console.log("WEBID CHANGED IS NULL --\x3e nettoyage FRIENDS & PROFILE", this.webId);\n      this.store.config = {};\n      this.agent.sendMulti(["Friends", "Profile", "PostTabs", "Groups", "Inbox"], {\n        action: "configChanged",\n        config: this.store.config\n      });\n    } //console.log(this.webId)\n    //this.populateStorage()\n\n  }\n\n  getConfig(from) {\n    this.agent.send(from, {\n      action: "configChanged",\n      config: this.store.config\n    });\n  }\n\n  readStorage() {\n    this.store = JSON.parse(localStorage.getItem("agora")) || {\n      info: true,\n      config: {}\n    };\n    console.log("STORE : ", this.store);\n  }\n\n  setStorage(values) {\n    console.log(values);\n\n    for (let [key, value] of Object.entries(values)) {\n      console.log("".concat(key, ": ").concat(value));\n      this.store[key] = value;\n    }\n\n    console.log(this.store);\n    this.populateStorage();\n  }\n\n  populateStorage() {\n    localStorage.setItem("agora", JSON.stringify(this.store));\n    this.readStorage();\n  }\n\n  updateStorage(data) {\n    this.store = data;\n    this.populateStorage();\n    this.readStorage();\n  }\n\n  cleanStorage() {\n    localStorage.removeItem("agora");\n    this.readStorage();\n  }\n\n}\n\ncustomElements.define(\'store-element\', store_element_StoreElement);\n// CONCATENATED MODULE: ./src/views/panel-element.js\nfunction panel_element_templateObject() {\n  const data = panel_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n\\n    <div class=\\"card shadow mb-4\\" panel=\\"", "\\" @click=\\"", "\\">\\n    <div class=\\"card-header py-3\\" panel=\\"", "\\" >\\n    <h6 class=\\"m-0 font-weight-bold text-primary\\" panel=\\"", "\\" >", "</h6>\\n    </div>\\n    <div class=\\"card-body\\" panel=\\"", "\\" >\\n    <div class=\\"text-center\\" panel=\\"", "\\" @click=\\"", "\\">\\n    <img class=\\"img-fluid px-3 px-sm-4 mt-3 mb-4\\" panel=\\"", "\\" style=\\"height: 10rem;\\" src=\\"", "\\" alt=\\"\\">\\n    </div>\\n    <p>", "</p>\\n  \x3c!--  <button class=\\"btn btn-outline-info\\"  panel=\\"", "\\" @click=\\"", "\\">", "</button>\\n  --\x3e  </div>\\n    </div>\\n\\n    "]);\n\n  panel_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction panel_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass panel_element_PanelElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      p: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Panel";\n    this.p = {};\n  }\n\n  render() {\n    return lit_html_html(panel_element_templateObject(), this.p.name, this.showPanel, this.p.name, this.p.name, this.p.name, this.p.name, this.p.name, this.showPanel, this.p.name, this.p.image, this.p.text, this.p.name, this.showPanel, this.p.name);\n  }\n\n  showPanel(e) {\n    let panel = e.target.getAttribute("panel");\n    this.agent.send("App", {\n      action: "showPanel",\n      panel: panel\n    });\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n}\n\ncustomElements.define(\'panel-element\', panel_element_PanelElement);\n// CONCATENATED MODULE: ./src/views/info-element.js\nfunction info_element_templateObject() {\n  const data = info_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n\\n    <div class=\\"jumbotron\\">\\n    <h1 class=\\"display-4\\">Agora</h1>\\n    <p class=\\"lead\\">\\n    The DecentraliShare app !<br>\\n    <b>Agora</b> is an POC to use ActivityPub\\n    (<a href=\\"https://en.wikipedia.org/wiki/ActivityPub\\" target=\\"_blank\\">En</a>)\\n    (<a href=\\"https://fr.wikipedia.org/wiki/ActivityPub\\" target=\\"_blank\\">Fr</a>)\\n    on top of the Solid Platform.</p>\\n    <hr class=\\"my-4\\">\\n\\n    To configure your POD you must take a look at the\\n    <a href=\\"https://github.com/scenaristeur/agora/wiki/Agora\\" target=\\"_blank\\" class=\\"btn btn-info\\">Help & configuration on Wiki</a>\\n\\n    <p>\\n    If you have any question or suggestion, feel free to ask on\\n    <a href=\\"https://forum.solidproject.org/\\" target=\\"_blank\\">Solid Community Forum</a>,\\n    or on <a href=\\"https://github.com/scenaristeur/agora/blob/master/README.md\\"\\n    target=\\"_blank\\">Agora project</a> repository.\\n    </p>\\n\\n    <p><b>Last, but not least :</b> if you install Agora on your device, you can use it as a \\"Share with...\\" app... ;-) </p>\\n    <p class=\\"lead\\">\\n    If all is OK for you,\\n    <button class=\\"btn btn-info\\" @click=\\"", "\\">Close Help</button> and Login.\\n    \x3c!--  <a class=\\"btn btn-primary btn-lg\\" href=\\"#\\" role=\\"button\\">Learn more</a>--\x3e\\n    </p>\\n    </div>\\n    "]);\n\n  info_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction info_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass info_element_InfoElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Info";\n  }\n\n  render() {\n    return lit_html_html(info_element_templateObject(), this.showPanel);\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  showPanel() {\n    this.agent.send("App", {\n      action: "showPanel"\n    });\n    console.log("hide");\n    let values = [];\n    values.info = false;\n    this.agent.send("Store", {\n      action: "setStorage",\n      values: values\n    });\n  }\n\n}\n\ncustomElements.define(\'info-element\', info_element_InfoElement);\n// CONCATENATED MODULE: ./src/views/login-element.js\nfunction login_element_templateObject3() {\n  const data = login_element_taggedTemplateLiteral(["\\n      <button type=\\"button\\" class=\\"btn btn-sm btn-outline-danger\\" @click=", ">Logout</button>\\n      "]);\n\n  login_element_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction login_element_templateObject2() {\n  const data = login_element_taggedTemplateLiteral(["\\n      <button type=\\"button\\" class=\\"btn btn-success\\" @click=", ">Login</button>\\n      "]);\n\n  login_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction login_element_templateObject() {\n  const data = login_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    ", "\\n    "]);\n\n  login_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction login_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n //import { BaseView } from \'./base-view.js\';\n//import * as auth from \'solid-auth-client\';\n////let data = solid.data\n//console.log("LDFK+LEX",data)\n\nclass login_element_LoginElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      webId: {\n        type: String\n      },\n      destinataires: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.webId = null; //  this.destinataires = [\'App\',\'Config\', \'ConfigGet\', \'Fab\', \'Post\', \'PostTabs\', \'Profile\', \'ProfileCartouche\', \'Friends\']\n\n    this.destinataires = [\'App\', \'Store\', \'Fab\', \'Post\', \'PostTabs\'];\n  }\n\n  render() {\n    return lit_html_html(login_element_templateObject(), this.webId == null ? lit_html_html(login_element_templateObject2(), this.login) : lit_html_html(login_element_templateObject3(), this.logout));\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      console.log("messah", message);\n\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    solid.auth.trackSession(async function (session) {\n      if (!session) {\n        app.webId = null;\n        console.log("WEBID", app.webId);\n        app.agent.sendMulti(app.destinataires, {\n          action: "webIdChanged",\n          webId: app.webId\n        });\n      } else {\n        app.webId = session.webId;\n        console.log("WEBID", app.webId);\n        app.agent.sendMulti(app.destinataires, {\n          action: "webIdChanged",\n          webId: app.webId\n        });\n      }\n    });\n\n    this.agent.receive = function (from, message) {\n      if (message.hasOwnProperty("action")) {\n        switch (message.action) {\n          case "logout":\n            app.logout(null);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  login() {\n    this.popupLogin();\n  }\n\n  logout() {\n    let wi = this.webId;\n    solid.auth.logout().then(() => alert(\'Goodbye \' + wi + \' !\'));\n  }\n\n  async popupLogin() {\n    let session = await solid.auth.currentSession();\n    let popupUri = \'./dist-popup/popup.html\'; //  let popupUri = \'https://solid.community/common/popup.html\';\n\n    if (!session) session = await solid.auth.popupLogin({\n      popupUri\n    });\n  }\n\n}\n\ncustomElements.define(\'login-element\', login_element_LoginElement);\n// CONCATENATED MODULE: ./src/views/flux-element.js\n\n\n\nfunction flux_element_templateObject() {\n  const data = flux_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <style>\\n\\n    .item {\\n      background: #FFF;\\n      border: 1px solid #666;\\n      /*  height: 100px;*/\\n      display: flex;\\n      align-items: center;\\n      /*  justify-content: center;*/\\n    }\\n\\n    #sentinel {\\n      width: auto;\\n      height: 30px;\\n      background-color: red\\n    }\\n\\n    #scroller {\\n      height: 550px;\\n      overflow-y: scroll;\\n    }\\n    </style>\\n\\n    <div class=\\"container-fluid\\">\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    \x3c!--    config : ", "</br>--\x3e\\n    counter : ", "<br>\\n    offset: ", "<br>\\n    notifications: ", "\\n    </div>\\n\\n    <div id=\\"scroller\\">\\n    <div id=\\"sentinel\\">Loading messages...</div>\\n    </div>\\n    </div>\\n\\n    <websocket-element name=\\"WebsocketFlux\\">Loading Websocket</websocket-element>\\n    "]);\n\n  flux_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction flux_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction flux_element_asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }\n\n\n\n\n\nclass flux_element_FluxElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      counter: {\n        type: Number\n      },\n      agoraPod: {\n        type: String\n      },\n      date: {\n        type: Object\n      },\n      offset: {\n        type: Number\n      },\n      notifications: {\n        type: Array\n      },\n      end: {\n        type: Object\n      },\n      loop: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Flux";\n    this.agoraPod = "";\n    this.counter = 0;\n    this.offset = 0;\n    this.debug = false;\n    let dateObj = new Date();\n    this.date = {};\n    this.date.month = ("0" + (dateObj.getUTCMonth() + 1)).slice(-2); //months from 1-12\n\n    this.date.day = ("0" + dateObj.getUTCDate()).slice(-2);\n    this.date.year = dateObj.getUTCFullYear();\n    this.notifications = [];\n    this.loop = new Date();\n    this.end = new Date("04/23/2020"); // 09 AVRIL\n\n    this.fc = new solid_file_client_bundle(solid.auth);\n  }\n\n  render() {\n    return lit_html_html(flux_element_templateObject(), !this.debug, this.name, JSON.stringify(this.config), this.counter, this.offset, this.notifications.length);\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "websocketMessage":\n            app.websocketMessage(message.url);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    this.scroller = this.shadowRoot.querySelector(\'#scroller\');\n    this.sentinel = this.shadowRoot.querySelector(\'#sentinel\');\n    this.counter = 1;\n    console.log(this.scroller, this.sentinel);\n    this.init();\n  }\n\n  async websocketMessage(ws_url) {\n    console.log(ws_url);\n    let url = ws_url + "#this";\n    await solid.data.clearCache();\n    let notifications = this.notifications;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = flux_element_asyncIterator(solid.data[url][\'https://www.w3.org/ns/activitystreams#item\']), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const notif = _value;\n\n        //    console.log(`${notif}`)\n        if (!notifications.includes("".concat(notif))) {\n          notifications = [...notifications, "".concat(notif)]; //.push()\n          //  this.scroller.appendChild(this.sentinel);\n          //  this.addItem(`${notif}`)\n\n          var newItem1 = document.createElement(\'notification-line-element\');\n          newItem1.classList.add(\'item\'); //newItem1.textContent = i+\' Item \' + this.counter++;\n\n          newItem1.setAttribute("url", "".concat(notif));\n          newItem1.setAttribute("name", "Notif_" + notifications.length);\n          this.scroller.prepend(newItem1);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    this.notifications = notifications; //  console.log("NEW ! ", this.notifications)\n  }\n\n  async init() {\n    console.log("PATH");\n    await this.initPath();\n    console.log("OBSERVER");\n    this.initObserver(); //  console.log("NOTIF")\n    //  this.getNotif()\n  }\n\n  async initPath() {\n    this.log = "Agora Pod : " + this.agoraPod; //console.log(this.agoraPod)\n\n    let pti_url = await solid.data[this.agoraPod].solid$publicTypeIndex;\n    this.log = \'Pti url : \' + pti_url; //console.log(`${pti_url}`)\n\n    let instance = await solid.data[pti_url + "#Agora"].solid$instance;\n    this.log = \'Instance url : \' + instance; //console.log(`${instance}`)\n\n    this.inbox = await solid.data[instance].as$inbox;\n    this.log = \'Inbox : \' + this.inbox;\n    this.agent.send("WebsocketFlux", {\n      action: "urlChanged",\n      url: "".concat(this.inbox)\n    });\n  }\n\n  addItem(i) {\n    //console.log("add ",i)\n\n    /*var newItem = document.createElement(\'div\');\r\n    newItem.classList.add(\'item\');\r\n    newItem.textContent = i+\' Item \' + this.counter++;\r\n    this.scroller.appendChild(newItem);*/\n    var newItem1 = document.createElement(\'notification-line-element\');\n    newItem1.classList.add(\'item\'); //newItem1.textContent = i+\' Item \' + this.counter++;\n\n    newItem1.setAttribute("url", i);\n    newItem1.setAttribute("name", "Notif_" + this.notifications.length);\n    this.scroller.appendChild(newItem1);\n  }\n\n  async loadItems(c) {\n    let app = this;\n\n    while (this.loop >= this.end && c > 0) {\n      console.log(this.loop, c);\n      this.sentinel.innerHTML = "Loading " + this.loop.toLocaleDateString();\n      let month = ("0" + (this.loop.getUTCMonth() + 1)).slice(-2); //months from 1-12\n\n      let day = ("0" + this.loop.getUTCDate()).slice(-2);\n      let year = this.loop.getUTCFullYear();\n      this.path = this.inbox + [year, month, day, "index.ttl#this"].join("/");\n      console.log(this.path);\n      let notifications = this.notifications;\n\n      if (await this.fc.itemExists(this.path)) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n\n        var _iteratorError2;\n\n        try {\n          for (var _iterator2 = flux_element_asyncIterator(solid.data[this.path][\'https://www.w3.org/ns/activitystreams#item\']), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n            const notif = _value2;\n\n            //  console.log(`${notif}`)\n            if (!notifications.includes("".concat(notif))) {\n              notifications = [...notifications, "".concat(notif)];\n              app.scroller.appendChild(app.sentinel);\n              this.addItem("".concat(notif));\n            }\n\n            c--;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      this.notifications = notifications;\n      var newDate = this.loop.setDate(this.loop.getDate() - 1);\n      this.loop = new Date(newDate);\n    }\n\n    if (this.loop < this.end) {\n      this.sentinel.innerHTML = "No older message";\n    }\n  }\n\n  loadItems1(n) {\n    console.log("LOAD", n);\n\n    for (var i = 0; i < n; i++) {\n      var newItem = document.createElement(\'div\');\n      newItem.classList.add(\'item\');\n      newItem.textContent = \'Item \' + this.counter++;\n      this.scroller.appendChild(newItem);\n    }\n  }\n\n  initObserver() {\n    let app = this;\n    var intersectionObserver = new IntersectionObserver(entries => {\n      // If the browser is busy while scrolling happens, multiple entries can\n      // accumulate between invocations of this callback. As long as any one\n      // of the notifications reports the sentinel within the scrolling viewport,\n      // we add more content.\n      if (entries.some(entry => entry.intersectionRatio > 0)) {\n        app.loadItems(10); // appendChild will move the existing element, so there is no need to\n        // remove it first.\n        //  app.scroller.appendChild(app.sentinel);\n        //  app.loadItems(5);\n        //ChromeSamples.setStatus(\'Loaded up to item \' + counter);\n      }\n    });\n    intersectionObserver.observe(app.sentinel);\n  }\n\n  async getNotifORI() {\n    let app = this;\n    let notifications = [];\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n\n    var _iteratorError3;\n\n    try {\n      for (var _iterator3 = flux_element_asyncIterator(solid.data[this.inbox].subjects), _step3, _value3; _step3 = await _iterator3.next(), _iteratorNormalCompletion3 = _step3.done, _value3 = await _step3.value, !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n        const subject = _value3;\n\n        //    console.log(`${subject}`)\n        if ("".concat(subject) != this.inbox) {\n          let n = {};\n          n.url = "".concat(subject) + \'#this\';\n          /* */\n\n          notifications.push(n);\n          app.log = "Notifications : " + notifications.length;\n        }\n      } //console.log(notifications)\n\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          await _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    this.notifications = notifications;\n  }\n\n  async getNotif1() {\n    let notifications = [];\n    let dateObj = new Date();\n    this.date = {};\n    this.date.month = ("0" + (dateObj.getUTCMonth() + 1)).slice(-2); //months from 1-12\n\n    this.date.day = ("0" + dateObj.getUTCDate()).slice(-2);\n    this.date.year = dateObj.getUTCFullYear();\n    this.path = this.inbox + [this.date.year, this.date.month, this.date.day, "index.ttl#this"].join("/");\n    console.log(this.path);\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n\n    var _iteratorError4;\n\n    try {\n      for (var _iterator4 = flux_element_asyncIterator(solid.data[this.path][\'https://www.w3.org/ns/activitystreams#item\']), _step4, _value4; _step4 = await _iterator4.next(), _iteratorNormalCompletion4 = _step4.done, _value4 = await _step4.value, !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {\n        const notif = _value4;\n        console.log("".concat(notif)); //  if(`${subject}` != inbox){\n\n        let n = {};\n        n.url = "".concat(notif);\n        /* */\n\n        notifications.push(n); //  this.addItem(n.url)\n        //  app.log = "Notifications : "+notifications.length\n        //  }\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          await _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n\n    console.log(notifications); //  this.notifications = notifications\n    //  this.load()\n  }\n  /*  load(){\r\n  this.offset++\r\n  let d = new Date();\r\n  d.setDate(d.getDate() - this.offset);\r\n  console.log("new date",d)\r\n  while(this.offset < 4){\r\n  this.load()\r\n  }\r\n  }*/\n\n\n}\n\ncustomElements.define(\'flux-element\', flux_element_FluxElement);\n// CONCATENATED MODULE: ./src/views/notification-line-element.js\n\n\nfunction notification_line_element_templateObject3() {\n  const data = notification_line_element_taggedTemplateLiteral(["<i class=\\"fas fa-user-circle fa-2x\\"\\n    title=\\"", "\\"\\n    webId=\\"", "\\"\\n    @click=\\"", "\\"></i>"]);\n\n  notification_line_element_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction notification_line_element_templateObject2() {\n  const data = notification_line_element_taggedTemplateLiteral(["<img class=\\"rounded-circle ml-0\\" width=\\"32px\\"\\n    src=\\"//images.weserv.nl/?url=", "&w=32&h=32\\"\\n    title=\\"", "\\"\\n    alt=\\"no image\\"\\n    webId=\\"", "\\"\\n    @click=\\"", "\\">"]);\n\n  notification_line_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction notification_line_element_templateObject() {\n  const data = notification_line_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div timestamp=\\"", "\\"\\n    url=\\"", "\\">\\n\\n\\n    <div class=\\"row\\">\\n    <div class=\\"col-2\\">\\n    ", "\\n\\n <p class=\\"text-muted small\\">", "</p>\\n\x3c!--   <p class=\\"text-muted small\\">", "</p>--\x3e\\n  </div>\\n\\n  <div class=\\"col\\">\\n  <small class=\\"text-muted\\" webId=\\"", "\\"\\n  @click=\\"", "\\">\\n  ", "\\n  </small>\\n  <activity-element name=\\"", "\\"\\n  url=\\"", "\\">Loading activity ", "...\\n  </activity-element>\\n  </div>\\n  </div>\\n\\n\\n  </div>\\n  "]);\n\n  notification_line_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction notification_line_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass notification_line_element_NotificationLineElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      url: {\n        type: String\n      },\n      notification: {\n        type: Object\n      },\n      creator: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "NotificationLine";\n    this.url = {};\n    this.notification = {};\n    this.creator = {};\n  }\n\n  render() {\n    return lit_html_html(notification_line_element_templateObject(), this.notification.timestamp, this.notification.url, this.creator.photo != "undefined" ? lit_html_html(notification_line_element_templateObject2(), this.creator.photo, this.creator.name, this.creator.webId, this.showProfile) : lit_html_html(notification_line_element_templateObject3(), this.creator.name, this.creator.webId, this.showProfile), this.delay(this.notification.published), this.notification.published, this.notification.attributedTo, this.showProfile, this.creator.name, this.name + \'_activity\', this.notification.link, this.notification.link);\n  }\n\n  showProfile() {\n    this.agent.send("App", {\n      action: "showPanel",\n      panel: "Profile"\n    });\n    this.agent.send("Profile", {\n      action: "profileChanged",\n      profile: this.creator\n    });\n  }\n\n  delay(published) {\n    let diff = new Date().getTime() - new Date(published).getTime();\n    let minute = 1000 * 60;\n    let minutes = Math.floor(diff / minute);\n    let heures = Math.floor(minutes / 60);\n    let jours = Math.floor(heures / 24);\n    let mois = Math.floor(jours / 31);\n    let annees = Math.floor(mois / 12);\n    let duree = "";\n    annees > 0 ? duree += annees + "y" : mois > 0 ? duree += mois + "m" : jours > 0 ? duree += jours + "j" : heures > 0 ? duree += heures + "h" : minutes > 0 ? duree += minutes + "m" : duree = diff / 1000 + "s";\n    return duree;\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name); //  console.log(this.agent)\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    this.init();\n  }\n\n  async init() {\n    this.notification.url = this.url; // console.log(this.notification.url)\n\n    let published = new Date((await solid.data[this.notification.url].as$published));\n    this.notification.published = "".concat(published);\n    this.notification.timestamp = published.getTime();\n    this.creator.webId = await solid.data[this.notification.url].as$attributedTo;\n    this.notification.summary = await solid.data[this.notification.url].as$summary;\n    this.notification.type = await solid.data[this.notification.url].as$type;\n    let link = await solid.data[this.notification.url].as$link;\n    this.notification.link = "".concat(link);\n    this.creator.name = (await solid.data[this.creator.webId].vcard$fn) || "".concat(this.creator.webId).split("/")[2].split(\'.\')[0];\n    let photo = await solid.data[this.creator.webId].vcard$hasPhoto;\n    this.creator.photo = "".concat(photo); //!= "undefined" ? `${photo}` : "https://solid.github.io/solid-ui/src/icons/noun_15059.svg"\n    //console.log(this.notification)\n\n    this.requestUpdate();\n  }\n\n  localName(strPromise) {\n    let str = "".concat(strPromise);\n    var ln = str.substring(str.lastIndexOf(\'#\') + 1); //console.log(ln)\n\n    ln == str ? ln = str.substring(str.lastIndexOf(\'/\') + 1) : "";\n    return ln;\n  }\n\n}\n\ncustomElements.define(\'notification-line-element\', notification_line_element_NotificationLineElement);\n// CONCATENATED MODULE: ./src/views/activity-element.js\n\n\n\nfunction activity_element_templateObject2() {\n  const data = activity_element_taggedTemplateLiteral(["\\n      <object-element name=\\"", "\\"\\n      url=\\"", "\\">\\n      Loading object\\n      </object-element>\\n      "]);\n\n  activity_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction activity_element_templateObject() {\n  const data = activity_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div class=\\"row\\" id=\\"", "\\">\\n    <p class=\\"lead\\">\\n    ", "\\n    </p>\\n    </div>\\n\\n    ", "\\n\\n      <div class=\\"row mt-2\\">\\n      <button class=\\"btn btn-outline-info btn-sm\\"  @click=\\"", "\\">Reply</button>\\n      <button class=\\"btn btn-outline-info btn-sm\\"><i class=\\"fas fa-share-alt\\" @click=\\"", "\\"></i></button>\\n      <button class=\\"btn btn-outline-info btn-sm\\"><i class=\\"far fa-thumbs-up\\" @click=\\"", "\\"></i></button>\\n      <button class=\\"btn btn-outline-info btn-sm\\"><i class=\\"far fa-thumbs-down\\" @click=\\"", "\\"></i></button>\\n      </div>\\n\\n      "]);\n\n  activity_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction activity_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction activity_element_asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }\n\n\n //let data = solid.data\n//console.log("LDFK+LEX",data)\n//import \'./object-element.js\'\n\nclass activity_element_ActivityElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      url: {\n        type: String\n      },\n      activity: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Activity";\n    this.url = "";\n    this.activity = {\n      objects: []\n    };\n  }\n\n  render() {\n    return lit_html_html(activity_element_templateObject(), this.url, this.activity.summary, this.activity.objects.map(object => lit_html_html(activity_element_templateObject2(), this.name + \'_object\', object)), this.replyTo, this.share, this.like, this.dislike);\n  }\n\n  like() {\n    alert("// TODO: come back later ;-) ");\n    console.log(this.url);\n    let conf = JSON.parse(localStorage.getItem("agora")).config;\n    console.log(conf.liked);\n  }\n\n  dislike() {\n    alert("// TODO: come back later ;-) ");\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name); //  console.log(this.agent)\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    }; //  this.init()\n\n  }\n\n  share() {\n    if (navigator.share) {\n      navigator.share({\n        title: "Take a look at that Agora Spog :\\n\\n",\n        text: this.activity.summary + "\\n\\n",\n        url: \'https://scenaristeur.github.io/agora?activity=\' + this.url + \'\\n\\n\'\n      }).then(() => console.log(\'Successful share\')).catch(error => console.log(\'Error sharing\', error));\n    } else {\n      var to = \'\';\n      var sub = "Agora : " + this.activity.summary;\n      var body = \'I want to share this link with you :   \\n https://scenaristeur.github.io/agora?activity=\' + this.url + \'  \\n \\n \';\n      var mailarr = [];\n\n      if (sub != "") {\n        sub = "subject=" + encodeURIComponent(sub);\n        mailarr.push(sub);\n      }\n\n      if (body != "") {\n        body = "body=" + encodeURIComponent(body);\n        mailarr.push(body);\n      }\n\n      var mailstr = mailarr.join("&");\n\n      if (mailstr != "") {\n        mailstr = "?" + mailstr;\n      }\n\n      window.open("mailto:" + to + mailstr);\n    }\n  }\n\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      //  console.log(`${propName} changed. oldValue: ${oldValue}`);\n      if ("".concat(propName) == "url" && this.url != "undefined" && this.url != null) {\n        this.init();\n      }\n    });\n  }\n\n  async init() {\n    //console.log(this.url)\n    this.activity.target = await solid.data[this.url].as$target;\n    this.activity.summary = await solid.data[this.url].as$summary;\n    let objects = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = activity_element_asyncIterator(solid.data[this.url].as$object), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const object = _value;\n        objects = [...objects, "".concat(object)];\n      } //      console.log("OBJECTS",objects)\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    this.activity.objects = objects; // = await solid.data[this.url].as$object\n\n    this.requestUpdate();\n  }\n\n  localName(strPromise) {\n    let str = "".concat(strPromise);\n    var ln = str.substring(str.lastIndexOf(\'#\') + 1);\n    ln == str ? ln = str.substring(str.lastIndexOf(\'/\') + 1) : "";\n    return ln;\n  }\n\n  replyTo() {\n    console.log(this.url);\n    this.agent.send("App", {\n      action: "showPanel",\n      panel: "Compose"\n    });\n    this.agent.send("Post", {\n      action: "toggleWrite"\n    });\n    this.agent.send("PostTabs", {\n      action: "setReplyTo",\n      replyTo: this.url\n    });\n  }\n\n}\n\ncustomElements.define(\'activity-element\', activity_element_ActivityElement);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.replace.js\nvar es6_regexp_replace = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./src/views/object-element.js\n\n\nfunction object_element_templateObject3() {\n  const data = object_element_taggedTemplateLiteral([" "]);\n\n  object_element_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction object_element_templateObject2() {\n  const data = object_element_taggedTemplateLiteral(["<img src=\\"", "\\" style=\'height: auto; width: 75%; max-width: 300px; object-fit: contain\' alt=\\"", "\\"/>"]);\n\n  object_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction object_element_templateObject() {\n  const data = object_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <div class=\\"row\\" >\\n    <div class=\\"col\\">\\n\\n    ", "\\n  <small> <div id=\\"content\\">", "</div></small>\\n    </div>\\n    </div>\\n\\n    "]);\n\n  object_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction object_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n //let data = solid.data\n//console.log("LDFK+LEX",data)\n\nclass object_element_ObjectElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      url: {\n        type: String\n      },\n      object: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Object";\n    this.url = "";\n    this.object = {};\n  }\n\n  render() {\n    return lit_html_html(object_element_templateObject(), this.object.ext == "jpg" ? lit_html_html(object_element_templateObject2(), this.url, this.url) : lit_html_html(object_element_templateObject3()), this.object.content);\n  }\n\n  linkify(inputText) {\n    // \x3c!--    ${this.linkify(`${this.object.content}`)}--\x3e\n    //console.log(inputText)\n    //URLs starting with http://, https://, or ftp://\n    var replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n    var replacedText = inputText.replace(replacePattern1, \' <small><a href="$1" target="_blank">$1</a></small> \'); //URLs starting with www. (without // before it, or it\'d re-link the ones done above)\n\n    var replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n    var replacedText = replacedText.replace(replacePattern2, \' <small>$1<a href="http://$2" target="_blank">$2</a></small> \'); //Change email addresses to mailto:: links\n\n    var replacePattern3 = /(\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,6})/gim;\n    var replacedText = replacedText.replace(replacePattern3, \'<a href="mailto:$1">$1</a>\');\n    this.shadowRoot.getElementById("content").innerHTML = replacedText;\n    this.requestUpdate(); //    return html`${replacedText}`\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name); //  console.log(this.agent)\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      //  console.log(`${propName} changed. oldValue: ${oldValue}`);\n      if ("".concat(propName) == "url" && this.url != "undefined") {\n        this.init();\n      }\n    });\n  }\n\n  async init() {\n    //console.log(this.url)\n    this.object.ext = this.url.substr(this.url.lastIndexOf(\'.\') + 1);\n\n    if (this.object.ext == "ttl#this") {\n      let as = "https://www.w3.org/ns/activitystreams#"; //  this.object.name = await solid.data[this.url].as$name\n\n      let type = await solid.data[this.url].as$type;\n      this.object.type = "".concat(type);\n\n      switch (this.localName("".concat(type))) {\n        case "Triple":\n          this.object.content = ""; //"[todo parse triples like "+ this.url+"</small>]"\n\n          this.requestUpdate();\n          break;\n\n        case "Note":\n        default:\n          this.object.content = await solid.data[this.url].as$content;\n          this.linkify("".concat(this.object.content));\n      }\n    } else {\n      //  console.log(this.object.ext,this.url)\n      this.requestUpdate();\n    }\n  }\n\n  localName(strPromise) {\n    let str = "".concat(strPromise);\n    var ln = str.substring(str.lastIndexOf(\'#\') + 1);\n    ln == str ? ln = str.substring(str.lastIndexOf(\'/\') + 1) : "";\n    return ln;\n  }\n\n}\n\ncustomElements.define(\'object-element\', object_element_ObjectElement);\n// EXTERNAL MODULE: ./node_modules/@rdfjs/data-model/index.js\nvar data_model = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/views/config-get-view.js\n\n\n\n\n\nfunction config_get_view_templateObject2() {\n  const data = config_get_view_taggedTemplateLiteral(["\\n      <li class=\\"list-group-item ", "\\">\\n      ", " : <small><a href=\\"", "\\" target=\\"_blank\\">", "</a></small></li>\\n      "]);\n\n  config_get_view_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction config_get_view_templateObject() {\n  const data = config_get_view_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    config : ", "</br>\\n    </div>\\n\\n    <h4>Configuration</h4>\\n    Log : <span class=\\"", "\\">", "</span><br><br>\\n    <button class=\\"btn btn-danger\\" @click=\\"", "\\">RE-check configuration from POD</button>\\n\\n\\n    <ul class=\\"list-group\\">\\n    ", "\\n      </ul>\\n\\n\\n      <div id=\\"modal1\\" class=\\"modal\\" tabindex=\\"-1\\" role=\\"dialog\\">\\n      <div class=\\"modal-dialog modal-lg\\" role=\\"document\\">\\n      <div class=\\"modal-content\\">\\n      <div class=\\"modal-header\\">\\n      <h5 class=\\"modal-title\\">", "</h5>\\n      <button type=\\"button\\" class=\\"close\\" data-dismiss=\\"modal\\" aria-label=\\"Close\\" @click=\\"", "\\">\\n      <span aria-hidden=\\"true\\">&times;</span>\\n      </button>\\n      </div>\\n      <div class=\\"modal-body\\">\\n      <form>\\n\\n      <div style=\\"overflow-x:auto\\">\\n      <div class=\\"form-group row\\">\\n      <label class=\\"col-sm-2 col-form-label\\" for=\\"pathInput\\">Path</label>\\n      <div class=\\"col-sm-9\\">\\n      <input type=\\"text\\" class=\\"form-control\\" id=\\"pathInput\\"\\n      placeholder=\\"Path\\"\\n      value=\\"", "\\"\\n      @input=\\"", "\\">\\n      </div>\\n      </div>\\n\\n      <div class=\\"form-group row\\">\\n      <label for=\\"staticInbox\\" class=\\"col-sm-2 col-form-label\\">Inbox</label>\\n      <div class=\\"col-sm-9\\">\\n      <input type=\\"text\\" readonly class=\\"form-control-plaintext\\" id=\\"staticInbox\\" >\\n      </div>\\n      </div>\\n\\n      <div class=\\"form-group row\\">\\n      <label for=\\"staticOutbox\\" class=\\"col-sm-2 col-form-label\\">Outbox</label>\\n      <div class=\\"col-sm-9\\">\\n      <input type=\\"text\\" readonly class=\\"form-control-plaintext\\" id=\\"staticOutbox\\" >\\n      </div>\\n      </div>\\n      </div>\\n      </form>\\n\\n      </div>\\n      <div class=\\"modal-footer\\">\\n      <button type=\\"button\\" class=\\"btn btn-primary\\" @click=\\"", "\\">Save changes</button>\\n      <button type=\\"button\\" class=\\"btn btn-secondary\\"\\n      data-dismiss=\\"modal\\" @click=\\"", "\\">Close</button>\\n      </div>\\n      </div>\\n      </div>\\n      </div>\\n      "]);\n\n  config_get_view_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction config_get_view_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction config_get_view_asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }\n\n\n\n\n\n\nclass config_get_view_ConfigGetView extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      config: {\n        type: Object\n      },\n      log: {\n        type: String\n      },\n      aclInbox: {\n        type: String\n      },\n      textColor: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      fc: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Config GET";\n    this.config = {};\n    this.log = "Init";\n    this.fc = new solid_file_client_bundle(solid.auth);\n    this.textColor = "text-primary";\n    this.debug = false;\n    this.aclInboxContent = "@prefix : <#>.\\n    @prefix acl: <http://www.w3.org/ns/auth/acl#>.\\n    @prefix inbox: <./>.\\n    @prefix c: </profile/card#>.\\n\\n    :Append\\n    a acl:Authorization;\\n    acl:accessTo <./>;\\n    acl:agentClass acl:AuthenticatedAgent;\\n    acl:default <./>;\\n    acl:mode acl:Append.\\n    :ControlReadWrite\\n    a acl:Authorization;\\n    acl:accessTo <./>;\\n    acl:agent c:me;\\n    acl:default <./>;\\n    acl:mode acl:Control, acl:Read, acl:Write.\\n    :Read\\n    a acl:Authorization;\\n    acl:accessTo <./>;\\n    acl:default <./>;\\n    acl:mode acl:Read.";\n    this.aclFollowers = "\\n@prefix : <#>.\\n@prefix n0: <http://www.w3.org/ns/auth/acl#>.\\n@prefix fol: <./>.\\n@prefix c: </profile/card#>.\\n\\n:AppendRead\\n    a n0:Authorization;\\n    n0:accessTo fol:;\\n    n0:default fol:;\\n    n0:mode n0:Append, n0:Read.\\n:ControlReadWrite\\n    a n0:Authorization;\\n    n0:accessTo fol:;\\n    n0:agent c:me;\\n    n0:default fol:;\\n    n0:mode n0:Control, n0:Read, n0:Write.\\n:ReadWrite\\n    a n0:Authorization;\\n    n0:accessTo fol:;\\n    n0:agentClass n0:AuthenticatedAgent;\\n    n0:default fol:;\\n    n0:mode n0:Read, n0:Write.";\n  }\n\n  render() {\n    return lit_html_html(config_get_view_templateObject(), !this.debug, this.name, JSON.stringify(this.config), this.textColor, this.log, this.checkConfig, Object.entries(this.config).map(([key, value]) => lit_html_html(config_get_view_templateObject2(), value == "undefined" ? "list-group-item-danger list-group-item-action" : "list-group-item-success", key, value, value)), this.log, this.hideModal, this.path, this.pathChanged, this.createFolders, this.hideModal);\n  }\n\n  newConfig(config) {\n    console.log("NEW CONFIG", config);\n    this.config = config;\n    this.checkConfig();\n  }\n\n  async checkConfig() {\n    console.log("CHECKKKKKK CONFIGGGGGG");\n    this.textColor = "text-primary";\n    this.log = "Init check";\n    this.config.date = new Date();\n    this.config.origin = "pod";\n    this.config.storage = "undefined";\n    this.config.pti = "undefined";\n    this.config.instance = "undefined";\n    this.config.inbox = "undefined";\n    this.config.acl_inbox = "undefined";\n    this.config.outbox = "undefined";\n    this.config.followers_folder = "undefined";\n    this.config.acl_followers = "undefined";\n    this.config.following_folder = "undefined";\n    this.config.liked = "undefined";\n    this.config.disliked = "undefined";\n    this.config.status = "Unknown";\n    this.log = "Checking Storage";\n    let storage = await solid.data[this.config.webId].storage;\n    this.config.storage = "".concat(storage);\n    this.log = "Checking PublicTypeIndex";\n    let pti = await solid.data[this.config.webId].publicTypeIndex;\n    this.config.pti = "".concat(pti);\n    this.log = "Checking Instances";\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = config_get_view_asyncIterator(solid.data[this.config.pti].subjects), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const subject = _value;\n        if (this.config.pti != "".concat(subject))\n          /*let s = `${subject}`\r\n          console.log(s)*/\n          this.log = "Checking Agora Instance";\n\n        if ("".concat(subject).endsWith(\'#Agora\')) {\n          let instance = await solid.data["".concat(subject)].solid$instance;\n          this.config.instance = "".concat(instance);\n          this.log = "Checking Inbox";\n          let inbox = await solid.data[this.config.instance].as$inbox;\n          this.config.inbox = "".concat(inbox);\n          this.log = "Checking Outbox";\n          let outbox = await solid.data[this.config.instance].as$outbox;\n          this.config.outbox = "".concat(outbox);\n          this.log = "Checking Followers Folder";\n          let followers_folder = await solid.data[this.config.instance].as$followers;\n          this.config.followers_folder = "".concat(followers_folder);\n          this.log = "Checking Following Folder";\n          let following_folder = await solid.data[this.config.instance].as$following;\n          this.config.following_folder = "".concat(following_folder);\n          this.log = "Checking Liked";\n          let liked = await solid.data[this.config.instance].as$liked;\n          this.config.liked = "".concat(liked);\n          this.log = "Checking Disliked";\n          let disliked = await solid.data[this.config.instance].as$disliked;\n          this.config.disliked = "".concat(disliked);\n          await this.createFollowIndexes();\n          await this.checkAcl(); //\n\n          let friends = [];\n          let followers = [];\n          let following = [];\n          this.log = "Checking Friends";\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n\n          var _iteratorError2;\n\n          try {\n            for (var _iterator2 = config_get_view_asyncIterator(solid.data[this.config.webId].friends), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n              const friend = _value2;\n              let f = "".concat(friend);\n              friends = [...friends, f];\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                await _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          this.config.friends = friends;\n          this.log = "Checking Followers"; //  this.config.followers_uri = this.config.followers_folder+"index.ttl#this"\n\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n\n          var _iteratorError3;\n\n          try {\n            for (var _iterator3 = config_get_view_asyncIterator(solid.data[this.config.followers_folder].ldp$contains), _step3, _value3; _step3 = await _iterator3.next(), _iteratorNormalCompletion3 = _step3.done, _value3 = await _step3.value, !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n              const f_er = _value3;\n              let fer = "".concat(f_er);\n              fer = fer.replace(this.config.followers_folder, "https://");\n              fer = fer.replace(".ttl", "/profile/card#me");\n              console.log(fer);\n              followers = [...followers, fer];\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                await _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          this.config.followers = followers;\n          this.log = "Checking Following";\n          this.config.following_uri = this.config.following_folder + "index.ttl#this";\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n\n          var _iteratorError4;\n\n          try {\n            for (var _iterator4 = config_get_view_asyncIterator(solid.data[this.config.following_uri].as$items), _step4, _value4; _step4 = await _iterator4.next(), _iteratorNormalCompletion4 = _step4.done, _value4 = await _step4.value, !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {\n              const f_ing = _value4;\n              let fing = "".concat(f_ing);\n              following = [...following, fing];\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                await _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          this.config.following = following;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    console.log("COOOOOOOOOOON", this.config);\n    console.log(Object.values(this.config));\n\n    if (Object.values(this.config).includes("undefined")) {\n      this.log = this.log + " CONFIGURATION NOT OK";\n      this.textColor = "text-danger";\n      this.config.status = "KO";\n      this.agent.send("App", {\n        action: "showPanel",\n        panel: "Config"\n      });\n      this.openConfigBox();\n    } else {\n      this.log = "CONFIGURATION OK";\n      this.config.status = "OK";\n      this.textColor = "text-success";\n      console.log("CONFIG SEND TO STORE", this.config);\n      this.agent.send("Store", {\n        action: "setStorage",\n        values: {\n          config: this.config\n        }\n      }); // temporary commented for dev  this.agent.send("App", {action: "showPanel"})\n\n      this.agent.sendMulti(["Friends", "Profile", "PostTabs", "Groups", "Inbox"], {\n        action: "configChanged",\n        config: this.config\n      });\n    }\n  }\n\n  async createFollowIndexes() {\n    // creation des fichiers\n    //  let followers_index = this.config.followers_folder+"index.ttl"\n    let following_index = this.config.following_folder + "index.ttl";\n    /*  if( !(await this.fc.itemExists(followers_index)) ) {\r\n        await this.fc.createFile (followers_index, "", "text/turtle") .then (success => {\r\n          this.log = "Created "+followers_index\r\n        }, err => {\r\n          this.log = err\r\n          alert(err + "... Are you sure you grant AGORA to FULL CONTROL ? see HELP !")\r\n          this.log = err +"... Are you sure you grant AGORA to FULL CONTROL ? Please see HELP !"\r\n        });\r\n      }*/\n\n    if (!(await this.fc.itemExists(following_index))) {\n      await this.fc.createFile(following_index, "", "text/turtle").then(success => {\n        this.log = "Created " + following_index;\n      }, err => {\n        this.log = err;\n        alert(err + "... Are you sure you grant AGORA to FULL CONTROL ? see HELP !");\n        this.log = err + "... Are you sure you grant AGORA to FULL CONTROL ? Please see HELP !";\n      });\n    }\n  }\n\n  async checkAcl() {\n    let app = this;\n    this.log = "ACL INBOX & FOLLOWERS VERIFICATION";\n    let inboxacl = this.config.inbox + ".acl";\n    let followersacl = this.config.followers_folder + ".acl";\n    console.log(inboxacl);\n    console.log(followersacl);\n    await this.fc.createFile(inboxacl, this.aclInboxContent, "text/turtle").then(success => {\n      this.log = "Created " + inboxacl;\n      this.config.acl_inbox = inboxacl;\n    }, err => {\n      this.log = err;\n      alert(err + "... Are you sure you grant AGORA to FULL CONTROL ? see HELP !");\n      this.log = err + "... Are you sure you grant AGORA to FULL CONTROL ? Please see HELP !";\n    });\n    await this.fc.createFile(followersacl, this.aclFollowers, "text/turtle").then(success => {\n      this.log = "Created " + followersacl;\n      this.config.acl_followers = followersacl;\n    }, err => {\n      this.log = err;\n      alert(err + "... Are you sure you grant AGORA to FULL CONTROL ? see HELP !");\n      this.log = err + "... Are you sure you grant AGORA to FULL CONTROL ? Please see HELP !";\n    });\n  }\n\n  async openConfigBox() {\n    this.path = this.config.storage + "public/agora/";\n    console.log(this.path);\n    this.showModal();\n    await this.requestUpdate();\n    this.pathChanged();\n  }\n\n  showModal() {\n    console.log("show");\n    this.shadowRoot.getElementById("modal1").style.display = "block";\n  }\n\n  hideModal() {\n    this.shadowRoot.getElementById("modal1").style.display = "none";\n  }\n\n  async createFolders() {\n    if (!this.path.includes(this.config.storage + "public/")) {\n      alert("Error the path must be in your /public folder");\n      this.path = this.config.storage + "public/agora/";\n      this.shadowRoot.getElementById("pathInput").value = this.path;\n      console.log(this.path);\n      await this.requestUpdate();\n      this.pathChanged();\n    } else {\n      this.hideModal();\n      this.log = "Creating Folders";\n      let root = this.path;\n      let inbox = this.shadowRoot.getElementById("staticInbox").value;\n      let outbox = this.shadowRoot.getElementById("staticOutbox").value;\n      console.log(root, inbox, outbox);\n      this.log = "Creating Inbox Folder";\n      let file = inbox + ".acl";\n      await this.fc.createFile(file, this.aclInboxContent, "text/turtle").then(success => {\n        this.log = "Created " + file;\n      }, err => {\n        this.log = err;\n        alert(err);\n      });\n\n      try {\n        this.log = "outbox Folder creation : " + outbox;\n\n        if (!(await this.fc.itemExists(outbox))) {\n          await this.fc.createFolder(outbox); // only create if it doesn\'t already exist\n        }\n\n        this.log = "outbox/objects Folder creation : " + outbox + "objects/";\n\n        if (!(await this.fc.itemExists(outbox + "objects/"))) {\n          await this.fc.createFolder(outbox + "objects/"); // only create if it doesn\'t already exist\n        }\n\n        this.log = "outbox/activities Folder creation : " + outbox + "activities/";\n\n        if (!(await this.fc.itemExists(outbox + "activities/"))) {\n          await this.fc.createFolder(outbox + "activities/"); // only create if it doesn\'t already exist\n        }\n      } catch (e) {\n        this.log = e;\n        alert(e);\n      }\n\n      try {\n        if (!(await this.fc.itemExists(root + "followers/"))) {\n          await this.fc.createFolder(root + "followers/"); // only create if it doesn\'t already exist\n        }\n      } catch (e) {\n        this.log = e;\n        alert(e);\n      }\n\n      try {\n        if (!(await this.fc.itemExists(root + "following/"))) {\n          await this.fc.createFolder(root + "following/"); // only create if it doesn\'t already exist\n        }\n      } catch (e) {\n        this.log = e;\n        alert(e);\n      }\n\n      try {\n        if (!(await this.fc.itemExists(root + "liked/"))) {\n          await this.fc.createFolder(root + "liked/"); // only create if it doesn\'t already exist\n        }\n      } catch (e) {\n        this.log = e;\n        alert(e);\n      }\n\n      try {\n        if (!(await this.fc.itemExists(root + "disliked/"))) {\n          await this.fc.createFolder(root + "disliked/"); // only create if it doesn\'t already exist\n        }\n      } catch (e) {\n        this.log = e;\n        alert(e);\n      }\n\n      try {\n        let id = "#Agora";\n        let inst_uri = this.config.pti + id;\n        let inst_index = root + \'index.ttl#this\';\n        this.log = "Instance Creation : ", inst_uri;\n        await solid.data[inst_uri].solid$forClass.add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Collection\'));\n        await solid.data[inst_uri].solid$instance.set(Object(data_model["namedNode"])(inst_index)); //  await solid.data[inst_uri].rdfs$label.add("Activity Streams Collection")\n\n        this.log = "Index Creation : ", inst_index;\n        await solid.data[inst_index].as$inbox.add(Object(data_model["namedNode"])(inbox));\n        await solid.data[inst_index].as$outbox.set(Object(data_model["namedNode"])(outbox));\n        await solid.data[inst_index].as$following.set(Object(data_model["namedNode"])(root + \'following/\'));\n        await solid.data[inst_index].as$followers.set(Object(data_model["namedNode"])(root + \'followers/\'));\n        await solid.data[inst_index].as$liked.set(Object(data_model["namedNode"])(root + \'liked/\'));\n        await solid.data[inst_index].as$disliked.set(Object(data_model["namedNode"])(root + \'disliked/\'));\n        this.log = "YAHOOOOOOOOOOO, AGORA IS READY, AND WELL CONFIGURED !!!";\n      } catch (e) {\n        this.log = "Can not create PublicTypeIndex Instance ";\n        alert(e);\n      }\n    }\n\n    console.log("FOLDERS CREATED");\n    this.checkConfig();\n  }\n\n  pathChanged() {\n    let pathInput = this.shadowRoot.getElementById("pathInput").value;\n    this.path = pathInput.endsWith("/") ? pathInput : pathInput + "/";\n    console.log(this.path);\n    this.shadowRoot.getElementById("staticInbox").value = this.path + "inbox/";\n    this.shadowRoot.getElementById("staticOutbox").value = this.path + "outbox/";\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name); //  console.log(this.agent)\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "newConfig":\n            app.newConfig(message.config);\n            break;\n\n          case "configChanged":\n            app.configChanged(message.config);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    }; //app.agent.send("Store", {action:"getConfig"});\n\n  }\n\n  configChanged(config) {\n    console.log("CONFIG CHANGED FROM ANOTHER AGENT", config);\n\n    if (config != undefined && config.webId == this.config.webId) {\n      config.origin = "store";\n      this.config = config;\n\n      if (this.config.status == "OK") {\n        this.agent.send("App", {\n          action: "showPanel"\n        });\n      }\n    } else {\n      this.agent.send("App", {\n        action: "showPanel",\n        panel: "Config"\n      });\n      this.checkConfig();\n    }\n  }\n  /*    webIdChanged(webId){\r\n  console.log("CONFIG GET ",webId)\r\n  this.config.webId = webId\r\n  if (webId != null){\r\n  this.log = "Logged"\r\n  this.agent.send("Store", {action: "getConfig"})\r\n    //  this.checkConfig()\r\n  }else{\r\n  this.config = {}\r\n  this.log = "Not Logged"\r\n  }\r\n  }*/\n\n\n}\n\ncustomElements.define(\'config-get-view\', config_get_view_ConfigGetView);\n// CONCATENATED MODULE: ./src/views/fab-element.js\nfunction fab_element_templateObject3() {\n  const data = fab_element_taggedTemplateLiteral([""]);\n\n  fab_element_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fab_element_templateObject2() {\n  const data = fab_element_taggedTemplateLiteral(["\\n      <button type=\\"button\\"\\n      class=\\"btn btn-write btn-info has-tooltip\\"\\n      data-placement=\\"left\\"\\n      @click=\\"", "\\"\\n      title=\\"Write\\"> <i class=\\"fa fa-pen\\"></i> </button>\\n      "]);\n\n  fab_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fab_element_templateObject() {\n  const data = fab_element_taggedTemplateLiteral(["\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <style>\\n    body { width: 100%; height: 100%; }\\n    .btn-group-fab {\\n      position: fixed;\\n      width: 50px;\\n      height: auto;\\n      right: 20px; bottom: 20px;\\n    }\\n    .btn-group-fab div {\\n      position: relative; width: 100%;\\n      height: auto;\\n    }\\n    .btn-group-fab .btn {\\n      position: absolute;\\n      bottom: 0;\\n      border-radius: 50%;\\n      display: block;\\n      margin-bottom: 4px;\\n      width: 40px; height: 40px;\\n      margin: 4px auto;\\n    }\\n    .btn-group-fab .btn-main {\\n      width: 50px; height: 50px;\\n      right: 50%; margin-right: -25px;\\n      z-index: 9;\\n    }\\n    .btn-group-fab .btn-sub {\\n      bottom: 0; z-index: 8;\\n      right: 50%;\\n      margin-right: -20px;\\n      -webkit-transition: all 2s;\\n      transition: all 0.5s;\\n    }\\n    .btn-write {\\n      position: fixed;\\n      border-radius: 50%;\\n      width: 50px;\\n      height: 50px;\\n      right: 10px; bottom: 12px;\\n      /*\\n      width: 50px; height: 50px;\\n      right: 100%; margin-right: 0px;*/\\n      z-index: 9;\\n    }\\n    .btn-group-fab.active .btn-sub:nth-child(2) {\\n      bottom: 60px;\\n    }\\n    .btn-group-fab.active .btn-sub:nth-child(3) {\\n      bottom: 110px;\\n    }\\n    .btn-group-fab.active .btn-sub:nth-child(4) {\\n      bottom: 160px;\\n    }\\n    .btn-group-fab .btn-sub:nth-child(5) {\\n      bottom: 210px;\\n    }\\n    </style>\\n\\n\\n    ", "\\n\\n    \x3c!--\\n    <div class=\\"btn-group-fab\\" role=\\"group\\" @click=\\"", "\\" aria-label=\\"FAB Menu\\">\\n    <div>\\n\\n    <button type=\\"button\\" class=\\"btn btn-main btn-primary has-tooltip\\" data-placement=\\"left\\" title=\\"Menu\\"> <i class=\\"fa fa-bars\\"></i> </button>\\n    <button type=\\"button\\" class=\\"btn btn-sub btn-info has-tooltip\\" data-placement=\\"left\\" title=\\"Fullscreen\\"> <i class=\\"fa fa-arrows-alt\\"></i> </button>\\n    <button type=\\"button\\" class=\\"btn btn-sub btn-danger has-tooltip\\" data-placement=\\"left\\" title=\\"Save\\"> <i class=\\"far fa-save\\"></i> </button>\\n    <button type=\\"button\\" class=\\"btn btn-sub btn-warning has-tooltip\\" data-placement=\\"left\\" title=\\"Download\\"> <i class=\\"fa fa-download\\"></i> </button>\\n    </div>\\n    </div>--\x3e\\n\\n    "]);\n\n  fab_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fab_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass fab_element_FabElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      webId: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.webId = null;\n  }\n\n  render() {\n    return lit_html_html(fab_element_templateObject(), this.webId != null ? lit_html_html(fab_element_templateObject2(), this.toggleWrite) : lit_html_html(fab_element_templateObject3()), this.toggleFab);\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n\n    this.agent.receive = function (from, message) {\n      if (message.hasOwnProperty("action")) {\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  webIdChanged(webId) {\n    this.webId = webId;\n  }\n\n  toggleFab() {\n    this.shadowRoot.querySelector(".btn-group-fab").classList.toggle(\'active\');\n  }\n\n  toggleWrite() {\n    console.log("toggleWrite");\n    this.agent.send("App", {\n      action: "showPanel",\n      panel: "Compose"\n    });\n    this.agent.send("Post", {\n      action: "toggleWrite"\n    });\n  }\n\n}\n\ncustomElements.define(\'fab-element\', fab_element_FabElement);\n// CONCATENATED MODULE: ./node_modules/lit-html/directives/class-map.js\n/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n// IE11 doesn\'t support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n    constructor(element) {\n        this.classes = new Set();\n        this.changed = false;\n        this.element = element;\n        const classList = (element.getAttribute(\'class\') || \'\').split(/\\s+/);\n        for (const cls of classList) {\n            this.classes.add(cls);\n        }\n    }\n    add(cls) {\n        this.classes.add(cls);\n        this.changed = true;\n    }\n    remove(cls) {\n        this.classes.delete(cls);\n        this.changed = true;\n    }\n    commit() {\n        if (this.changed) {\n            let classString = \'\';\n            this.classes.forEach((cls) => classString += cls + \' \');\n            this.element.setAttribute(\'class\', classString);\n        }\n    }\n}\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element\'s `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element\'s `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nconst classMap = directive_directive((classInfo) => (part) => {\n    if (!(part instanceof parts_AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== \'class\' || part.committer.parts.length > 1) {\n        throw new Error(\'The `classMap` directive must be used in the `class` attribute \' +\n            \'and must be the only part in the attribute.\');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    let previousClasses = previousClassesCache.get(part);\n    if (previousClasses === undefined) {\n        // Write static classes once\n        // Use setAttribute() because className isn\'t a string on SVG elements\n        element.setAttribute(\'class\', committer.strings.join(\' \'));\n        previousClassesCache.set(part, previousClasses = new Set());\n    }\n    const classList = (element.classList || new ClassList(element));\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that re don\'t require down-level\n    // iteration.\n    previousClasses.forEach((name) => {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n            previousClasses.delete(name);\n        }\n    });\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (value != previousClasses.has(name)) {\n            // We explicitly want a loose truthy check of `value` because it seems\n            // more convenient that \'\' and 0 are skipped.\n            if (value) {\n                classList.add(name);\n                previousClasses.add(name);\n            }\n            else {\n                classList.remove(name);\n                previousClasses.delete(name);\n            }\n        }\n    }\n    if (typeof classList.commit === \'function\') {\n        classList.commit();\n    }\n});\n//# sourceMappingURL=class-map.js.map\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto != \'undefined\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != \'undefined\' && typeof msCrypto.getRandomValues == \'function\' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error(\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\');\n  }\n\n  return getRandomValues(rnds8);\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/bytesToUuid.js\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var bytesToUuid_i = 0; bytesToUuid_i < 256; ++bytesToUuid_i) {\n  byteToHex[bytesToUuid_i] = (bytesToUuid_i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n\n  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], \'-\', bth[buf[i++]], bth[buf[i++]], \'-\', bth[buf[i++]], bth[buf[i++]], \'-\', bth[buf[i++]], bth[buf[i++]], \'-\', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join(\'\');\n}\n\n/* harmony default export */ var esm_browser_bytesToUuid = (bytesToUuid);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof options == \'string\') {\n    buf = options === \'binary\' ? new Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || esm_browser_bytesToUuid(rnds);\n}\n\n/* harmony default export */ var esm_browser_v4 = (v4);\n// CONCATENATED MODULE: ./src/views/post-tabs-element.js\n\n\n\n\n\nfunction _templateObject7() {\n  const data = post_tabs_element_taggedTemplateLiteral(["\\n          <option value=\\"", "\\">", "</option>\\n          "]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  const data = post_tabs_element_taggedTemplateLiteral(["\\n        <option selected value=\\"", "\\">", "</option>\\n        "]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  const data = post_tabs_element_taggedTemplateLiteral(["\\n      <option selected value=\\"", "\\">", "</option>\\n      "]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction post_tabs_element_templateObject4() {\n  const data = post_tabs_element_taggedTemplateLiteral(["\\n      <option\\n\\n      value=\\"", "\\" title=\\"", "\\">\\n      ", "\\n      </option>\\n      "]);\n\n  post_tabs_element_templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction post_tabs_element_templateObject3() {\n  const data = post_tabs_element_taggedTemplateLiteral([""]);\n\n  post_tabs_element_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction post_tabs_element_templateObject2() {\n  const data = post_tabs_element_taggedTemplateLiteral(["\\n      TODO<br>\\n      replyTo url  ", "<br>\\n      replyTo attributedTo  ", " <br>\\n      replyTo name  ", " <br>\\n\\n      <label class=\\"sr-only\\" for=\\"reply\\">Reply to</label>\\n      <div class=\\"input-group mb-2\\">\\n      <div class=\\"input-group-append\\">\\n      <div class=\\"input-group-text\\">Reply to</div>\\n      </div>\\n      <input id=\\"reply\\" class=\\"form-control\\" type=\\"text\\" value=\\"", "\\" style=\\"text-align:right;\\"  placeholder=\\"ReplyTo\\">\\n      </div>\\n      "]);\n\n  post_tabs_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction post_tabs_element_templateObject() {\n  const data = post_tabs_element_taggedTemplateLiteral(["\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <style>\\n    body {font-family: Arial;}\\n\\n    /* Style the tab */\\n    .tab {\\n      overflow: hidden;\\n      border: 1px solid #ccc;\\n      background-color: #f1f1f1;\\n    }\\n\\n    /* Style the buttons inside the tab */\\n    .tab button {\\n      background-color: inherit;\\n      float: left;\\n      border: none;\\n      outline: none;\\n      cursor: pointer;\\n      padding: 5px 8px;\\n      transition: 0.3s;\\n      font-size: 17px;\\n    }\\n\\n    /* Change background color of buttons on hover */\\n    .tab button:hover {\\n      background-color: #ddd;\\n    }\\n\\n    /* Create an active/current tablink class */\\n    .tab button.active {\\n      background-color: #ccc;\\n    }\\n\\n    /* Style the tab content */\\n    .tabcontent {\\n      display: none;\\n      padding: 6px 12px;\\n      border: 1px solid #ccc;\\n      border-top: none;\\n      width: 100%;\\n    }\\n    </style>\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    config : ", "</br>\\n    </div>\\n\\n    <div class=\\"container\\">\\n    <div class=\\"row\\">\\n\\n    ", "\\n\\n    <label class=\\"sr-only\\" for=\\"title\\">Title</label>\\n    <div class=\\"input-group mb-2\\">\\n\\n    <input id=\\"title\\" class=\\"form-control\\" type=\\"text\\" value=\\"", "\\" placeholder=\\"Title\\">\\n\\n    </div>\\n    </div>\\n\\n\\n    <div class=\\"row\\">\x3c!--style=\\"height:50vh\\"--\x3e\\n    <div id=\\"Note\\" class=\\"tabcontent\\" style=\\"display:block;height: 40vh\\">\\n    <note-element name=\\"Note\\" .share=\\"", "\\"></note-element>\\n    </div>\\n\\n    <div id=\\"Media\\" class=\\"tabcontent\\" style=\\"height: 40vh\\">\\n    <media-element name=\\"Media\\"></media-element>\\n    </div>\\n\\n    <div id=\\"Triple\\" class=\\"tabcontent\\" style=\\"height: 40vh\\">\\n    <triple-element name=\\"Triple\\"></triple-element>\\n    </div>\\n\\n    \x3c!--  <div id=\\"Graph\\" class=\\"tabcontent\\" style=\\"height: 40vh\\">\\n    <h3 class=\\"text-primary\\">Graph</h3>\\n    <p class=\\"text-primary\\">todo.</p>\\n    <graph-element name=\\"Graph\\"></graph-element>\\n    </div>--\x3e\\n\\n    <div class=\\"tab\\">\\n    <button class=\\"tablinks active\\" tabName=\'Note\' @click=\\"", "\\"><i class=\\"far fa-sticky-note\\"></i></button>\\n    <button class=\\"tablinks\\" tabName=\'Media\' @click=\\"", "\\"><i class=\\"fas fa-photo-video\\"></i></button>\\n    <button class=\\"tablinks\\" tabName=\'Triple\' @click=\\"", "\\"><i class=\\"fas fa-receipt\\"></i></button>\\n    \x3c!--<button class=\\"tablinks\\" tabName=\'Graph\' @click=\\"", "\\"><i class=\\"fas fa-dice-d20\\"></i></button>--\x3e\\n    </div>\\n\\n    </div>\\n\\n    <div class=\\"row\\">\\n    <label class=\\"sr-only\\" for=\\"title\\">Tags</label>\\n    <div class=\\"input-group mb-2\\">\\n    <div class=\\"input-group-append\\">\\n    <div class=\\"input-group-text\\">Tags</div>\\n    </div>\\n    <input id=\\"tags\\" class=\\"form-control\\" type=\\"text\\" placeholder=\\"tags, comma separated\\">\\n    </div>\\n    </div>\\n\\n\\n    <div class=\\"row\\">\\n\\n    <select id=\\"confid\\" class=\\"custom-select\\" @change=\\"", "\\" @input=\\"", "\\" @select=\\"", "\\"> \x3c!--multiple--\x3e\\n    ", "\\n    </select>\\n    <hr>\\n\\n    Confid : ", "\\n\\n    <select id=\\"friends\\" ?hidden=\\"", "\\" class=\\"custom-select\\" multiple>\\n    <option disabled>Select Multi Recipient</option>\\n\\n    ", "\\n      </select>\\n\\n      <select id=\\"followers\\" ?hidden=\\"", "\\" class=\\"custom-select\\" multiple>\\n      <option disabled>Select Multi Recipient</option>\\n\\n      ", "\\n        </select>\\n\\n        <select id=\\"groups\\" ?hidden=\\"", "\\" class=\\"custom-select\\" multiple>\\n        <option disabled>Select Multi Recipient</option>\\n\\n        ", "\\n          </select>\\n\\n\\n\\n        </div>\\n\\n\\n        <div class=\\"buttons\\">\\n        <div class=\\"row\\">\\n        \x3c!--  <div class=\\"col-4\\">\\n        <div class=\\"form-check\\">\\n        <input class=\\"form-check-input\\" type=\\"checkbox\\" value=\\"\\" id=\\"agora_pub\\" name=\\"agora_pub\\" checked>\\n        <label class=\\"text-primary\\" for=\\"agora_pub\\">\\n        Push to Agora\\n        </label>\\n        </div>\\n        </div>--\x3e\\n        <div class=\\"col-4\\">\\n        Log : ", "\\n        </div>\\n        <div class=\\"col\\">\\n        <button type=\\"button\\" class=\\"btn btn-primary\\" primary @click=", ">\\n        Send <i class=\\"far fa-paper-plane\\"></i></button>\\n        </div>\\n        \x3c!--\\n        <button type=\\"button\\" class=\\"cancel btn btn-primary\\" @click=\\"", "\\"><i class=\\"fas fa-window-close\\"></i> </button>--\x3e\\n        </div>\\n        </div>\\n\\n\\n\\n\\n\\n\\n        \x3c!--\\n        <div class=\\"buttons\\">\\n\\n        <div class=\\"row\\">\\n        <div class=\\"col-5\\">\\n        <button type=\\"button\\" class=\\"btn btn-primary\\" primary @click=", "><i class=\\"far fa-paper-plane\\"></i></button>\\n        <button type=\\"button\\" class=\\"cancel btn btn-primary\\" @click=\\"", "\\"><i class=\\"fas fa-window-close\\"></i> </button>\\n        </div>\\n        <div class=\\"col\\">\\n\\n        </div>\\n        </div>\\n        </div>--\x3e\\n        </div>\\n        "]);\n\n  post_tabs_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction post_tabs_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction post_tabs_element_asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }\n\n\n\n\n\n\nclass post_tabs_element_PostTabsElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      subelements: {\n        type: String\n      },\n      requetes: {\n        type: Object\n      },\n      responses: {\n        type: Array\n      },\n      agoraNotesListUrl: {\n        type: String\n      },\n      webId: {\n        type: String\n      },\n      info: {\n        type: String\n      },\n      replyTo: {\n        type: Object\n      },\n      config: {\n        type: Object\n      },\n      share: {\n        type: Object\n      },\n      confidentialite: {\n        type: Array\n      },\n      title: {\n        type: String\n      },\n      log: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      friends: {\n        type: Array\n      },\n      followers: {\n        type: Array\n      },\n      groups: {\n        type: Array\n      },\n      confid: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.debug = false;\n    this.fileClient = new SolidFileClient(solid.auth);\n    this.webId = null;\n    this.subelements = ["Note", "Media", "Triple"]; //, "Media", "Triple"] , "Graph"\n\n    this.requetes = {};\n    this.responses = [];\n    this.info = "";\n    this.replyTo = {};\n    this.config = {};\n    this.share = {};\n    this.friends = [];\n    this.followers = [];\n    this.groups = [];\n    this.confidentialite = [{\n      level: "Public",\n      selected: true,\n      value: "public",\n      description: "Everyone",\n      icon: "fas fa-globe"\n    }, //  {level: "Not listed", value: "not_listed", description: "Not listed in public ?", icon: "fas fa-lock-open"},\n    {\n      level: "Me (test)",\n      value: "me",\n      description: "Only me",\n      icon: "fas fa-lock"\n    }, {\n      level: "Friends",\n      value: "friends",\n      description: "Only your friends",\n      icon: "fas fa-lock"\n    }, {\n      level: "Followers (todo)",\n      value: "followers",\n      description: "Only your followers",\n      icon: "fas fa-lock"\n    }, {\n      level: "Groups (todo)",\n      value: "groups",\n      description: "One of your groups",\n      icon: "fas fa-lock-open"\n    } //  {level: "Direct (todo)", value: "direct", description: "Only listed users", icon: "fas fa-envelop"}\n    ];\n    this.confid = "public";\n    this.log = ""; //  this.agoraNotesListUrl = "https://agora.solid.community/public/notes.ttl"\n  }\n\n  render() {\n    return lit_html_html(post_tabs_element_templateObject(), !this.debug, this.name, JSON.stringify(this.config), this.replyTo.url != null ? lit_html_html(post_tabs_element_templateObject2(), this.replyTo.url, this.replyTo.attributedTo, this.replyTo.name, this.replyTo.url) : lit_html_html(post_tabs_element_templateObject3()), this.title, this.share, this.openTab, this.openTab, this.openTab, this.openTab, this.change, this.input, this.select, this.confidentialite.map(c => lit_html_html(post_tabs_element_templateObject4(), c.value, c.description, c.level)), this.confid, this.confid != \'friends\', this.friends.map(f => lit_html_html(_templateObject5(), f, f)), this.confid != \'followers\', this.followers.map(f => lit_html_html(_templateObject6(), f, f)), this.confid != \'groups\', this.groups.map(g => lit_html_html(_templateObject7(), g, g)), this.log, this.addNote, this.toggleWrite, this.addNote, this.toggleWrite);\n  }\n  /*  input(e){\r\n  console.log(e.target.value)\r\n  }*/\n\n\n  change(e) {\n    this.confid = e.target.value;\n    console.log(e.target.value);\n    console.log(this.config);\n  }\n\n  addNote() {\n    this.log = "Add Note";\n    var id = new Date().toISOString();\n    this.requetes = [];\n    var title = this.shadowRoot.getElementById(\'title\').value.trim();\n\n    if (title.length == 0) {\n      alert("Don\'t you want to provide a  beautiful title to your wonder post ?");\n    } else {\n      this.requetes[id] = this.subelements.length;\n      console.log(this.requetes);\n      this.log = "Ask SubElements Content";\n      var mess = {\n        action: "askContent",\n        id: id\n      };\n      this.agent.sendMulti(this.subelements, mess);\n    }\n  }\n\n  toggleWrite() {\n    this.agent.send("Post", {\n      action: "toggleWrite"\n    });\n  }\n\n  openTab(e) {\n    var node = e.target;\n\n    if (node.nodeName == "I") {\n      node = e.target.parentNode;\n    }\n\n    var tabName = node.getAttribute(\'tabName\');\n    var i, tabcontent, tablinks;\n    tabcontent = this.shadowRoot.querySelectorAll(".tabcontent");\n\n    for (i = 0; i < tabcontent.length; i++) {\n      tabcontent[i].style.display = "none";\n    }\n\n    tablinks = this.shadowRoot.querySelectorAll(".tablinks");\n\n    for (i = 0; i < tablinks.length; i++) {\n      tablinks[i].className = tablinks[i].className.replace(" active", "");\n    }\n\n    this.shadowRoot.getElementById(tabName).style.display = "block";\n    node.className += " active";\n  }\n\n  firstUpdated() {\n    var app = this; //  this.ph = new PodHelper();\n\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      if (message.hasOwnProperty("action")) {\n        switch (message.action) {\n          case "reponseContent":\n            app.reponseContent(from, message);\n            break;\n\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          case "setReplyTo":\n            app.setReplyTo(message);\n            break;\n\n          case "configChanged":\n            app.configChanged(message.config);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    if (this.share.title != "undefined" && this.share.title != null) {\n      this.title = this.share.title;\n    }\n\n    this.agent.send("Store", {\n      action: "getConfig"\n    }); //nedded because of lazy loading of this element\n  }\n\n  configChanged(config) {\n    console.log("CONFIG CHANGED", config);\n    this.config = config;\n    this.friends = this.config.friends || [];\n    this.followers = this.config.followers || [];\n    this.groups = this.config.groups || []; //      this.requestUpdate()\n  }\n\n  async setReplyTo(message) {\n    console.log(message);\n\n    if (message.replyTo != undefined) {\n      this.replyTo = {};\n      this.replyTo.url = message.replyTo;\n      let attributedTo = await solid.data[this.replyTo.url].as$attributedTo;\n      let name = (await solid.data["".concat(attributedTo)].vcard$fn) || "".concat(friend).split("/")[2].split(\'.\')[0];\n      this.replyTo.attributedTo = "".concat(attributedTo);\n      this.replyTo.name = "".concat(name);\n      console.log(this.replyTo);\n      this.requestUpdate();\n    } else {\n      this.replyTo = {};\n    }\n  }\n\n  webIdChanged(webId) {\n    console.log(webId);\n    this.webId = webId;\n  }\n\n  reponseContent(from, message) {\n    console.log(from, message);\n    this.requetes[message.id]--; // si toutes reponses\n\n    this.responses.push({\n      from: from,\n      message: message\n    });\n\n    if (this.requetes[message.id] == 0) {\n      console.log("UPDATE");\n      delete this.requetes[message.id];\n      this.preparePost();\n    }\n  }\n\n  async preparePost() {\n    var app = this;\n    console.log("CONFIG", this.config);\n    console.log("OUTBOX", this.config.outbox);\n    let agora_pub = false;\n    let recipients = [];\n\n    switch (this.confid) {\n      case "public":\n        //  recipients = ["https://agora.solid.community/profile/card#me"]\n        agora_pub = true;\n        break;\n\n      case "me":\n        recipients = [this.config.webId];\n        break;\n\n      case "friends":\n        let friends_select = this.shadowRoot.getElementById("friends");\n        recipients = Array(...friends_select.options).reduce((acc, option) => {\n          if (option.selected === true) {\n            acc.push(option.value);\n          }\n\n          return acc;\n        }, []);\n        console.log(recipients);\n        break;\n\n      case "followers":\n        let followers_select = this.shadowRoot.getElementById("followers");\n        recipients = Array(...followers_select.options).reduce((acc, option) => {\n          if (option.selected === true) {\n            acc.push(option.value);\n          }\n\n          return acc;\n        }, []);\n        console.log(recipients);\n        break;\n\n      case "groups":\n        let groups_select = this.shadowRoot.getElementById("groups");\n        recipients_group = Array(...followers_select.options).reduce((acc, option) => {\n          if (option.selected === true) {\n            acc.push(option.value);\n          }\n\n          return acc;\n        }, []);\n        console.log("must retrive each member of ", recipients_group);\n        break;\n\n      default:\n        alert(this.confid + "non traité line 408");\n    }\n\n    console.log("RECIPIENTS", recipients);\n    console.log(this.responses);\n    var title = this.shadowRoot.getElementById(\'title\').value.trim();\n    var tags = this.shadowRoot.getElementById(\'tags\').value.split(\',\'); //  var agora_pub = app.shadowRoot.getElementById(\'agora_pub\').checked\n\n    var inReplyTo = null;\n\n    if (this.shadowRoot.getElementById(\'reply\') != null) {\n      inReplyTo = this.shadowRoot.getElementById(\'reply\').value.trim();\n    }\n\n    this.shadowRoot.getElementById(\'title\').value = "";\n    this.shadowRoot.getElementById(\'tags\').value = "";\n    this.storage = await solid.data.user.storage; // TREAT OBJECTS\n\n    let dateObj = new Date();\n    let date = dateObj.toISOString(); //    let to = act.object.target == "Public" ? "https://www.w3.org/ns/activitystreams#Public" : act.object.target;\n\n    let objects = [];\n    this.responses.forEach(async function (r) {\n      //object create\n      let object_Id = esm_browser_v4(); // ⇨ \'9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d\'\n      //    let object_uri = outbox+"objects/"+object_Id+"/index.ttl#this"\n\n      let object_file = app.config.outbox + "objects/" + object_Id + ".ttl";\n      let object_uri = object_file + "#this";\n\n      switch (r.message.type) {\n        case "Note":\n          if (r.message.content.length > 0) {\n            objects.push({\n              uri: object_uri,\n              file: object_file\n            });\n            console.log("CREATE NOTE WITH", r.message.content, object_uri);\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#type\'].add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Note\'));\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#name\'].add(title);\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#content\'].add(r.message.content);\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#published\'].add(date);\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#attributedTo\'].add(Object(data_model["namedNode"])(app.config.webId));\n          }\n\n          break;\n\n        case "Image":\n        case "Video":\n        case "Audio":\n        case "Document":\n          // https://www.w3.org/wiki/SocialCG/ActivityPub/MediaUpload must normally be uploaded to recipient endpoint\n          if (r.message.content != undefined) {\n            var file = r.message.content;\n            var contentType = file.contentType;\n            var newFilename = r.message.newFilename;\n            var classe = r.message.type;\n            /*\r\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#type\'].add(namedNode(\'https://www.w3.org/ns/activitystreams#\'+r.message.type))\r\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#name\'].add(title)\r\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#content\'].add(r.message.content)\r\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#published\'].add(date)\r\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#attributedTo\'].add(namedNode(app.config.webId))\r\n            */\n            // no need to create an Object.ttl, replce by file ?\n\n            let object_file = app.config.outbox + "objects/" + classe + "/" + newFilename;\n            let object_uri = object_file; // pas de #this\n            // var object_uri = app.storage+"public/spoggy/"+classe+"/"+newFilename\n\n            console.log("CREATE DOCUMENT WITH", r.message, object_uri);\n            await app.sendFile(object_file, file, contentType); //   await  data[userActivity].as$object.add(namedNode(userMedia))\n\n            objects.push({\n              uri: object_uri,\n              file: object_file\n            });\n          }\n\n          break;\n\n        case "Triple":\n          if (r.message.content.length > 0) {\n            objects.push({\n              uri: object_uri,\n              file: object_file\n            });\n            content = r.message.content;\n            console.log("CREATE DOCUMENT WITH", r.message, object_uri);\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#type\'].add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#\' + r.message.type));\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#name\'].add(title);\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#published\'].add(date);\n            await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#attributedTo\'].add(Object(data_model["namedNode"])(app.config.webId)); //           await solid.data[object_uri][\'https://www.w3.org/ns/activitystreams#content\'].add(r.message.content)\n            //write subject https://github.com/LDflex/LDflex/issues/53\n\n            r.message.content.forEach(async function (triple, i) {\n              //  console.log(triple)\n              let subject = object_file + "#" + triple.subject;\n              let predicate = object_file + "#" + triple.predicate;\n              let object = object_file + "#" + triple.object; //console.log(subject, predicate, object)\n\n              await solid.data[subject][predicate].add(Object(data_model["namedNode"])(object));\n            });\n          }\n\n          break;\n\n        default:\n          console.log(r.message.type, "non traite");\n      }\n    });\n    this.responses = [];\n    console.log("TODO : ACL FILES & REPLYTO");\n    console.log("OBJECTS", objects);\n    /*\r\n    if (to == "https://www.w3.org/ns/activitystreams#Public"){\r\n    console.log("Send to Agora")\r\n    to = "https://agora.solid.community/profile/card#me"\r\n    }\r\n    */\n    //activity create\n\n    let activity_Id = esm_browser_v4(); //      let activity_uri = outbox+"activities/"+activity_Id+"/index.ttl#this"\n\n    let activity_file = app.config.outbox + "activities/" + activity_Id + ".ttl";\n    let activity_uri = activity_file + "#this";\n    await solid.data[activity_uri][\'https://www.w3.org/ns/activitystreams#type\'].add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Create\'));\n    await solid.data[activity_uri][\'https://www.w3.org/ns/activitystreams#summary\'].add(title);\n    await solid.data[activity_uri][\'https://www.w3.org/ns/activitystreams#published\'].add(date);\n    await solid.data[activity_uri].rdfs$label.add(title);\n    /*  if (recipients.length== 0){\r\n    await solid.data[o.uri][\'https://www.w3.org/ns/activitystreams#to\'].add(namedNode(app.config.webId))\r\n    await solid.data[activity_uri][\'https://www.w3.org/ns/activitystreams#target\'].add(namedNode(app.config.webId))\r\n    }*/\n    // ACL OBJECT\n\n    let recipientsWebIds = [];\n    recipients.forEach((r, i) => {\n      recipientsWebIds.push(\'<\' + r + \'>\');\n    });\n    let aclStringWebIds = recipientsWebIds.join(\', \');\n    console.log("ACL STRING", aclStringWebIds);\n    objects.forEach(async function (o, i) {\n      app.setAcl(o, aclStringWebIds, agora_pub);\n      await solid.data[activity_uri][\'https://www.w3.org/ns/activitystreams#object\'].add(Object(data_model["namedNode"])(o.uri));\n      recipients.forEach(async function (to, i) {\n        if (o.uri.endsWith("#this")) {\n          await solid.data[o.uri][\'https://www.w3.org/ns/activitystreams#to\'].add(Object(data_model["namedNode"])(to));\n        }\n      });\n\n      if (agora_pub == true) {\n        await solid.data[o.uri][\'https://www.w3.org/ns/activitystreams#to\'].add(Object(data_model["namedNode"])("https://agora.solid.community/profile/card#me"));\n        await solid.data[o.uri][\'https://www.w3.org/ns/activitystreams#to\'].add(Object(data_model["namedNode"])("https://www.w3.org/ns/activitystreams#Public"));\n      }\n    });\n    this.log = activity_uri + "DONE";\n    console.log("Activity OK", activity_uri);\n    let activity = {\n      url: activity_uri,\n      file: activity_file\n    };\n    app.setAcl(activity, aclStringWebIds, agora_pub);\n    /* ACL pour plusieurs createFolders\r\n    @prefix : <#>.\r\n    @prefix n0: <http://www.w3.org/ns/auth/acl#>.\r\n    @prefix c: </profile/card#>.\r\n    @prefix c0: <https://spoggy-test2.solid.community/profile/card#>.\r\n    @prefix c1: <https://spoggy-test3.solid.community/profile/card#>.\r\n      :ControlReadWrite\r\n    a n0:Authorization;\r\n    n0:accessTo <fa8740cc-8eaf-4ae8-8489-b4d96783d224.ttl>;\r\n    n0:agent c:me;\r\n    n0:mode n0:Control, n0:Read, n0:Write.\r\n    :Read\r\n    a n0:Authorization;\r\n    n0:accessTo <fa8740cc-8eaf-4ae8-8489-b4d96783d224.ttl>;\r\n    n0:agent c0:me, c1:me;\r\n    n0:mode n0:Read.*/\n\n    /* ACL plusieurs readers & public\r\n    @prefix : <#>.\r\n    @prefix n0: <http://www.w3.org/ns/auth/acl#>.\r\n    @prefix c: </profile/card#>.\r\n    @prefix c0: <https://spoggy-test2.solid.community/profile/card#>.\r\n    @prefix c1: <https://spoggy-test3.solid.community/profile/card#>.\r\n    @prefix n1: <http://xmlns.com/foaf/0.1/>.\r\n      :ControlReadWrite\r\n    a n0:Authorization;\r\n    n0:accessTo <fa8740cc-8eaf-4ae8-8489-b4d96783d224.ttl>;\r\n    n0:agent c:me;\r\n    n0:mode n0:Control, n0:Read, n0:Write.\r\n    :Read\r\n    a n0:Authorization;\r\n    n0:accessTo <fa8740cc-8eaf-4ae8-8489-b4d96783d224.ttl>;\r\n    n0:agent c0:me, c1:me;\r\n    n0:agentClass n1:Agent;\r\n    n0:mode n0:Read.\r\n    */\n\n    if (agora_pub == true) {\n      this.log = "Add Public to recipients";\n      console.log("PUBLIC", agora_pub);\n      await solid.data[activity_uri][\'https://www.w3.org/ns/activitystreams#to\'].add(Object(data_model["namedNode"])("https://agora.solid.community/profile/card#me"));\n      await solid.data[activity_uri][\'https://www.w3.org/ns/activitystreams#to\'].add(Object(data_model["namedNode"])("https://www.w3.org/ns/activitystreams#Public"));\n      recipients.push("https://agora.solid.community/profile/card#me");\n    }\n\n    recipients.forEach(async function (to, i) {\n      console.log("TO", to);\n      app.log = "notification to " + to;\n      await solid.data[activity_uri][\'https://www.w3.org/ns/activitystreams#target\'].add(Object(data_model["namedNode"])(to)); // recipient notification\n\n      let notification_Id = esm_browser_v4();\n      let pti = await solid.data[to].publicTypeIndex;\n      console.log(pti);\n      let instanceTrouvee = false;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = post_tabs_element_asyncIterator(solid.data[pti].subjects), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n          const subject = _value;\n          let s = "".concat(subject); //  console.log(s)\n\n          if (pti != "".concat(subject)) {\n            //  console.log(s)\n            if ("".concat(subject).endsWith(\'#Agora\')) {\n              instanceTrouvee = true;\n              console.log(s);\n              let instance = await solid.data["".concat(subject)].solid$instance;\n              let ib = await solid.data["".concat(instance)].as$inbox;\n              let recip_inbox = "".concat(ib);\n              let notification_uri = recip_inbox + notification_Id + ".ttl#this";\n              console.log(notification_uri);\n              await solid.data[notification_uri][\'https://www.w3.org/ns/activitystreams#type\'].add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Create\'));\n              await solid.data[notification_uri][\'https://www.w3.org/ns/activitystreams#attributedTo\'].add(Object(data_model["namedNode"])(app.config.webId));\n              await solid.data[notification_uri][\'https://www.w3.org/ns/activitystreams#summary\'].add(title);\n              await solid.data[notification_uri].rdfs$label.add(title);\n              await solid.data[notification_uri][\'https://www.w3.org/ns/activitystreams#published\'].add(date);\n              await solid.data[notification_uri][\'https://www.w3.org/ns/activitystreams#link\'].add(Object(data_model["namedNode"])(activity_uri));\n              app.log = notification_uri + "DONE"; //  var dateObj = new Date();\n              //  var messageId = "#Msg"+dateObj.getTime()\n\n              var month = ("0" + (dateObj.getUTCMonth() + 1)).slice(-2); //months from 1-12\n\n              var day = ("0" + dateObj.getUTCDate()).slice(-2);\n              var year = dateObj.getUTCFullYear();\n              var path = recip_inbox + [year, month, day, ""].join("/");\n              console.log(path); //  var url = path+"chat.ttl"+messageId\n              //  this._lastPost = url\n              //var date = dateObj.toISOString()\n\n              var index = path + "index.ttl#this";\n              console.log(date); //  console.log(url)\n\n              console.log(index); //  await solid.data[index][\'https://www.w3.org/ns/activitystreams#published\'].add(date)\n\n              await solid.data[index][\'https://www.w3.org/ns/activitystreams#item\'].add(Object(data_model["namedNode"])(notification_uri));\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      instanceTrouvee == false ? alert("No Agora Instance found in " + to + " Public Type Index ") : "";\n    });\n    this.log = "Send OK";\n    this.toggleWrite();\n    this.agent.send("App", {\n      action: "showPanel",\n      panel: "Flow"\n    });\n  }\n\n  async setAcl(o, aclStringWebIds, agora_pub) {\n    this.log = "Set ACL for ", o.file;\n    let aclString = "\\n  @prefix : <#>.\\n  @prefix acl: <http://www.w3.org/ns/auth/acl#>.\\n  @prefix c: </profile/card#>.\\n\\n  :ControlReadWrite\\n  a acl:Authorization;\\n  acl:accessTo <".concat(o.file, ">;\\n  acl:agent c:me;\\n  acl:mode acl:Control, acl:Read, acl:Write.\\n  :Read\\n  a acl:Authorization;\\n  acl:accessTo <").concat(o.file, ">;\\n  ").concat(aclStringWebIds.length > 0 ? " acl:agent ".concat(aclStringWebIds, ";") : "", "\\n  ").concat(agora_pub == true ? "acl:agentClass <http://xmlns.com/foaf/0.1/Agent> ;" : "", "\\n  acl:mode acl:Read."); //  console.log(aclString)\n\n    try {\n      await this.fileClient.createFile(o.file + \'.acl\', aclString, "text/turtle");\n      this.log = o.file + \'.acl Created\';\n    } catch (e) {\n      alert(e);\n    }\n  }\n  /*\r\n  async sendFile(uri, file, contentType){\r\n  await this.fileClient.createFile(uri, file, contentType)\r\n  .then(\r\n  success =>{\r\n  console.log(success)\r\n  //  this.agent.send("Messages", {action: "info", status: "Save file OK", file: success})\r\n  },\r\n  err => {\r\n  console.log(err)\r\n  });\r\n  }*/\n\n\n  async preparePost2() {\n    var app = this;\n    console.log(this.responses);\n    var date = new Date(Date.now());\n    var id = date.getTime();\n    var title = this.shadowRoot.getElementById(\'title\').value.trim();\n    var tags = this.shadowRoot.getElementById(\'tags\').value.split(\',\');\n    var agora_pub = app.shadowRoot.getElementById(\'agora_pub\').checked;\n    var inReplyTo = null;\n\n    if (this.shadowRoot.getElementById(\'reply\') != null) {\n      inReplyTo = this.shadowRoot.getElementById(\'reply\').value.trim();\n    }\n\n    this.shadowRoot.getElementById(\'title\').value = "";\n    this.shadowRoot.getElementById(\'tags\').value = "";\n    this.storage = await solid.data.user.storage;\n    var userActivity = this.storage + "public/spoggy/activity.ttl#" + id;\n    console.log("Creation ", userActivity);\n    await solid.data[userActivity].as$name.set(title);\n    await solid.data[userActivity].rdfs$label.set(title);\n    await solid.data[userActivity].schema$dateCreated.set(date.toISOString());\n    await solid.data[userActivity].rdf$type.add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Create\'));\n    inReplyTo != null && inReplyTo.length > 0 ? await solid.data[userActivity].as$inReplyTo.add(Object(data_model["namedNode"])(inReplyTo)) : "";\n\n    if (agora_pub == true) {\n      var agoraActivity = "https://agora.solid.community/public/spoggy/activity.ttl#" + id;\n      await solid.data[agoraActivity].as$name.add(title);\n      await solid.data[agoraActivity].rdfs$label.add(title);\n      await solid.data[agoraActivity].schema$dateCreated.add(date.toISOString());\n      await solid.data[agoraActivity].rdf$type.add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Create\'));\n      await solid.data[agoraActivity].as$actor.add(Object(data_model["namedNode"])(app.webId));\n      await solid.data[agoraActivity].as$target.add(Object(data_model["namedNode"])(userActivity));\n      inReplyTo != null && inReplyTo.length > 0 ? await solid.data[agoraActivity].as$inReplyTo.add(Object(data_model["namedNode"])(inReplyTo)) : "";\n    }\n\n    this.responses.forEach(async function (r) {\n      switch (r.message.type) {\n        case "Note":\n          if (r.message.content.length > 0) {\n            var userNote = app.storage + "public/Notes/" + id + ".ttl";\n            var content = r.message.content;\n            await solid.data[userNote].schema$text.add(content);\n            await solid.data[userNote].rdf$type.add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Note\'));\n            await solid.data[userActivity].schema$text.add(content);\n            await solid.data[userActivity].as$object.add(Object(data_model["namedNode"])(userNote));\n\n            if (agora_pub == true) {\n              await solid.data[agoraActivity].schema$text.add(content);\n              await solid.data[agoraActivity].as$object.add(Object(data_model["namedNode"])(userNote));\n            }\n          }\n\n          break;\n\n        case "Image":\n        case "Video":\n        case "Audio":\n        case "Document":\n          if (r.message.content != undefined) {\n            var file = r.message.content;\n            var contentType = file.contentType;\n            var newFilename = r.message.newFilename;\n            var classe = r.message.type;\n            var userMedia = app.storage + "public/spoggy/" + classe + "/" + newFilename;\n            console.log("creation ", userMedia);\n            await app.sendFile(userMedia, file, contentType);\n            await solid.data[userActivity].as$object.add(Object(data_model["namedNode"])(userMedia));\n            await solid.data[agoraActivity].as$object.add(Object(data_model["namedNode"])(userMedia));\n          }\n\n          break;\n\n        case "Triple":\n          if (r.message.content.length > 0) {\n            content = r.message.content;\n          }\n\n          break;\n\n        default:\n          console.log(r.message.type, "non traite");\n      }\n    });\n    this.responses = [];\n  }\n\n  async preparePost1() {\n    var app = this; //  app.webId = this.ph.getPod("webId")\n    //  console.log(this.webId)\n\n    console.log(this.responses);\n    var date = new Date(Date.now());\n    var id = date.getTime();\n    var title = this.shadowRoot.getElementById(\'title\').value.trim();\n    var tags = this.shadowRoot.getElementById(\'tags\').value.split(\',\');\n    this.shadowRoot.getElementById(\'title\').value = "";\n    this.shadowRoot.getElementById(\'tags\').value = "";\n    this.storage = await solid.data.user.storage;\n    var userActivity = this.storage + "public/spoggy/activity.ttl#" + id;\n    console.log("Creation ", userActivity);\n    await solid.data[userActivity].rdfs$label.add(title);\n    await solid.data[userActivity].schema$dateCreated.add(date.toISOString());\n    await solid.data[userActivity].as$name.add(title);\n    await solid.data[userActivity].as$generator.add(window.location.origin);\n    await solid.data[userActivity].rdf$type.add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Create\'));\n    console.log(userActivity + " -- >created");\n    await solid.data[app.storage + "public/spoggy/tags.ttl"].rdfs$label.add("Tags");\n    var agora_pub = app.shadowRoot.getElementById(\'agora_pub\').checked;\n\n    if (agora_pub == true) {\n      console.log("Creation ", userActivity);\n      var agoraActivity = "https://agora.solid.community/public/spoggy/activity.ttl#" + id;\n      await solid.data[agoraActivity].schema$dateCreated.add(date.toISOString());\n      await solid.data[agoraActivity].rdfs$label.add(title);\n      await solid.data[agoraActivity].as$name.add(title);\n      await solid.data[agoraActivity].as$target.add(Object(data_model["namedNode"])(userActivity));\n      await solid.data[agoraActivity].rdf$type.add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Add\'));\n      await solid.data[agoraActivity].schema$creator.add(Object(data_model["namedNode"])(app.webId));\n      await solid.data[agoraActivity].as$actor.add(Object(data_model["namedNode"])(app.webId));\n      console.log(agoraActivity + " -- >created");\n    }\n\n    tags.forEach(async function (t) {\n      var taguri = app.storage + "public/spoggy/tags.ttl#" + t.trim();\n      await solid.data[userActivity].as$tag.add(Object(data_model["namedNode"])(taguri)); //    console.log(taguri+ " -- >created")\n    }); //  var path = this.storage+"public/Notes/"+id+".ttl"\n    //  console.log(data)\n    //  var tit = await  solid.data[path].rdfs$label.add("title ONE")\n    //  var cont = await solid.data[path].schema$text.add("content ONE");\n\n    this.responses.forEach(async function (r) {\n      switch (r.message.type) {\n        case "Note":\n          var userNote = app.storage + "public/spoggy/Notes/" + id + ".ttl";\n          var content = r.message.content;\n          await solid.data[userNote].rdfs$label.add(title);\n          await solid.data[userNote].schema$text.add(content);\n          await solid.data[userNote].rdf$type.add(Object(data_model["namedNode"])(\'https://www.w3.org/ns/activitystreams#Note\')); //!!! as$Note ne fonctionne pas\n\n          await solid.data[userActivity].as$attachment.add(Object(data_model["namedNode"])(userNote));\n          await solid.data[userActivity].schema$text.add(content);\n          var agora_pub = app.shadowRoot.getElementById(\'agora_pub\').checked;\n\n          if (agora_pub == true) {\n            //!!! as$Note ne fonctionne pas\n            await solid.data[agoraActivity].as$object.add(Object(data_model["namedNode"])(userNote));\n            await solid.data[agoraActivity].schema$text.add(content);\n          }\n\n          break;\n\n        case "Image":\n        case "Video":\n        case "Audio":\n        case "Document":\n          if (r.message.content != undefined) {\n            var file = r.message.content;\n            var contentType = file.contentType;\n            var newFilename = r.message.newFilename;\n            var classe = r.message.type;\n            var userMedia = app.storage + "public/spoggy/" + classe + "/" + newFilename;\n            console.log("creation ", userMedia);\n            await app.sendFile(userMedia, file, contentType);\n            await solid.data[userActivity].as$attachment.add(Object(data_model["namedNode"])(userMedia));\n\n            if (agora_pub == true) {\n              //!!! as$Note ne fonctionne pas\n              await solid.data[agoraActivity].as$object.add(Object(data_model["namedNode"])(userMedia));\n            }\n          }\n\n          break;\n\n        default:\n          console.log(r.message.type, "non traite");\n      }\n    });\n    await solid.data[app.storage + "public/spoggy/tags.ttl"].rdfs$label.add("Tags");\n    tags.forEach(async function (t) {\n      var taguri = app.storage + "public/spoggy/tags.ttl#" + t.trim();\n      await solid.data[userActivity].as$tag.add(Object(data_model["namedNode"])(taguri)); //    console.log(taguri+ " -- >created")\n    });\n    this.responses = []; //  this.updatePod(data)\n  }\n\n  sendFile(uri, file, contentType) {\n    this.fileClient.createFile(uri, file, contentType).then(success => {\n      console.log(success); //  this.agent.send("Messages", {action: "info", status: "Save file OK", file: success})\n    }, err => {\n      console.log(err);\n    });\n  }\n\n}\n\ncustomElements.define(\'post-tabs-element\', post_tabs_element_PostTabsElement);\n// CONCATENATED MODULE: ./src/views/post-dialog-element.js\nfunction post_dialog_element_templateObject() {\n  const data = post_dialog_element_taggedTemplateLiteral(["\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <style>\\n\\n    /* The Modal (background) */\\n    .modal {\\n      display: none; /* Hidden by default */\\n      position: fixed; /* Stay in place */\\n      z-index: 1050; /* Sit on top */\\n      padding-top: 100px; /* Location of the box */\\n      left: -16px;\\n      top: -16px;\\n      width: 100%; /* Full width */\\n      height: 100%; /* Full height */\\n      overflow: auto; /* Enable scroll if needed */\\n      background-color: rgb(0,0,0); /* Fallback color */\\n      background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\\n    }\\n    /* Modal Content */\\n    .modal-content {\\n      background-color: #fefefe;\\n      margin: auto;\\n      padding: 20px;\\n      border: 1px solid #888;\\n      width: 80%;\\n      min-width: 320px\\n    }\\n    .content{\\n      overflow = \'auto\';\\n      maxHeight = \'100px\'\\n    }\\n\\n    /* The Close Button */\\n    .close {\\n      color: #aaaaaa;\\n      float: right;\\n      font-size: 28px;\\n      font-weight: bold;\\n    }\\n\\n    .close:hover,\\n    .close:focus {\\n      color: #000;\\n      text-decoration: none;\\n      cursor: pointer;\\n    }\\n\\n    .opened {\\n      display: flex;\\n    }\\n    .closed {\\n      display: none;\\n    }\\n    .dialog {\\n      flex-direction: column;\\n      border: 2px outset black;\\n      padding: 1em;\\n      margin: 1em;\\n    }\\n    .buttons {\\n      display: flex;\\n      flex-direction: row;\\n    }\\n    .accept {\\n      justify-content: space-around;\\n      align-content: space-around;\\n    }\\n    .cancel {\\n      justify-content: space-around;\\n      align-content: space-around;\\n    }\\n\\n    @media(max-width:767px){\\n      .dialog {\\n        padding: 0em;\\n      }\\n      .modal-content {\\n        padding-top: 20px;\\n        padding-bottom: 20px;\\n        width: 100%;\\n      }\\n    }\\n    </style>\\n\\n\\n    <div class=\\"", "\\">\\n    <div class=\\"modal-content\\">\\n    <h6 class=\\"m-0 font-weight-bold text-primary title\\">New Spog\\n    <i @click=\\"", "\\" class=\\"close fas fa-window-close\\"></i>\\n    </h6>\\n    <div>\\n    <post-tabs-element name=\\"PostTabs\\" .share=\\"", "\\"></post-tabs-element>\\n    </div>\\n    </div>\\n    </div>"]);\n\n  post_dialog_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction post_dialog_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n//https://gist.github.com/ErikHellman/9e17f2ea6a78669294ef2af4bc3f5878\n//https://vaadin.com/learn/tutorials/lit-element/lit-element-templating-properties-and-events\n\n\n\n\nclass post_dialog_element_PostDialogElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      opened: {\n        type: Boolean\n      },\n      share: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.opened = false;\n    this.share = {};\n  }\n\n  render() {\n    return lit_html_html(post_dialog_element_templateObject(), classMap({\n      dialog: true,\n      opened: this.opened,\n      closed: !this.opened,\n      modal: true\n    }), () => this.dispatchEvent(new CustomEvent(\'dialog.cancel\')), this.share);\n  }\n\n}\n\ncustomElements.define(\'post-dialog-element\', post_dialog_element_PostDialogElement);\n// CONCATENATED MODULE: ./src/views/post-element.js\nfunction post_element_templateObject3() {\n  const data = post_element_taggedTemplateLiteral(["\\n      <div class=\\"btn btn-sm btn-outline-info\\">\\n      You must login to post a spog!\\n      </div>\\n      "]);\n\n  post_element_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction post_element_templateObject2() {\n  const data = post_element_taggedTemplateLiteral(["\\n      <div>\\n      <button type=\\"button\\"\\n      class=\\"btn btn-primary btn-sm\\"\\n      @click=\\"", "\\"><i class=\\"fa fa-pen\\"></i></button>\\n\\n  \x3c!--    ( Write Note, Load Media , then go back to Agora/Flow panel, and refresh manually, Sorry the auto refresh is Work in progress )\\n  --\x3e    <post-dialog-element ?opened=\\"", "\\"\\n      @dialog.accept=\\"", "\\"\\n      @dialog.cancel=\\"", "\\"\\n      .share=\\"", "\\">\\n      </post-dialog-element>\\n      </div>\\n      "]);\n\n  post_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction post_element_templateObject() {\n  const data = post_element_taggedTemplateLiteral(["\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/offcanvas.css\\" rel=\\"stylesheet\\">\\n\\n    ", "\\n\\n    "]);\n\n  post_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction post_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n //https://gist.github.com/ErikHellman/9e17f2ea6a78669294ef2af4bc3f5878\n\nclass post_element_PostElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      dialogVisible: {\n        type: Boolean\n      },\n      webId: {\n        type: String\n      },\n      share: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.dialogVisible = false;\n    this.webId = null;\n    this.share = {};\n  }\n\n  render() {\n    //  console.log(\'Dialog visible:\', this.dialogVisible)\n    return lit_html_html(post_element_templateObject(), this.webId != null ? lit_html_html(post_element_templateObject2(), this.toggleDialog.bind(this), this.dialogVisible, this.closeDialog.bind(this), this.closeDialog.bind(this), this.share) : lit_html_html(post_element_templateObject3()));\n  }\n\n  toggleDialog(e) {\n    this.dialogVisible = !this.dialogVisible; //  console.log(this.dialogVisible)\n\n    var messRep = {\n      action: "setReplyTo"\n    };\n    this.agent.send("PostTabs", messRep);\n\n    if (this.dialogVisible == false) {\n      this.agent.send("App", {\n        action: "showPanel",\n        panel: "Flow"\n      });\n    }\n  }\n\n  closeDialog(e) {\n    //  console.log(e)\n    this.dialogVisible = false;\n    this.agent.send("App", {\n      action: "showPanel",\n      panel: "Flow"\n    });\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n\n    this.agent.receive = function (from, message) {\n      if (message.hasOwnProperty("action")) {\n        switch (message.action) {\n          case "toggleWrite":\n            app.toggleWrite(message);\n            break;\n\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    this.share.show == true ? this.toggleWrite() : "";\n  }\n\n  toggleWrite(message) {\n    console.log(message);\n    this.toggleDialog(message);\n  }\n\n  webIdChanged(webId) {\n    this.webId = webId;\n  }\n\n}\n\ncustomElements.define(\'post-element\', post_element_PostElement);\n// CONCATENATED MODULE: ./src/views/note-element.js\nfunction note_element_templateObject() {\n  const data = note_element_taggedTemplateLiteral(["\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <div class=\\"form-group\\">\\n    \x3c!--    <label class=\\"text-primary\\" for=\\"notearea\\"></label>--\x3e\\n    <textarea class=\\"form-control\\" id=\\"notearea\\"\\n    style=\\"width:100%;height:38vh\\"\\n    placeholder=\\"Write a note on your Pod & share it on Agora\\"></textarea>\\n    </div>\\n    "]);\n\n  note_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction note_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass note_element_NoteElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      share: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.share = {};\n  }\n\n  render() {\n    return lit_html_html(note_element_templateObject());\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      if (message.hasOwnProperty("action")) {\n        switch (message.action) {\n          case "askContent":\n            app.askContent(from, message);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    console.log("SHARE", this.share);\n\n    if (this.share.text != undefined) {\n      this.shadowRoot.getElementById("notearea").innerHTML += this.share.text + "\\n\\n" + this.share.url;\n    }\n  }\n\n  askContent(from, message) {\n    console.log(from, message);\n    var textarea = this.shadowRoot.getElementById(\'notearea\');\n    /*.shadowRoot.querySelector(".form-control")*/\n\n    var note = textarea.value.trim();\n    console.log(note);\n    this.agent.send(from, {\n      action: "reponseContent",\n      content: note,\n      id: message.id,\n      type: "Note"\n    });\n    textarea.value = "";\n  }\n\n}\n\ncustomElements.define(\'note-element\', note_element_NoteElement);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.match.js\nvar es6_regexp_match = __webpack_require__(85);\n\n// CONCATENATED MODULE: ./src/views/media-element.js\n\n\n\nfunction media_element_templateObject3() {\n  const data = media_element_taggedTemplateLiteral(["\\n      "]);\n\n  media_element_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction media_element_templateObject2() {\n  const data = media_element_taggedTemplateLiteral(["\\n      <div class=\\"row\\">\\n      <label class=\\"sr-only\\" for=\\"filename\\">Filename</label>\\n      <div class=\\"input-group mb-2\\">\\n      <input id=\\"filename\\" class=\\"form-control\\" type=\\"text\\" value=\\"", "\\" @change=\\"", "\\" placeholder=\\"Filename\\">\\n      <div class=\\"input-group-append\\">\\n      <div class=\\"input-group-text\\">", "</div>\\n      </div>\\n      </div>\\n      </div>\\n\\n\\n      "]);\n\n  media_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction media_element_templateObject() {\n  const data = media_element_taggedTemplateLiteral(["\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <style>\\n    i {\\n      padding: 10px\\n    }\\n    </style>\\n    \x3c!--  list : ", " --\x3e\\n    <div class=\\"row\\">\\n    <form>\\n    <div class=\\"custom-file\\">\\n    <input type=\\"file\\"\\n    class=\\"custom-file-input\\"\\n    @change=\\"", "\\"\\n    id=\\"mediaFile\\"\\n    accept=\\"image/*;video/*;audio/*\\"\\n    lang=\\"", "\\">\\n    <label class=\\"custom-file-label\\"\\n    for=\\"mediaFile\\">\\n    <i class=\\"fas fa-camera-retro\\"></i>\\n    <i class=\\"fas fa-video\\"></i>\\n    <i class=\\"fas fa-microphone\\"></i>\\n    </label>\\n    </div>\\n    </form>\\n    </div>\\n\\n    ", "\\n\\n      <div class=\\"col-auto\\"><canvas style=\\"max-width: 100%; height: auto;\\" id=\\"canvas\\"/></div>\\n\\n      "]);\n\n  media_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction media_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n// redimensionner l\'image avant envoi http://tech.novapost.fr/redimensionner-une-image-cote-client-avant-lupload.html\n\n\n\nclass media_element_MediaElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      count: {\n        type: Number\n      },\n      extension: {\n        type: String\n      },\n      filename: {\n        type: String\n      },\n      info: {\n        type: String\n      },\n      folders: {\n        type: Array\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.info = "";\n    this.folders = ["public/spoggy/", "public/spoggy/Activity/", "public/spoggy/Image/", "public/spoggy/Video/", "public/spoggy/Audio/", "public/spoggy/Document/"];\n    this.filename = "";\n  }\n\n  render() {\n    return lit_html_html(media_element_templateObject(), this.notesListUrl, this.createTemp, this.lang, this.filename.length > 0 ? lit_html_html(media_element_templateObject2(), this.filename, this.filenameChange, this.extension) : lit_html_html(media_element_templateObject3()));\n  }\n\n  createTemp(e) {\n    this.file = e.target.files[0];\n    this.filename = this.file.name.substring(0, this.file.name.lastIndexOf("."));\n    this.extension = this.file.name.substring(this.file.name.lastIndexOf("."));\n    var canvas = this.shadowRoot.getElementById(\'canvas\');\n    var ctx = canvas.getContext(\'2d\');\n    var cw = canvas.width;\n    var ch = canvas.height;\n    var maxW = cw;\n    var maxH = ch;\n    var image = new Image();\n\n    image.onload = function () {\n      var iw = image.width;\n      var ih = image.height;\n      var scale = Math.min(maxW / iw, maxH / ih);\n      var iwScaled = iw * scale;\n      var ihScaled = ih * scale;\n      canvas.width = iwScaled;\n      canvas.height = ihScaled;\n      ctx.drawImage(image, 0, 0, iwScaled, ihScaled); //  ctx.drawImage(image, 0,0);\n      //  alert(\'the image is drawn\');\n    };\n\n    image.src = URL.createObjectURL(this.file);\n    /*\r\n    canvas.width = this.file.width;\r\n    canvas.height = this.file.height;\r\n    canvas.getContext(\'2d\').drawImage(image, 0, 0);\r\n    // Other browsers will fall back to image/png\r\n    img.src = canvas.toDataURL(\'image/webp\');*/\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n\n    this.agent.receive = function (from, message) {\n      if (message.hasOwnProperty("action")) {\n        switch (message.action) {\n          case "askContent":\n            app.askContent(from, message);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  askContent(from, message) {\n    var app = this;\n    console.log(from, message);\n    this.classe = "Document";\n\n    if (this.file != undefined) {\n      var type = this.file.type;\n\n      switch (type) {\n        case (type.match(/^image/) || {}).input:\n          this.classe = "Image";\n          break;\n\n        case (type.match(/^video/) || {}).input:\n          this.classe = "Video";\n          break;\n\n        case (type.match(/^audio/) || {}).input:\n          this.classe = "Audio";\n          break;\n\n        default:\n          this.classe = "Document";\n          break;\n      }\n    }\n\n    var rep = {\n      action: "reponseContent",\n      content: this.file,\n      id: message.id,\n      type: this.classe\n    };\n\n    if (this.filename.length > 0) {\n      rep.newFilename = this.filename.replace(/ /g, "_") + this.extension;\n    }\n\n    this.agent.send(from, rep);\n    this.filename = "";\n  }\n\n  filenameChange() {\n    var filename = this.shadowRoot.getElementById("filename").value;\n\n    if (filename.length == 0) {\n      alert("Filename must not be blank");\n      this.shadowRoot.getElementById("filename").value = this.filename;\n    } else {\n      this.filename = filename;\n    }\n  }\n\n}\n\ncustomElements.define(\'media-element\', media_element_MediaElement);\n// CONCATENATED MODULE: ./src/views/triple-element.js\n\n\nfunction triple_element_templateObject5() {\n  const data = triple_element_taggedTemplateLiteral(["\\n<small>\\nYou can add triples to your Spog.<br>\\nTo do so, just type 3 words in the above input and :\\n<ul>\\n<li>ends with a comma if you want to keep subject & predicate, </li>\\n<li>ends with a semicolon if you want to keep just the subject,</li>\\n<li>ends with a dot if you don\'t want to keep anything,</li>\\n<li>ends with a dash if you want that the object become the subject of the next triple.</li>\\n</ul>\\nex: Dav a man,\\n</small>\\n"]);\n\n  triple_element_templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction triple_element_templateObject4() {\n  const data = triple_element_taggedTemplateLiteral(["  ", ""]);\n\n  triple_element_templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction triple_element_templateObject3() {\n  const data = triple_element_taggedTemplateLiteral(["\\n      <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n      <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n      <div class=\\"row\\">\\n      <div class=\\"input-group mb-3\\">\\n      <input type=\\"text\\"\\n      id=\\"tripleInput\\"\\n      class=\\"form-control\\"\\n      placeholder=\\"ex: Paris type Town.\\"\\n      aria-label=\\"Write some Triples\\"\\n      aria-describedby=\\"basic-addon2\\"\\n      @keydown=", ">\\n      <div class=\\"input-group-append\\">\\n      <button class=\\"btn btn-outline-primary\\" @click=\\"", "\\" type=\\"button\\">Add</button>\\n\\n      </div>\\n      \x3c!--      <div class=\\"input-group-text\\">?</div>--\x3e\\n      </div>\\n      </div>\\n\\n      <div class=\\"row\\">\\n\\n", "\\n\\n\\n      </div>\\n      "]);\n\n  triple_element_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction triple_element_templateObject2() {\n  const data = triple_element_taggedTemplateLiteral(["\\n      <li class=\\"list-group-item\\">\\n      <div class=\\"row\\">\\n      <button class=\\"btn btn-outline-secondary btn-sm\\" type=\\"button\\">", "</button>\\n      <button class=\\"btn btn-outline-secondary btn-sm\\" type=\\"button\\">", "</button>\\n      <button class=\\"btn btn-outline-secondary btn-sm\\" type=\\"button\\">", "</button>\\n      [edit] [delete]\\n      </div>\\n      </li>\\n      "]);\n\n  triple_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction triple_element_templateObject() {\n  const data = triple_element_taggedTemplateLiteral(["\\n    <ul class=\\"list-group list-group-flush\\" style=\\"height: 30vh; width:100%; overflow: auto\\">\\n    ", "\\n      </ul>\\n      "]);\n\n  triple_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction triple_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass triple_element_TripleElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      count: {\n        type: Number\n      },\n      triples: {\n        type: Array\n      },\n      footprint: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.count = 0;\n    this.triples = [];\n    this.footprint = {\n      index: "public/triple.ttl",\n      path: "public/Triple"\n    };\n  }\n\n  render() {\n    const triplesList = triples => lit_html_html(triple_element_templateObject(), triples.map(t => lit_html_html(triple_element_templateObject2(), t.subject, t.predicate, t.object)));\n\n    return lit_html_html(triple_element_templateObject3(), this.keydown, this.add_triple, this.triples.length > 0 ? lit_html_html(triple_element_templateObject4(), triplesList(this.triples)) : lit_html_html(triple_element_templateObject5()));\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n\n    this.agent.receive = function (from, message) {\n      if (message.hasOwnProperty("action")) {\n        switch (message.action) {\n          case "askContent":\n            app.askContent(from, message);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  askContent(from, message) {\n    console.log(from, message);\n    this.agent.send(from, {\n      action: "reponseContent",\n      content: this.triples,\n      id: message.id,\n      type: "Triple"\n    });\n  }\n\n  add_triple() {\n    var new_triple = this.shadowRoot.getElementById(\'tripleInput\').value.trim();\n\n    if (new_triple.length == 0) {\n      alert("you can\'t add an empty Triple");\n      return;\n    }\n\n    console.log(new_triple);\n    var res = this.updateInput(new_triple);\n    console.log(res);\n    this.shadowRoot.getElementById(\'tripleInput\').value = res.inputNew;\n\n    if (res.type == "triplet") {\n      var triple = res.value;\n      this.triples.reverse();\n      this.triples = [...this.triples, triple];\n      this.triples.reverse();\n    } else {\n      alert("Triple must end with \',\', or \';\' or \'.\'");\n    } // voir traiteTriplet dans js/spoggy.js de spoggy-simple\n\n  }\n\n  updateInput(message) {\n    var result = {};\n    var inputNew = "";\n    let lastChar = message.slice(-1);\n    let messageCut = message.slice(0, -1).split(" ");\n    let isTriplet = true;\n    console.log(messageCut);\n    let detectLiteral = "";\n    let messageCutTemp = [];\n    messageCut.forEach(function (part) {\n      part = part.trim(); //  console.log(part);\n\n      if (part.startsWith(\'"\')) {\n        detectLiteral = "debut"; //  console.log(detectLiteral);\n\n        messageCutTemp.push(part.substr(1));\n      } else if (part.endsWith(\'"\')) {\n        detectLiteral = "fin"; //console.log(detectLiteral);\n\n        messageCutTemp.push(messageCutTemp.pop() + " " + part.slice(0, -1));\n      } else if (detectLiteral == "debut") {\n        //  console.log("recupere le dernier et lui ajoute part" )\n        messageCutTemp.push(messageCutTemp.pop() + " " + part);\n      } else {\n        messageCutTemp.push(part);\n      }\n    });\n\n    if (messageCutTemp.length > 0) {\n      messageCut = messageCutTemp;\n    }\n\n    switch (lastChar) {\n      case \'.\':\n        inputNew = "";\n        break;\n\n      case \';\':\n        if (messageCut[0].indexOf(" ") > -1) {\n          inputNew = \'"\' + messageCut[0] + \'"\' + \' \';\n        } else {\n          inputNew = messageCut[0] + \' \';\n        }\n\n        break;\n\n      case \',\':\n        if (messageCut[0].indexOf(" ") > -1) {\n          inputNew = \'"\' + messageCut[0] + \'" \';\n        } else {\n          inputNew = messageCut[0] + \' \';\n        }\n\n        if (messageCut[1].indexOf(" ") > -1) {\n          inputNew += \'"\' + messageCut[1] + \'" \';\n        } else {\n          inputNew += messageCut[1] + \' \';\n        }\n\n        break;\n\n      case \'-\':\n        if (messageCut[2].indexOf(" ") > -1) {\n          inputNew = \'"\' + messageCut[2] + \'"\' + \' \';\n        } else {\n          inputNew = messageCut[2] + \' \';\n        }\n\n        break;\n\n      default:\n        console.log("message to chat " + message); //this.sendMessage(message);\n        //  this.agentInput.send(\'agentSocket\', {type: "sendMessage", message:message});\n        //  this.catchTriplet(message.slice(0,-1), this.network); // A REMPLACER PAR CATCHTRIPLETS V2\n\n        inputNew = "";\n        isTriplet = false;\n    }\n\n    if (isTriplet) {\n      //  console.log("est Triplet",messageCut)\n      result.type = "triplet";\n      var tripletvalue = {};\n      tripletvalue.subject = messageCut[0];\n      tripletvalue.predicate = messageCut[1];\n      tripletvalue.object = messageCut[2];\n      result.value = tripletvalue;\n      result.inputNew = inputNew;\n    } else {\n      //  console.log("n\'est pas triplet")\n      result.type = "message";\n      result.value = message;\n      result.inputNew = inputNew;\n    }\n\n    return result;\n  }\n\n  keydown(e) {\n    if (e.which === 13) {\n      this.add_triple();\n      e.preventDefault();\n      return false;\n    }\n  }\n\n}\n\ncustomElements.define(\'triple-element\', triple_element_TripleElement);\n// CONCATENATED MODULE: ./src/views/graph-element.js\nfunction graph_element_templateObject() {\n  const data = graph_element_taggedTemplateLiteral(["\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <p>", "</p>\\n    <button @click=\\"", "\\">Send message</button>\\n    "]);\n\n  graph_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction graph_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass graph_element_GraphElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      count: {\n        type: Number\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.count = 0;\n  }\n\n  render() {\n    return lit_html_html(graph_element_templateObject(), this.name, this.sendMessage);\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n\n    this.agent.receive = function (from, message) {\n      if (message.hasOwnProperty("action")) {\n        switch (message.action) {\n          case "doSomething":\n            app.doSomething(message);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  doSomething(message) {\n    console.log(message);\n  }\n\n  sendMessage() {\n    this.count++;\n    this.agent.send("Messages", {\n      action: "info",\n      info: "Now counter is " + this.count\n    });\n  }\n\n}\n\ncustomElements.define(\'graph-element\', graph_element_GraphElement);\n// CONCATENATED MODULE: ./src/views/friends-view.js\nfunction friends_view_templateObject4() {\n  const data = friends_view_taggedTemplateLiteral(["\\n      <friend-view name=\\"", "\\" f_webId=", ">Loading Follower</friend-view>\\n      "]);\n\n  friends_view_templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction friends_view_templateObject3() {\n  const data = friends_view_taggedTemplateLiteral(["\\n      <friend-view name=\\"", "\\" f_webId=", ">Loading Following</friend-view>\\n      "]);\n\n  friends_view_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction friends_view_templateObject2() {\n  const data = friends_view_taggedTemplateLiteral(["\\n      <friend-view name=\\"", "\\" f_webId=", ">Loading Friend</friend-view>\\n      "]);\n\n  friends_view_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction friends_view_templateObject() {\n  const data = friends_view_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <div class=\\"container-fluid\\">\\n\\n    <div class=\\"card text-center\\">\\n    <div class=\\"card-header\\">\\n    <ul class=\\"nav nav-tabs card-header-tabs\\">\\n    <li class=\\"nav-item\\">\\n    <a class=\\"nav-link active\\" tab=\\"friends\\" @click=\\"", "\\" href=\\"#\\">", " Friends</a>\\n    </li>\\n    <li class=\\"nav-item\\">\\n    <a class=\\"nav-link\\" tab=\\"following\\" @click=\\"", "\\" href=\\"#\\">", " Following</a>\\n    </li>\\n    <li class=\\"nav-item\\">\\n    <a class=\\"nav-link\\" tab=\\"followers\\" @click=\\"", "\\" href=\\"#\\">", " Followers</a>\\n    </li>\\n    <li class=\\"nav-item\\">\\n    <a class=\\"nav-link\\" tab=\\"groups\\" @click=\\"", "\\" href=\\"#\\">Groups</a>\\n    </li>\\n    </ul>\\n    </div>\\n\\n    <div style=\\"overflow-y:scroll;position:relative;height: 80wh;\\">\\n\\n    <div class=\\"card-deck\\" ?hidden=\\"", "\\">\\n    ", "\\n    </div>\\n\\n    <div class=\\"card-deck\\" ?hidden=\\"", "\\">\\n    ", "\\n    </div>\\n\\n    <div class=\\"card-deck\\" ?hidden=\\"", "\\">\\n    ", "\\n    </div>\\n\\n    <div class=\\"card-deck\\" ?hidden=\\"", "\\">\\n    <groups-view name=\\"Groups\\">Loading groups</groups-view>\\n    </div>\\n\\n\\n    </div>\\n\\n    </div>\\n    "]);\n\n  friends_view_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction friends_view_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n //let data = solid.data\n//console.log("LDFK+LEX",data)\n\nclass friends_view_FriendsView extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      friends: {\n        type: Array\n      },\n      followers: {\n        type: Array\n      },\n      following: {\n        type: Array\n      },\n      tab: {\n        type: String\n      },\n      config: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Friends";\n    this.config = {};\n    this.friends = [];\n    this.followers = [];\n    this.following = [];\n    this.tab = "friends";\n  }\n\n  render() {\n    return lit_html_html(friends_view_templateObject(), this.openTab, this.friends.length, this.openTab, this.following.length, this.openTab, this.followers.length, this.openTab, this.tab != "friends", this.friends.map((f, i) => lit_html_html(friends_view_templateObject2(), "Friend_" + i, f)), this.tab != "following", this.following.map((f, i) => lit_html_html(friends_view_templateObject3(), "Following_" + i, f)), this.tab != "followers", this.followers.map((f, i) => lit_html_html(friends_view_templateObject4(), "Follower_" + i, f)), this.tab != "groups");\n  }\n  /*\r\n    ${this.following.map((f, i) => html`\r\n  <friend-view name="${"Following_"+i}" f_webId=${f}>Loading Following</friend-view>\r\n  `\r\n  )}\r\n  ${this.followers.map((f, i) => html`\r\n  <friend-view name="${"Followers_"+i}" f_webId=${f}>Loading Followers</friend-view>\r\n  `\r\n  )}\r\n  */\n\n\n  openTab(e) {\n    this.tab = e.target.getAttribute("tab"); //console.log(this.tab)\n\n    let tablinks = this.shadowRoot.querySelectorAll(".nav-link");\n\n    for (let i = 0; i < tablinks.length; i++) {\n      tablinks[i].classList.remove("active");\n    }\n\n    e.target.classList.add("active");\n  }\n\n  configChanged(config) {\n    console.log("CONFIG", config);\n    this.config = config; //  this.getFollowers()\n    //  this.getFollowing()\n\n    this.friends = this.config.friends || [];\n    this.followers = this.config.followers || [];\n    this.following = this.config.following || []; //console.log("HIIIHAAAA",this.followers)\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name); //console.log(this.agent)\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "configChanged":\n            app.configChanged(message.config);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n}\n\ncustomElements.define(\'friends-view\', friends_view_FriendsView);\n// CONCATENATED MODULE: ./src/views/friend-view.js\n\n\nfunction friend_view_templateObject4() {\n  const data = friend_view_taggedTemplateLiteral(["<i class=\\"fas fa-user-circle fa-2x\\" title=\\"", "\\"></i>"]);\n\n  friend_view_templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction friend_view_templateObject3() {\n  const data = friend_view_taggedTemplateLiteral(["<img class=\\"rounded-circle card-img-top\\"\\n      src=\\"//images.weserv.nl/?url=", "&w=100&h=100\\"\\n      style=\\"height:5rem,width:5rem\\"\\n      title=\\"", "\\"\\n      alt=\\"no image\\">"]);\n\n  friend_view_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction friend_view_templateObject2() {\n  const data = friend_view_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div class=\\"card bg-light m-3\\" style=\\"width: 8rem;\\">\\n    ", "\\n\\n    \x3c!--    <img class=\\"card-img-top\\" src=\\"//images.weserv.nl/?url=", "&w=150&h=150\\"  alt=\\"", "\\">--\x3e\\n    <div class=\\"card-body p-1\\">\\n    \x3c!--  <h5 class=\\"card-title\\">", "</h5>\\n    <p class=\\"card-text\\"> ", " With supporting text below as a natural lead-in to additional content.</p>--\x3e\\n    <button class=\\"btn btn-outline-info btn-sm\\" webId=\\"", "\\"\\n    @click=\\"", "\\">", "</button>\\n    </div>\\n    </div>\\n    "]);\n\n  friend_view_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction friend_view_templateObject() {\n  const data = friend_view_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div class=\\"card\\" style=\\"width: 18rem;\\">\\n    <img class=\\"card-img-top\\" src=\\"...\\" alt=\\"Card image cap\\">\\n    <div class=\\"card-body\\">\\n    <h5 class=\\"card-title\\">Card title</h5>\\n    <p class=\\"card-text\\">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\\n    <p class=\\"card-text\\"><small class=\\"text-muted\\">Last updated 3 mins ago</small></p>\\n    </div>\\n    </div>\\n    "]);\n\n  friend_view_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction friend_view_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass friend_view_FriendView extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      f_webId: {\n        type: String\n      },\n      friend: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Friend";\n    this.f_webId = "";\n    this.friend = {\n      webId: "",\n      name: "",\n      photo: ""\n    };\n  }\n\n  render1() {\n    return lit_html_html(friend_view_templateObject());\n  }\n\n  render() {\n    return lit_html_html(friend_view_templateObject2(), this.friend.photo.length > 0 ? lit_html_html(friend_view_templateObject3(), this.friend.photo, this.friend.photo) : lit_html_html(friend_view_templateObject4(), this.friend.name), this.friend.photo, this.friend.name, this.friend.name, this.friend.webId, this.friend.webId, this.showProfile, this.friend.name);\n  }\n  /* test photo\r\n  ${this.f_photo.length > 0 ?\r\n  html`<img class="rounded-circle user_img_msg" src="//images.weserv.nl/?url=${this.f_photo}&w=144&h=144" title="${this.f_photo}" alt="no image">`\r\n  :html`<i class="fas fa-user-circle fa-2x" title="${this.f_name}"></i>`\r\n  }\r\n  */\n\n\n  showProfile() {\n    //  let webId = e.target.getAttribute("webId")\n    console.log("CLICKED friend", this.friend);\n    this.agent.send("App", {\n      action: "showPanel",\n      panel: "Profile"\n    });\n    this.agent.send("Profile", {\n      action: "profileChanged",\n      profile: this.friend\n    });\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name); //console.log(this.agent)\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    this.friend.webId = this.f_webId;\n    this.init();\n  }\n\n  async init() {\n    let name = (await solid.data["".concat(this.f_webId)].vcard$fn) || "".concat(this.f_webId).split("/")[2].split(\'.\')[0];\n    let photo = (await solid.data["".concat(this.f_webId)].vcard$hasPhoto) || "https://solid.github.io/solid-ui/src/icons/noun_15059.svg";\n    this.friend.name = "".concat(name);\n    this.friend.photo = "".concat(photo) != "undefined" ? "".concat(photo) : "https://solid.github.io/solid-ui/src/icons/noun_15059.svg"; //  console.log("friend", this.friend, this.f_webId)\n\n    this.requestUpdate();\n  }\n\n}\n\ncustomElements.define(\'friend-view\', friend_view_FriendView);\n// CONCATENATED MODULE: ./src/views/log-element.js\n\n\nfunction log_element_templateObject() {\n  const data = log_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <style>\\n    /* The snackbar - position it at the bottom and in the middle of the screen */\\n    #snackbar {\\n      visibility: hidden; /* Hidden by default. Visible on click */\\n      min-width: 250px; /* Set a default minimum width */\\n      margin-left: -125px; /* Divide value of min-width by 2 */\\n      background-color: #333; /* Black background color */\\n      color: #fff; /* White text color */\\n      text-align: center; /* Centered text */\\n      border-radius: 2px; /* Rounded borders */\\n      padding: 16px; /* Padding */\\n      position: fixed; /* Sit on top of the screen */\\n      z-index: 1; /* Add a z-index if needed */\\n      left: 50%; /* Center the snackbar */\\n      bottom: 30px; /* 30px from the bottom */\\n    }\\n\\n    /* Show the snackbar when clicking on a button (class added with JavaScript) */\\n    #snackbar.show {\\n      visibility: visible; /* Show the snackbar */\\n      /* Add animation: Take 0.5 seconds to fade in and out the snackbar.\\n      However, delay the fade out process for 2.5 seconds */\\n      -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;\\n      animation: fadein 0.5s, fadeout 0.5s 2.5s;\\n    }\\n\\n    /* Animations to fade the snackbar in and out */\\n    @-webkit-keyframes fadein {\\n      from {bottom: 0; opacity: 0;}\\n      to {bottom: 30px; opacity: 1;}\\n    }\\n\\n    @keyframes fadein {\\n      from {bottom: 0; opacity: 0;}\\n      to {bottom: 30px; opacity: 1;}\\n    }\\n\\n    @-webkit-keyframes fadeout {\\n      from {bottom: 30px; opacity: 1;}\\n      to {bottom: 0; opacity: 0;}\\n    }\\n\\n    @keyframes fadeout {\\n      from {bottom: 30px; opacity: 1;}\\n      to {bottom: 0; opacity: 0;}\\n    }\\n    </style>\\n    \x3c!--  <style>\\n    .myAlert-top{\\n    position: fixed;\\n    top: 5px;\\n    left:2%;\\n    width: 96%;\\n  }\\n\\n  .myAlert-bottom{\\n  position: fixed;\\n  bottom: 5px;\\n  left:2%;\\n  width: 96%;\\n}\\n\\ndiv.fullscreen {\\nposition: absolute;\\nwidth:100%;\\nheight:960px;\\ntop: 0;\\nleft: 0;\\nbackground-color: lightblue;\\n}\\n\\n.alert{\\ndisplay: none;\\n}\\n</style>\\n--\x3e\\n\\n<div class=\\"container-fluid\\">\\nHello <b>", "</b> from app-element\\n\\n\x3c!-- Use a button to open the snackbar --\x3e\\n<button @click=\\"", "\\">Show Snackbar</button>\\n\\n\x3c!-- The actual snackbar --\x3e\\n\x3c!--<div id=\\"snackbar\\">Some text some message..</div>--\x3e\\n\\n\\n\\n\\n<div class=\\"toast\\" id=\\"snackbar\\" role=\\"alert\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n<div class=\\"toast-header\\">\\n<img src=\\"...\\" class=\\"rounded mr-2\\" alt=\\"...\\">\\n<strong class=\\"mr-auto\\">Bootstrap</strong>\\n<small>11 mins ago</small>\\n<button type=\\"button\\" class=\\"ml-2 mb-1 close\\" data-dismiss=\\"toast\\" aria-label=\\"Close\\">\\n<span aria-hidden=\\"true\\">&times;</span>\\n</button>\\n</div>\\n<div class=\\"toast-body\\">\\nHello, world! This is a toast message. Hello, world! This is a toast message. Hello, world! This is a toast message. Hello, world! This is a toast message.\\n</div>\\n</div>\\n\\n\x3c!--<div class=\\"fullscreen\\">\\n<div class=\\"col-sm-6\\">\\n<button class=\\"form-control\\" @click=\\"", "\\">show alert top</button>\\n</div>\\n<div class=\\"col-sm-6\\">\\n<button class=\\"form-control\\" @click=\\"", "\\">show alert bottom</button>\\n</div>\\n</div>\\n<div id=\\"top\\" class=\\"myAlert-top alert alert-success\\">\\n<a href=\\"#\\" class=\\"close\\" data-dismiss=\\"alert\\" aria-label=\\"close\\">&times;</a>\\n<strong>Success!</strong> Indicates a successful or positive action.\\n</div>\\n<div id=\\"bottom\\" class=\\"myAlert-bottom alert alert-danger\\">\\n<a href=\\"#\\" class=\\"close\\" data-dismiss=\\"alert\\" aria-label=\\"close\\">&times;</a>\\n<strong>Danger!</strong> This alert box could indicate a dangerous or potentially negative action.\\n</div>--\x3e\\n\x3c!--\\n<paper-toast text=\\"Hello Take your <a href=\'#t\'>POD</a> and look at help!\\" opened> Boo</paper-toast>--\x3e\\n</div>\\n"]);\n\n  log_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction log_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass log_element_LogElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Log";\n  }\n\n  render() {\n    return lit_html_html(log_element_templateObject(), this.name, this.myFunction, this.myAlertTop, this.myAlertBottom);\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  myFunction() {\n    // Get the snackbar DIV\n    var x = this.shadowRoot.getElementById("snackbar");\n    console.log("X", x); // Add the "show" class to DIV\n\n    x.className = "show"; // After 3 seconds, remove the show class from DIV\n\n    setTimeout(function () {\n      x.className = x.className.replace("show", "");\n    }, 3000);\n  }\n\n}\n\ncustomElements.define(\'log-element\', log_element_LogElement);\n// CONCATENATED MODULE: ./src/views/profile-element.js\n\n\n\n\n\nfunction profile_element_templateObject4() {\n  const data = profile_element_taggedTemplateLiteral(["\\n      <li class=\\"list-group-item\\">\\n      ", "\\n      </li>\\n      "]);\n\n  profile_element_templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction profile_element_templateObject3() {\n  const data = profile_element_taggedTemplateLiteral(["<button class=\\"btn btn-outline-info btn-sm\\" @click=\\"", "\\"><i class=\\"fas fa-user-minus\\"></i>UnFollow</button>"]);\n\n  profile_element_templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction profile_element_templateObject2() {\n  const data = profile_element_taggedTemplateLiteral(["<button class=\\"btn btn-outline-info btn-sm\\" @click=\\"", "\\"><i class=\\"fas fa-user-plus\\"></i>Follow</button>"]);\n\n  profile_element_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction profile_element_templateObject() {\n  const data = profile_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <style>\\n    .close {\\n      color: \\"#aaaaaa\\";\\n      float: right;\\n      font-size: 28px;\\n      font-weight: bold;\\n    }\\n\\n    .close:hover,\\n    .close:focus {\\n      color: \\"#000\\";\\n      text-decoration: none;\\n      cursor: pointer;\\n    }\\n    </style>\\n    <div class=\\"row\\">\\n    <div class=\\"col\\">\\n    <div class=\\"card\\" style=\\"width: 18rem;\\">\\n    <i @click=\\"", "\\" class=\\"close fas fa-window-close\\"></i>\\n\\n    <img class=\\"card-img-top\\" src=\\"", "\\" alt=\\"Card image cap\\">\\n    <div class=\\"card-body\\">\\n    <h5 class=\\"card-title\\"><b>", "</b></h5>\\n\\n    <p class=\\"card-text\\">\\n\\n    User  webId :<b>", "</b><br>\\n    Storage : <a\\n    href=\\"https://scenaristeur.github.io/spoggy-simple/?source=", "\\"\\n    target=\\"_blank\\" >", "</a><br>\\n    \x3c!--stringVariable.substring(0, stringVariable.lastIndexOf(\'#\'));--\x3e\\n    Role: ", "<br>\\n    Organisation: ", "<br>\\n    <br>\\n    <br>  Your WebId : ", "<br>\\n    </p>\\n\\n    <div ?hidden=\\"", "\\">\\n    <button class=\\"brn btn-outline-primary btn-sm\\" @click=\\"", "\\">Edit My Profile (WIP)</button>\\n    <button class=\\"brn btn-outline-primary btn-sm\\" @click=\\"", "\\">Configuration</button>\\n\\n    </div>\\n\\n\\n    </div>\\n    </div>\\n    </div>\\n\\n    <div class=\\"col\\">\\n    <div class=\\"card\\" style=\\"width: 18rem;\\">\\n    <ul class=\\"list-group list-group-flush\\">\\n    <li class=\\"list-group-item\\">", " friends</li>\\n    <li class=\\"list-group-item\\">", " followers\\n\\n    <div ?hidden=\\"", "\\">\\n    dontFollowYet :\\n    ", " <br>\\n    </div>\\n\\n\\n\\n\\n\\n\\n    <ul class=\\"list-group list-group-flush\\">\\n    ", "\\n    </ul>\\n\\n\\n    </li>\\n\\n    <li class=\\"list-group-item\\">", " following</li>\\n    </ul>\\n    </div>\\n\\n\\n    </div>\\n\\n    "]);\n\n  profile_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction profile_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction profile_element_asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }\n\n\n\n\n\nclass profile_element_ProfileElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      config: {\n        type: Object\n      },\n      // config : current loged user\n      p_config: {\n        type: Object\n      },\n      // p_config : the user that the profile-element shows\n      friends: {\n        type: Array\n      },\n      followers: {\n        type: Array\n      },\n      following: {\n        type: Array\n      },\n      dontFollowYet: {\n        type: Boolean\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Profile";\n    this.config = {};\n    this.p_config = {\n      storage: "Loading..."\n    };\n    this.friends = [];\n    this.followers = [];\n    this.following = [];\n    this.fileClient = new SolidFileClient(solid.auth);\n    this.dontFollowYet = true;\n  }\n\n  render() {\n    return lit_html_html(profile_element_templateObject(), this.close, this.p_config.photo, this.p_config.name, this.p_config.webId, this.p_config.storage, this.p_config.storage, this.p_config.role, this.p_config.organization, this.config.webId, this.config.webId != this.p_config.webId, this.edit, this.showConfig, this.friends.length, this.followers.length, this.config.webId == this.p_config.webId, this.dontFollowYet == true ? lit_html_html(profile_element_templateObject2(), this.follow) : lit_html_html(profile_element_templateObject3(), this.unfollow), this.followers.map((f, i) => lit_html_html(profile_element_templateObject4(), f)), this.following.length);\n  }\n  /*\r\n  \x3c!--  <div class="row">\r\n  <div class="col">\r\n  ${this.p_config.friends.lengh} Friends\r\n  </div>\r\n  <div class="col">\r\n  ${this.p_config.followers.lengh} Followers\r\n  </div>\r\n  <div class="col">\r\n  ${this.p_config.following.lengh} Following\r\n  </div>\r\n  </div>--\x3e\r\n  */\n\n\n  showConfig() {\n    this.agent.send("App", {\n      action: "showPanel",\n      panel: "Config"\n    });\n    this.agent.send("Config", {\n      action: "newConfig",\n      config: this.config\n    });\n  }\n\n  edit() {\n    alert("// TODO: come back later ;-) ");\n  }\n\n  close() {\n    this.agent.send("App", {\n      action: "showPanel"\n    });\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "profileChanged":\n            app.profileChanged(message.profile);\n            break;\n\n          case "configChanged":\n            app.configChanged(message.config);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  init() {\n    console.log("TODO check if user webId follow this profile");\n  }\n\n  configChanged(config) {\n    this.config = config;\n  }\n\n  async unfollow() {\n    //  alert("todo")\n    console.log("CONFIG", this.config);\n    console.log("P_CONFIG", this.p_config);\n    /*  let profile_followers = this.p_config.followers_folder+\'index.ttl#this\'\r\n    console.log(profile_followers)*/\n\n    let user_following = this.config.following_folder + \'index.ttl\';\n    let user_following_this = user_following + "#this";\n    let p_webid = this.p_config.webId;\n    let w_node = Object(data_model["namedNode"])(p_webid);\n    console.log(user_following);\n    console.log(p_webid, w_node);\n    await solid.data[user_following_this].as$items.delete(Object(data_model["namedNode"])(p_webid));\n    /*  try{\r\n    await solid.data.from(user_following)[user_following_this]["https://www.w3.org/ns/activitystreams#items"].delete(w_node)\r\n    // await solid.data[user_following].as$items.namedNode().delete()\r\n    // await solid.data.from("https://spoggy-test2.solid.community/public/agora/following/index.ttl")[https://spoggy-test2.solid.community/public/agora/following/index.ttl#this].as$items.delete()\r\n    }catch(e){\r\n    console.log(e)\r\n    }*/\n    //  console.log("!!! Must first set authenticated agent to publisher in config")\n    //  await solid.data[profile_followers].as$items.add(namedNode(this.config.webId))\n\n    console.log(this.config.webId.split("/")[2]);\n    let followFile = this.p_config.followers_folder + this.config.webId.split("/")[2] + ".ttl";\n\n    try {\n      await this.fileClient.deleteFile(followFile);\n      console.log("".concat(followFile));\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  async follow() {\n    // Must create a follow Activity with accept ?\n    //  alert("// TODO: come back later ;-) ")\n    console.log("CONFIG", this.config);\n    console.log("P_CONFIG", this.p_config);\n    /*  let profile_followers = this.p_config.followers_folder+\'index.ttl#this\'\r\n    console.log(profile_followers)*/\n\n    let user_following = this.config.following_folder + \'index.ttl#this\';\n    console.log(user_following);\n    await solid.data[user_following].as$items.add(Object(data_model["namedNode"])(this.p_config.webId)); //  console.log("!!! Must first set authenticated agent to publisher in config")\n    //  await solid.data[profile_followers].as$items.add(namedNode(this.config.webId))\n\n    console.log(this.config.webId.split("/")[2]);\n    let followFile = this.p_config.followers_folder + this.config.webId.split("/")[2] + ".ttl";\n\n    try {\n      await this.fileClient.createFile(followFile, "", "text/turtle");\n      console.log("".concat(followFile));\n    } catch (e) {\n      alert(e);\n    }\n    /*\r\n    let aclString = `\r\n    @prefix : <#>.\r\n    @prefix acl: <http://www.w3.org/ns/auth/acl#>.\r\n    @prefix c: </profile/card#>.\r\n      :ControlReadWrite\r\n    a acl:Authorization;\r\n    acl:accessTo <${o.file}>;\r\n    acl:agent c:me;\r\n    acl:mode acl:Control, acl:Read, acl:Write.\r\n    :Read\r\n    a acl:Authorization;\r\n    acl:accessTo <${o.file}>;\r\n    ${aclStringWebIds.length > 0 ?   ` acl:agent ${aclStringWebIds};`  : "" }\r\n    ${agora_pub == true ?   "acl:agentClass <http://xmlns.com/foaf/0.1/Agent> ;" : ""}\r\n    acl:mode acl:Read.`\r\n    */\n\n    /*\r\n      let aclString = `\r\n      @prefix : <#>.\r\n      @prefix acl: <http://www.w3.org/ns/auth/acl#>.\r\n      @prefix c: </profile/card#>.\r\n    \r\n      :ControlReadWrite\r\n      a acl:Authorization;\r\n      acl:accessTo <${followFile}>;\r\n      acl:agent c:me, <${this.config.webId}>;\r\n      acl:mode n0:Control, acl:Read, acl:Write.\r\n      :ReadWrite\r\n      a acl:Authorization;\r\n      acl:accessTo <${followFile}>;\r\n      acl:mode acl:Read, acl:Write.`\r\n    \r\n        console.log(aclString)\r\n      try{\r\n        await this.fileClient.createFile (followFile+\'.acl\', aclString, "text/turtle")\r\n        console.log(followFile+\'.acl Created\')\r\n      }catch(e){\r\n        alert(e)\r\n      }*/\n\n  }\n\n  async profileChanged(profile) {\n    console.log("USER", profile);\n    this.p_config = profile;\n    this.p_config.pti = await solid.data[this.p_config.webId].publicTypeIndex;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = profile_element_asyncIterator(solid.data[this.p_config.pti].subjects), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const subject = _value;\n        if (this.p_config.pti != "".concat(subject))\n          /*let s = `${subject}`\r\n          console.log(s)*/\n          if ("".concat(subject).endsWith(\'#Agora\')) {\n            let instance = await solid.data["".concat(subject)].solid$instance;\n            this.p_config.instance = "".concat(instance);\n            let inbox = await solid.data[this.p_config.instance].as$inbox;\n            this.p_config.inbox = "".concat(inbox);\n            let outbox = await solid.data[this.p_config.instance].as$outbox;\n            this.p_config.outbox = "".concat(outbox);\n            let followers_folder = await solid.data[this.p_config.instance].as$followers;\n            this.p_config.followers_folder = "".concat(followers_folder);\n            let following_folder = await solid.data[this.p_config.instance].as$following;\n            this.p_config.following_folder = "".concat(following_folder);\n            let liked = await solid.data[this.p_config.instance].as$liked;\n            this.p_config.liked = "".concat(liked);\n            let disliked = await solid.data[this.p_config.instance].as$disliked;\n            this.p_config.disliked = "".concat(disliked);\n          }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    let storage = await solid.data[this.p_config.webId].storage;\n    this.p_config.storage = "".concat(storage);\n    this.p_config.organization = await solid.data[this.p_config.webId]["http://www.w3.org/2006/vcard/ns#organization-name"];\n    this.p_config.role = await solid.data[this.p_config.webId]["http://www.w3.org/2006/vcard/ns#role"];\n    /*  this.friends = this.p_config.friends || []\r\n    this.followers = this.p_config.followers || []\r\n    this.following = this.p_config.following || []*/\n\n    this.friends = [];\n    this.followers = [];\n    this.following = [];\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n\n    var _iteratorError2;\n\n    try {\n      for (var _iterator2 = profile_element_asyncIterator(solid.data[this.p_config.webId].friends), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n        const friend = _value2;\n        let f = "".concat(friend);\n        this.friends = [...this.friends, f];\n      } //  this.p_config.followers_uri = this.p_config.followers_folder+"index.ttl#this"\n\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          await _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n\n    var _iteratorError3;\n\n    try {\n      for (var _iterator3 = profile_element_asyncIterator(solid.data[this.p_config.followers_folder].ldp$contains), _step3, _value3; _step3 = await _iterator3.next(), _iteratorNormalCompletion3 = _step3.done, _value3 = await _step3.value, !_iteratorNormalCompletion3; _iteratorNormalCompletion3 = true) {\n        const f_er = _value3;\n        let fer = "".concat(f_er);\n        fer = fer.replace(this.p_config.followers_folder, "https://");\n        fer = fer.replace(".ttl", "/profile/card#me");\n        this.followers = [...this.followers, fer];\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          await _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    this.dontFollowYet = !this.followers.includes(this.config.webId);\n    console.log("dontFollowYet", this.dontFollowYet);\n    this.p_config.following_uri = this.p_config.following_folder + "index.ttl#this";\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n\n    var _iteratorError4;\n\n    try {\n      for (var _iterator4 = profile_element_asyncIterator(solid.data[this.p_config.following_uri].as$items), _step4, _value4; _step4 = await _iterator4.next(), _iteratorNormalCompletion4 = _step4.done, _value4 = await _step4.value, !_iteratorNormalCompletion4; _iteratorNormalCompletion4 = true) {\n        const f_ing = _value4;\n        let fing = "".concat(f_ing);\n        this.following = [...this.following, fing];\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          await _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n\n    console.log("P_PROFILE", this.p_config);\n    this.requestUpdate();\n  }\n\n}\n\ncustomElements.define(\'profile-element\', profile_element_ProfileElement);\n// CONCATENATED MODULE: ./src/views/websocket-element.js\n\n\nfunction websocket_element_templateObject() {\n  const data = websocket_element_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    url : ", "<br>\\n    \x3c!--  config : ", "</br>--\x3e\\n    </div>\\n\\n    <div class=\\"container-fluid\\">\\n\\n    </div>\\n    "]);\n\n  websocket_element_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction websocket_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nclass websocket_element_WebsocketElement extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      url: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Websocket";\n    this.url = "";\n    this.debug = false;\n  }\n\n  render() {\n    return lit_html_html(websocket_element_templateObject(), !this.debug, this.name, this.url, JSON.stringify(this.config));\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "urlChanged":\n            app.urlChanged(message.url);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  urlChanged(url) {\n    console.log(url);\n    this.url = url;\n    this.subscribe();\n  }\n\n  async subscribe() {\n    var app = this;\n    const d = new Date();\n    let month = ("0" + (d.getUTCMonth() + 1)).slice(-2); //months from 1-12\n\n    let day = ("0" + d.getUTCDate()).slice(-2);\n    let year = d.getUTCFullYear();\n    console.log("websocket_url", this.url); //this.path = this.inbox+[year, month, day, "index.ttl#this"].join("/")\n\n    var websocket = "wss://" + this.url.split(\'/\')[2];\n    var url = this.url + [year, month, day, "index.ttl"].join(\'/\');\n    app.socket = new WebSocket(websocket);\n\n    app.socket.onopen = function () {\n      //      var now = d.toLocaleTimeString(app.lang)\n      this.send(\'sub \' + url);\n      console.log("subscribe to ", websocket, url); //  app.agent.send(\'Messages\',  {action:"info", info: now+"[souscription] "+url});\n    };\n\n    app.socket.onmessage = function (msg) {\n      console.log(msg);\n\n      if (msg.data && msg.data.slice(0, 3) === \'pub\') {\n        //  app.notification("nouveau message Socialid")\n        //app.openLongChat()\n        console.log(msg.data);\n        app.agent.send("Flux", {\n          action: "websocketMessage",\n          url: url\n        });\n      }\n    };\n  }\n\n}\n\ncustomElements.define(\'websocket-element\', websocket_element_WebsocketElement);\n// CONCATENATED MODULE: ./src/views/groups-view.js\n\n\n\nfunction groups_view_templateObject2() {\n  const data = groups_view_taggedTemplateLiteral(["\\n      <group-view name=\\"", "\\" uri=", ">Loading Group</group-view>\\n      "]);\n\n  groups_view_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction groups_view_templateObject() {\n  const data = groups_view_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    debug : ", "<br>\\n    \x3c!--config : ", "<br>--\x3e\\n    groupindex : ", "<br>\\n    </div>\\n\\n    <div class=\\"container\\">\\n\\n\\n    <div class=\\"input-group ml-3 mb-3\\">\\n    <div class=\\"row\\">\\n    <input type=\\"text\\" id=\\"groupName\\" class=\\"form-control\\"\\n    placeholder=\\"Group\'s name\\"\\n    aria-label=\\"Group\'s name\\" aria-describedby=\\"basic-addon2\\">\\n    <input type=\\"text\\" id=\\"groupRole\\" class=\\"form-control\\"\\n    placeholder=\\"Purpose, Role of the group\\"\\n    aria-label=\\"Purpose, Role of the group\\" aria-describedby=\\"basic-addon3\\">\\n    <div class=\\"input-group-append\\">\\n\\n    <button class=\\"btn btn-outline-secondary\\" type=\\"button\\" @click=", ">Add Group</button>\\n    </div>\\n    </div>\\n    </div>\\n\\n    Group length : ", "\\n\\n    <div class=\\"card-deck\\">\\n    ", "\\n    </div>\\n\\n\\n\\n    </div>\\n    "]);\n\n  groups_view_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction groups_view_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction groups_view_asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }\n\n\n\n\n\n\nclass groups_view_GroupsView extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      config: {\n        type: Object\n      },\n      groups: {\n        type: Array\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Groups View";\n    this.debug = false;\n    this.config = {};\n    this.groups = [];\n  }\n\n  render() {\n    return lit_html_html(groups_view_templateObject(), !this.debug, this.name, this.debug, JSON.stringify(this.config), this.config.group_index, this.addGroup, this.groups.length, this.groups.map((g, i) => lit_html_html(groups_view_templateObject2(), "Group_" + i, g)));\n  }\n\n  async addGroup() {\n    let g_name = this.shadowRoot.getElementById("groupName").value.trim(); //.replace(/[^a-zA-Z0-9]/g,\'_\');\n\n    let g_id = esm_browser_v4();\n    let g_role = this.shadowRoot.getElementById("groupRole").value.trim();\n    let g_uri = this.config.group_folder + g_id + ".ttl";\n    console.log(this.config.group_index, g_uri);\n    await solid.data[this.config.group_index].as$item.add(Object(data_model["namedNode"])(g_uri));\n    await solid.data[g_uri].rdf$type.add(Object(data_model["namedNode"])("http://www.w3.org/2006/vcard/ns#Group"));\n    await solid.data[g_uri].vcard$title.add(g_name);\n    await solid.data[g_uri].vcard$role.add(g_role);\n    await solid.data[g_uri].vcard$hasUID.add(g_id);\n    await solid.data[g_uri].vcard$hasMember.add(Object(data_model["namedNode"])(this.config.webId));\n    await solid.data[g_uri].vcard$hasMember.add(Object(data_model["namedNode"])("https://spoggy-test3.solid.community/profile/card#me"));\n    await solid.data[g_uri].vcard$hasMember.add(Object(data_model["namedNode"])("https://spoggy-test9.solid.community/profile/card#me"));\n    this.shadowRoot.getElementById("groupName").value = "";\n    this.shadowRoot.getElementById("groupRole").value = "";\n    await this.updateGroups();\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "configChanged":\n            app.configChanged(message.config);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n  }\n\n  async configChanged(config) {\n    this.config = config;\n    this.config.group_index = this.config.storage + "public/agora/groups.ttl#this";\n    this.config.group_folder = this.config.storage + "public/agora/groups/";\n    console.log("GROUP CONFIG", this.config); // this.requestUpdate()\n\n    await this.updateGroups();\n  }\n\n  async updateGroups() {\n    let groups = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = groups_view_asyncIterator(solid.data[this.config.group_index].as$item), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const group = _value;\n        let g = "".concat(group);\n        groups = [...groups, g];\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    this.groups = [];\n    this.groups = groups;\n    console.log("GROUPS", this.groups);\n    this.requestUpdate();\n  }\n\n}\n\ncustomElements.define(\'groups-view\', groups_view_GroupsView);\n// CONCATENATED MODULE: ./src/views/group-view.js\n\n\n\nfunction group_view_templateObject() {\n  const data = group_view_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    debug : ", "<br>\\n    uri: ", "<br>\\n    group: ", "<br>\\n    \x3c!--  config : ", "<br> --\x3e\\n    </div>\\n\\n\\n\\n\\n    <div class=\\"card\\" style=\\"width: 18rem;\\">\\n  \x3c!--  <img class=\\"card-img-top\\" src=\\"...\\" alt=\\"Card image cap\\">--\x3e\\n    <div class=\\"card-body\\">\\n    <h5 class=\\"card-title\\"><a href=\\"", "\\" target=\\"_blank\\">", "</a></h5>\\n    <p class=\\"card-text\\">", "</p>\\n    <p class=\\"card-text\\"><small class=\\"text-muted\\">", " members</small></p>\\n    </div>\\n    </div>\\n\\n\\n    "]);\n\n  group_view_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction group_view_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction group_view_asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }\n\n\n\n\nclass group_view_GroupView extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      uri: {\n        type: String\n      },\n      group: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Group";\n    this.debug = false, this.uri = "";\n    this.group = {\n      members: []\n    };\n  }\n\n  render() {\n    return lit_html_html(group_view_templateObject(), !this.debug, this.name, this.debug, this.uri, JSON.stringify(this.group), JSON.stringify(this.config), this.group.uri, this.group.name, this.group.role, this.group.members.length);\n  }\n  /*\r\n  \x3c!--  ${this.group.members.map((m, i) => html`\r\n      <friend-view name="${"Member_"+i}" f_webId=${m}>Loading Member</friend-view>\r\n      `\r\n    )}--\x3e\r\n    */\n\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name); //  console.log(this.agent)\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "webIdChanged":\n            app.webIdChanged(message.webId);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    this.init();\n  }\n\n  async init() {\n    this.group.uri = this.uri;\n    let name = await solid.data[this.uri].vcard$title;\n    let role = await solid.data[this.uri].vcard$role;\n    this.group.name = "".concat(name);\n    this.group.role = "".concat(role); //  console.log(this.group)\n\n    await this.updateMembers();\n  }\n\n  async updateMembers() {\n    let members = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = group_view_asyncIterator(solid.data[this.uri].vcard$hasMember), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const member = _value;\n        let m = "".concat(member);\n        members = [...members, m];\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    this.group.members = [];\n    this.group.members = members; //    console.log("GROUP Members",this.group)\n\n    this.requestUpdate();\n  }\n\n}\n\ncustomElements.define(\'group-view\', group_view_GroupView);\n// CONCATENATED MODULE: ./src/views/inbox-view.js\n\n\n\n\nfunction inbox_view_templateObject2() {\n  const data = inbox_view_taggedTemplateLiteral(["\\n      <li class=\\"list-group-item\\">\\n      <message-view name=\\"", "\\" uri=", ">Loading Message</message-view>\\n      </li>\\n      "]);\n\n  inbox_view_templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction inbox_view_templateObject() {\n  const data = inbox_view_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n    <style>\\n    .item {\\n      background: #FFF;\\n      border: 1px solid #666;\\n      /*  height: 100px;*/\\n      display: flex;\\n      align-items: center;\\n      /*  justify-content: center;*/\\n    }\\n\\n    #sentinel {\\n      width: auto;\\n      height: 30px;\\n      background-color: red\\n    }\\n\\n    #scroller {\\n      height: 200px; /*550px;*/\\n      overflow-y: scroll;\\n    }\\n    </style>\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    debug : ", "<br>\\n    config : ", "<br>\\n    </div>\\n\\n    <div class=\\"container-fluid\\">\\n    Messages length : ", "\\n    <div class=\\"col-12\\" id=\\"scroller\\">\\n    <div id=\\"sentinel\\">Loading messages...</div>\\n    </div>\\n    <ul class=\\"list-group\\">\\n    ", "\\n    </ul>\\n\\n    </div>\\n\\n    "]);\n\n  inbox_view_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction inbox_view_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction inbox_view_asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }\n\n\n\n\n\nclass inbox_view_InboxView extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      config: {\n        type: Object\n      },\n      messages: {\n        type: Array\n      },\n      loop: {\n        type: Object\n      },\n      start: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Inbox";\n    this.debug = false;\n    this.config = {};\n    this.messages = [];\n    this.loop = new Date();\n    this.start = new Date("04/15/2020");\n    this.fc = new solid_file_client_bundle(solid.auth);\n  }\n\n  render() {\n    return lit_html_html(inbox_view_templateObject(), !this.debug, this.name, this.debug, JSON.stringify(this.config), this.messages.length, this.messages.map((m, i) => lit_html_html(inbox_view_templateObject2(), "Message_" + i, m)));\n  }\n\n  async configChanged(config) {\n    this.config = config;\n    console.log("INBOX CONFIG", this.config);\n    console.log(this.config.inbox);\n    let month = ("0" + (this.loop.getUTCMonth() + 1)).slice(-2); //months from 1-12\n\n    let day = ("0" + this.loop.getUTCDate()).slice(-2);\n    let year = this.loop.getUTCFullYear();\n    this.path = this.config.inbox + [year, month, day, "index.ttl#this"].join("/");\n\n    if (!(await this.fc.itemExists(this.path)) && this.loop > this.start) {\n      await this.changeDate();\n    }\n\n    console.log(this.path);\n    await this.subscribe();\n    console.log("SUBSCRIBED"); //  await this.todayMessages()\n    //  console.log("TO DAY MESSAGES OK")\n\n    await this.initObserver();\n    console.log("INITOBSERVER OK");\n  }\n\n  async todayMessages() {\n    let newMessages = 0;\n    let messages = this.messages;\n    await solid.data.clearCache();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n\n    var _iteratorError;\n\n    try {\n      for (var _iterator = inbox_view_asyncIterator(solid.data[this.path].as$item), _step, _value; _step = await _iterator.next(), _iteratorNormalCompletion = _step.done, _value = await _step.value, !_iteratorNormalCompletion; _iteratorNormalCompletion = true) {\n        const message = _value;\n        let m = "".concat(message); //  console.log(m)\n\n        if (!messages.includes(m)) {\n          messages = [...messages, m];\n          await this.scroller.appendChild(this.sentinel);\n          this.addItem(this.messages.length + " " + m);\n        } else {\n          console.log(m, "existe déjà");\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    newMessages = messages.length - this.messages.length;\n    this.messages = [];\n    this.messages = messages;\n    console.log("Messages All, new", this.messages, newMessages);\n    return newMessages;\n  }\n\n  async loadItems(c) {\n    console.log("LOAD", c, this.messages.length, this.path);\n    let loadedMessages = 0; //  this.todayMessages()\n\n    for (let i = 0; i < c; i++) {\n      //  this.addItem(i)\n      console.log("AVANT", c, this.messages.length, this.path);\n      let newMessages = await this.todayMessages();\n      console.log(newMessages);\n      loadedMessages += newMessages;\n      console.log("APRES", c, "LOADED", loadedMessages, this.messages.length, this.path);\n      await this.changeDate();\n    }\n  }\n\n  async changeDate() {\n    var newDate = this.loop.setDate(this.loop.getDate() - 1);\n    this.loop = new Date(newDate);\n    let month = ("0" + (this.loop.getUTCMonth() + 1)).slice(-2); //months from 1-12\n\n    let day = ("0" + this.loop.getUTCDate()).slice(-2);\n    let year = this.loop.getUTCFullYear();\n    this.path = this.config.inbox + [year, month, day, "index.ttl#this"].join("/");\n\n    if (!(await this.fc.itemExists(this.path)) && this.loop > this.start) {\n      console.log("TEST", this.path);\n      await this.changeDate();\n    }\n  }\n\n  addItem(i) {\n    //console.log("add ",i)\n\n    /*var newItem = document.createElement(\'div\');\r\n    newItem.classList.add(\'item\');\r\n    newItem.textContent = i+\' Item \' + this.counter++;\r\n    this.scroller.appendChild(newItem);*/\n    //  var newItem1 = document.createElement(\'notification-line-element\');\n    var newItem1 = document.createElement(\'div\');\n    newItem1.classList.add(\'item\');\n    newItem1.textContent = i + \' Item \' + this.counter++;\n    newItem1.setAttribute("url", i); //  newItem1.setAttribute("name", "Notif_"+this.notifications.length)\n\n    this.scroller.appendChild(newItem1);\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name);\n    console.log(this.agent);\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "configChanged":\n            app.configChanged(message.config);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    this.scroller = this.shadowRoot.querySelector(\'#scroller\');\n    this.sentinel = this.shadowRoot.querySelector(\'#sentinel\');\n    this.counter = 1;\n    console.log(this.scroller, this.sentinel); //this.init()\n  }\n\n  async chargement() {\n    if (this.loop > this.start) {\n      this.sentinel.innerHTML = "Loading " + this.loop.toLocaleDateString();\n      await this.loadItems(5);\n      console.log("CHARGEMENT  TERMINE"); // appendChild will move the existing element, so there is no need to\n      // remove it first.\n      //await this.scroller.appendChild(this.sentinel);\n      //  console.log("AJOUT SENTINEL TERMINE")\n      //  await this.loadItems(5);\n      //  console.log("CHARGEMENT 5 TERMINE")\n    } else {\n      this.sentinel.innerHTML = "No older message";\n    }\n  }\n\n  initObserver() {\n    let app = this;\n    var intersectionObserver = new IntersectionObserver(entries => {\n      // If the browser is busy while scrolling happens, multiple entries can\n      // accumulate between invocations of this callback. As long as any one\n      // of the notifications reports the sentinel within the scrolling viewport,\n      // we add more content.\n      if (entries.some(entry => entry.intersectionRatio > 0)) {\n        app.chargement();\n        console.log("CHARGEMENT TERMINE"); //ChromeSamples.setStatus(\'Loaded up to item \' + counter);\n      }\n    });\n    intersectionObserver.observe(app.sentinel);\n  }\n\n  async subscribe() {\n    var app = this;\n    var websocket = "wss://" + this.path.split(\'/\')[2];\n    app.socket = new WebSocket(websocket);\n\n    app.socket.onopen = function () {\n      //      var now = d.toLocaleTimeString(app.lang)\n      this.send(\'sub \' + app.path);\n      console.log("subscribe to INBOX", websocket, app.path); //  app.agent.send(\'Messages\',  {action:"info", info: now+"[souscription] "+url});\n    };\n\n    app.socket.onmessage = function (msg) {\n      console.log(msg);\n\n      if (msg.data && msg.data.slice(0, 3) === \'pub\') {\n        //  app.notification("nouveau message Socialid")\n        //app.openLongChat()\n        console.log(msg.data);\n        app.todayMessages(); //  app.agent.send("Flux", {action: "websocketMessage", url : url})\n      }\n    };\n  }\n\n  async updateMessages1() {\n    console.log(this.config.inbox);\n    let messages = [];\n    this.messages = [];\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n\n    var _iteratorError2;\n\n    try {\n      for (var _iterator2 = inbox_view_asyncIterator(solid.data[this.config.inbox].ldp$contains), _step2, _value2; _step2 = await _iterator2.next(), _iteratorNormalCompletion2 = _step2.done, _value2 = await _step2.value, !_iteratorNormalCompletion2; _iteratorNormalCompletion2 = true) {\n        const message = _value2;\n        let m = "".concat(message);\n        messages = [...messages, m];\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          await _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    this.messages = messages;\n  }\n\n}\n\ncustomElements.define(\'inbox-view\', inbox_view_InboxView);\n// CONCATENATED MODULE: ./src/views/message-view.js\n\n\nfunction message_view_templateObject() {\n  const data = message_view_taggedTemplateLiteral(["\\n    <link href=\\"css/bootstrap/bootstrap.min.css\\" rel=\\"stylesheet\\">\\n    <link href=\\"css/fontawesome/css/all.css\\" rel=\\"stylesheet\\">\\n\\n    <div ?hidden = \\"", "\\">\\n    Hello from<b>", "</b><br>\\n    debug : ", "<br>\\n    message uri : ", "<br>\\n    </div>\\n\\n    <div class=\\"container-fluid\\">\\n    From: <a href=\\"", "\\" target=\\"_blank\\">", "</a><br>\\n    summary : ", "<br>\\n    published : ", "<br>\\n\\n    content: ", "<br>\\n    <small>\\n    <a href=\\"", "\\" target=\\"_blank\\">activity link</a><br>\\n    </small>\\n    \x3c!--  label : ", "<br>\\n    type : ", "<br>\\n    message uri : ", "<br>\\n    --\x3e\\n    </div>\\n    "]);\n\n  message_view_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction message_view_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\n\nclass message_view_MessageView extends lit_element_LitElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      debug: {\n        type: Boolean\n      },\n      //  config: {type: Object},\n      uri: {\n        type: String\n      },\n      attributedTo: {\n        type: String\n      },\n      label: {\n        type: String\n      },\n      summary: {\n        type: String\n      },\n      published: {\n        type: String\n      },\n      type: {\n        type: String\n      },\n      link: {\n        type: String\n      },\n      content: {\n        type: String\n      },\n      senderName: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = "Message";\n    this.debug = false; //  this.config = {}\n\n    this.uri = "";\n    this.attributedTo = "";\n    this.senderName = "";\n    this.label = "";\n    this.summary = "";\n    this.published = "";\n    this.type = "";\n    this.link = "";\n    this.content = "";\n  }\n\n  render() {\n    return lit_html_html(message_view_templateObject(), !this.debug, this.name, this.debug, this.uri, this.attributedTo, this.senderName, this.summary, this.published, this.content, this.link, this.label, this.type, this.uri);\n  }\n\n  firstUpdated() {\n    var app = this;\n    this.agent = new HelloAgent(this.name); //  console.log(this.agent)\n\n    this.agent.receive = function (from, message) {\n      //  console.log("messah",message)\n      if (message.hasOwnProperty("action")) {\n        //  console.log(message)\n        switch (message.action) {\n          case "configChanged":\n            app.configChanged(message.config);\n            break;\n\n          default:\n            console.log("Unknown action ", message);\n        }\n      }\n    };\n\n    this.init();\n  }\n\n  async init() {\n    //console.log(this.uri)\n    let at = await solid.data[this.uri].as$attributedTo;\n    this.attributedTo = "".concat(at);\n    let sn = (await solid.data["".concat(at)].vcard$fn) || "".concat(at).split("/")[2].split(\'.\')[0];\n    this.senderName = "".concat(sn);\n    let label = await solid.data[this.uri].rdfs$label;\n    this.label = "".concat(label);\n    let su = await solid.data[this.uri].as$summary;\n    this.summary = "".concat(su);\n    let pu = await solid.data[this.uri].as$published;\n    this.published = "".concat(pu);\n    let ty = await solid.data[this.uri].as$type;\n    this.type = "".concat(ty);\n    let li = await solid.data[this.uri].as$link;\n    this.link = "".concat(li);\n    let obj = await solid.data[this.link].as$object;\n    this.object = "".concat(obj);\n    let cont = await solid.data[this.object].as$content;\n    this.content = "".concat(cont); //log("BBOOO"+this.content)\n\n    let c = await conf("".concat(at)); //console.log(c)\n  }\n\n  configChanged(config) {\n    this.config = config;\n    console.log(this.config);\n  }\n\n}\n\ncustomElements.define(\'message-view\', message_view_MessageView);\n// CONCATENATED MODULE: ./src/index.js\n//GENERAL\n\n\n\n\n\n\n\n\n\n\n // SOLID\n\n // FLUX\n\n\n\n\n //CONFIG\n\n //POST\n\n\n\n\n\n\n\n\n //ORGANIZATION\n\n\n // LOG\n\n // PROFILE\n\n // Websocket\n\n // Groups\n\n\n // Inbox\n\n\n\n/*\r\nimport \'./views/compose-view.js\';\r\nimport \'./views/orga-view.js\';\r\nimport \'./views/flow-view.js\';\r\nimport \'./views/talk-view.js\';*/\n//import \'./views/config-view.js\';\n//import \'./css/fontawesome/css/all.css\';\n//import \'./views/store-element.js\'\n//import \'./views/friends-view.js\'\n//import \'./views/friend-view.js\'\n//import \'./views/info-element.js\';\n//\n//import \'./views/user-profile-view.js\'\n//import \'./views/config-set-view.js\'\n\n/*import \'./views/todo-view.js\';\r\nimport \'./views/stats-view.js\';\r\nimport \'./views/not-found-view.js\';\r\nimport \'./views/activity-element.js\'\r\nimport \'./views/object-element.js\'\r\nimport \'./views/notification-line-element.js\'\r\n//import \'./views/login-element.js\'\r\nimport \'./views/post-basic-element.js\'\r\nimport \'./views/flux-element.js\'\r\nimport \'./views/menu-element.js\'\r\nimport \'./views/profile-element.js\'\r\n//import \'./views/profile-cartouche-element.js\'\r\n\r\nimport \'./views/config-element.js\'\r\nimport \'./views/fab-element.js\'\r\nimport \'./views/post-element.js\'\r\n//import \'./app-old-element.js\'*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///86\n')}]);